
8.1. Introduction

   In this chapter, we start constructing the LFS system in earnest.

   The installation of this software is straightforward. Although in many
   cases the installation instructions could be made shorter and more
   generic, we have opted to provide the full instructions for every package
   to minimize the possibilities for mistakes. The key to learning what makes
   a Linux system work is to know what each package is used for and why you
   (or the system) may need it.

   We do not recommend using optimizations. They can make a program run
   slightly faster, but they may also cause compilation difficulties and
   problems when running the program. If a package refuses to compile when
   using optimization, try to compile it without optimization and see if that
   fixes the problem. Even if the package does compile when using
   optimization, there is the risk it may have been compiled incorrectly
   because of the complex interactions between the code and build tools. Also
   note that the -march and -mtune options using values not specified in the
   book have not been tested. This may cause problems with the toolchain
   packages (Binutils, GCC and Glibc). The small potential gains achieved in
   using compiler optimizations are often outweighed by the risks. First-time
   builders of LFS are encouraged to build without custom optimizations. The
   subsequent system will still run very fast and be stable at the same time.

   Before the installation instructions, each installation page provides
   information about the package, including a concise description of what it
   contains, approximately how long it will take to build, and how much disk
   space is required during this building process. Following the installation
   instructions, there is a list of programs and libraries (along with brief
   descriptions) that the package installs.

  Note

   The SBU values and required disk space includes test suite data for all
   applicable packages in Chapter 8. SBU values have been calculated using a
   single CPU core (-j1) for all operations.

  8.1.1. About libraries

   In general, the LFS editors discourage building and installing static
   libraries. The original purpose for most static libraries has been made
   obsolete in a modern Linux system. In addition, linking a static library
   into a program can be detrimental. If an update to the library is needed
   to remove a security problem, all programs that use the static library
   will need to be relinked to the new library. Since the use of static
   libraries is not always obvious, the relevant programs (and the procedures
   needed to do the linking) may not even be known.

   In the procedures in this chapter, we remove or disable installation of
   most static libraries. Usually this is done by passing a --disable-static
   option to configure. In other cases, alternate means are needed. In a few
   cases, especially glibc and gcc, the use of static libraries remains
   essential to the general package building process.

   For a more complete discussion of libraries, see the discussion Libraries:
   Static or shared? in the BLFS book.

8.2. Package Management

   Package Management is an often requested addition to the LFS Book. A
   Package Manager allows tracking the installation of files making it easy
   to remove and upgrade packages. As well as the binary and library files, a
   package manager will handle the installation of configuration files.
   Before you begin to wonder, NO—this section will not talk about nor
   recommend any particular package manager. What it provides is a roundup of
   the more popular techniques and how they work. The perfect package manager
   for you may be among these techniques or may be a combination of two or
   more of these techniques. This section briefly mentions issues that may
   arise when upgrading packages.

   Some reasons why no package manager is mentioned in LFS or BLFS include:

     * Dealing with package management takes the focus away from the goals of
       these books—teaching how a Linux system is built.

     * There are multiple solutions for package management, each having its
       strengths and drawbacks. Including one that satisfies all audiences is
       difficult.

   There are some hints written on the topic of package management. Visit the
   Hints Project and see if one of them fits your need.

  8.2.1. Upgrade Issues

   A Package Manager makes it easy to upgrade to newer versions when they are
   released. Generally the instructions in the LFS and BLFS books can be used
   to upgrade to the newer versions. Here are some points that you should be
   aware of when upgrading packages, especially on a running system.

     * If Linux kernel needs to be upgraded (for example, from 5.10.17 to
       5.10.18 or 5.11.1), nothing else need to be rebuilt. The system will
       keep working fine thanks to the well-defined border between kernel and
       userspace. Specifically, Linux API headers need not to be (and should
       not be, see the next item) upgraded alongside the kernel. You'll need
       to reboot your system to use the upgraded kernel.

     * If Linux API headers or Glibc needs to be upgraded to a newer version,
       (e.g. from glibc-2.31 to glibc-2.32), it is safer to rebuild LFS.
       Though you may be able to rebuild all the packages in their dependency
       order, we do not recommend it.

     * If a package containing a shared library is updated, and if the name
       of the library changes, then any packages dynamically linked to the
       library need to be recompiled in order to link against the newer
       library. (Note that there is no correlation between the package
       version and the name of the library.) For example, consider a package
       foo-1.2.3 that installs a shared library with name libfoo.so.1. If you
       upgrade the package to a newer version foo-1.2.4 that installs a
       shared library with name libfoo.so.2. In this case, any packages that
       are dynamically linked to libfoo.so.1 need to be recompiled to link
       against libfoo.so.2 in order to use the new library version. You
       should not remove the previous libraries unless all the dependent
       packages are recompiled.

     * If a package containing a shared library is updated, and the name of
       library doesn't change, but the version number of the library file
       decreases (for example, the name of the library is kept named
       libfoo.so.1, but the name of library file is changed from
       libfoo.so.1.25 to libfoo.so.1.24), you should remove the library file
       from the previously installed version (libfoo.so.1.25 in the case).
       Or, a ldconfig run (by yourself using a command line, or by the
       installation of some package) will reset the symlink libfoo.so.1 to
       point to the old library file because it seems having a “newer”
       version, as its version number is larger. This situation may happen if
       you have to downgrade a package, or the package changes the versioning
       scheme of library files suddenly.

     * If a package containing a shared library is updated, and the name of
       library doesn't change, but a severe issue (especially, a security
       vulnerability) is fixed, all running programs linked to the shared
       library should be restarted. The following command, run as root after
       updating, will list what is using the old versions of those libraries
       (replace libfoo with the name of the library):

 grep -l  -e 'libfoo.*deleted' /proc/*/maps |
    tr -cd 0-9\\n | xargs -r ps u

       If OpenSSH is being used for accessing the system and it is linked to
       the updated library, you need to restart sshd service, then logout,
       login again, and rerun that command to confirm nothing is still using
       the deleted libraries.

     * If a binary or a shared library is overwritten, the processes using
       the code or data in the binary or library may crash. The correct way
       to update a binary or a shared library without causing the process to
       crash is to remove it first, then install the new version into
       position. The install command provided by Coreutils has already
       implemented this and most packages use it to install binaries and
       libraries. This means that you won't be troubled by this issue most of
       the time. However, the install process of some packages (notably
       Mozilla JS in BLFS) just overwrites the file if it exists and causes a
       crash, so it's safer to save your work and close unneeded running
       processes before updating a package.

  8.2.2. Package Management Techniques

   The following are some common package management techniques. Before making
   a decision on a package manager, do some research on the various
   techniques, particularly the drawbacks of the particular scheme.

    8.2.2.1. It is All in My Head!

   Yes, this is a package management technique. Some folks do not find the
   need for a package manager because they know the packages intimately and
   know what files are installed by each package. Some users also do not need
   any package management because they plan on rebuilding the entire system
   when a package is changed.

    8.2.2.2. Install in Separate Directories

   This is a simplistic package management that does not need any extra
   package to manage the installations. Each package is installed in a
   separate directory. For example, package foo-1.1 is installed in
   /usr/pkg/foo-1.1 and a symlink is made from /usr/pkg/foo to
   /usr/pkg/foo-1.1. When installing a new version foo-1.2, it is installed
   in /usr/pkg/foo-1.2 and the previous symlink is replaced by a symlink to
   the new version.

   Environment variables such as PATH, LD_LIBRARY_PATH, MANPATH, INFOPATH and
   CPPFLAGS need to be expanded to include /usr/pkg/foo. For more than a few
   packages, this scheme becomes unmanageable.

    8.2.2.3. Symlink Style Package Management

   This is a variation of the previous package management technique. Each
   package is installed similar to the previous scheme. But instead of making
   the symlink, each file is symlinked into the /usr hierarchy. This removes
   the need to expand the environment variables. Though the symlinks can be
   created by the user to automate the creation, many package managers have
   been written using this approach. A few of the popular ones include Stow,
   Epkg, Graft, and Depot.

   The installation needs to be faked, so that the package thinks that it is
   installed in /usr though in reality it is installed in the /usr/pkg
   hierarchy. Installing in this manner is not usually a trivial task. For
   example, consider that you are installing a package libfoo-1.1. The
   following instructions may not install the package properly:

 ./configure --prefix=/usr/pkg/libfoo/1.1
 make
 make install

   The installation will work, but the dependent packages may not link to
   libfoo as you would expect. If you compile a package that links against
   libfoo, you may notice that it is linked to
   /usr/pkg/libfoo/1.1/lib/libfoo.so.1 instead of /usr/lib/libfoo.so.1 as you
   would expect. The correct approach is to use the DESTDIR strategy to fake
   installation of the package. This approach works as follows:

 ./configure --prefix=/usr
 make
 make DESTDIR=/usr/pkg/libfoo/1.1 install

   Most packages support this approach, but there are some which do not. For
   the non-compliant packages, you may either need to manually install the
   package, or you may find that it is easier to install some problematic
   packages into /opt.

    8.2.2.4. Timestamp Based

   In this technique, a file is timestamped before the installation of the
   package. After the installation, a simple use of the find command with the
   appropriate options can generate a log of all the files installed after
   the timestamp file was created. A package manager written with this
   approach is install-log.

   Though this scheme has the advantage of being simple, it has two
   drawbacks. If, during installation, the files are installed with any
   timestamp other than the current time, those files will not be tracked by
   the package manager. Also, this scheme can only be used when one package
   is installed at a time. The logs are not reliable if two packages are
   being installed on two different consoles.

    8.2.2.5. Tracing Installation Scripts

   In this approach, the commands that the installation scripts perform are
   recorded. There are two techniques that one can use:

   The LD_PRELOAD environment variable can be set to point to a library to be
   preloaded before installation. During installation, this library tracks
   the packages that are being installed by attaching itself to various
   executables such as cp, install, mv and tracking the system calls that
   modify the filesystem. For this approach to work, all the executables need
   to be dynamically linked without the suid or sgid bit. Preloading the
   library may cause some unwanted side-effects during installation.
   Therefore, it is advised that one performs some tests to ensure that the
   package manager does not break anything and logs all the appropriate
   files.

   The second technique is to use strace, which logs all system calls made
   during the execution of the installation scripts.

    8.2.2.6. Creating Package Archives

   In this scheme, the package installation is faked into a separate tree as
   described in the Symlink style package management. After the installation,
   a package archive is created using the installed files. This archive is
   then used to install the package either on the local machine or can even
   be used to install the package on other machines.

   This approach is used by most of the package managers found in the
   commercial distributions. Examples of package managers that follow this
   approach are RPM (which, incidentally, is required by the Linux Standard
   Base Specification), pkg-utils, Debian's apt, and Gentoo's Portage system.
   A hint describing how to adopt this style of package management for LFS
   systems is located at
   https://www.linuxfromscratch.org/hints/downloads/files/fakeroot.txt.

   Creation of package files that include dependency information is complex
   and is beyond the scope of LFS.

   Slackware uses a tar based system for package archives. This system
   purposely does not handle package dependencies as more complex package
   managers do. For details of Slackware package management, see
   http://www.slackbook.org/html/package-management.html.

    8.2.2.7. User Based Management

   This scheme, unique to LFS, was devised by Matthias Benkmann, and is
   available from the Hints Project. In this scheme, each package is
   installed as a separate user into the standard locations. Files belonging
   to a package are easily identified by checking the user ID. The features
   and shortcomings of this approach are too complex to describe in this
   section. For the details please see the hint at
   https://www.linuxfromscratch.org/hints/downloads/files/more_control_and_pkg_man.txt.

  8.2.3. Deploying LFS on Multiple Systems

   One of the advantages of an LFS system is that there are no files that
   depend on the position of files on a disk system. Cloning an LFS build to
   another computer with the same architecture as the base system is as
   simple as using tar on the LFS partition that contains the root directory
   (about 250MB uncompressed for a base LFS build), copying that file via
   network transfer or CD-ROM to the new system and expanding it. From that
   point, a few configuration files will have to be changed. Configuration
   files that may need to be updated include: /etc/hosts, /etc/fstab,
   /etc/passwd, /etc/group, /etc/shadow, /etc/ld.so.conf,
   /etc/sysconfig/rc.site, /etc/sysconfig/network, and
   /etc/sysconfig/ifconfig.eth0.

   A custom kernel may need to be built for the new system depending on
   differences in system hardware and the original kernel configuration.

  Note

   There have been some reports of issues when copying between similar but
   not identical architectures. For instance, the instruction set for an
   Intel system is not identical with an AMD processor and later versions of
   some processors may have instructions that are unavailable in earlier
   versions.

   Finally the new system has to be made bootable via Section 10.4, “Using
   GRUB to Set Up the Boot Process”.

8.3. Man-pages-5.13

   The Man-pages package contains over 2,200 man pages.

   Approximate build time: less than 0.1 SBU
   Required disk space: 33 MB

  8.3.1. Installation of Man-pages

   Install Man-pages by running:

 make prefix=/usr install

  8.3.2. Contents of Man-pages

   Installed files: various man pages

    Short Descriptions

   man pages Describe C programming language functions, important device      
             files, and significant configuration files                       

8.4. Iana-Etc-20220812

   The Iana-Etc package provides data for network services and protocols.

   Approximate build time: less than 0.1 SBU
   Required disk space: 4.8 MB

  8.4.1. Installation of Iana-Etc

   For this package, we only need to copy the files into place:

 cp services protocols /etc

  8.4.2. Contents of Iana-Etc

   Installed files: /etc/protocols and /etc/services

    Short Descriptions

   /etc/protocols Describes the various DARPA Internet protocols that are     
                  available from the TCP/IP subsystem                         
   /etc/services  Provides a mapping between friendly textual names for       
                  internet services, and their underlying assigned port       
                  numbers and protocol types                                  

8.5. Glibc-2.36

   The Glibc package contains the main C library. This library provides the
   basic routines for allocating memory, searching directories, opening and
   closing files, reading and writing files, string handling, pattern
   matching, arithmetic, and so on.

   Approximate build time: 24 SBU
   Required disk space: 2.8 GB

  8.5.1. Installation of Glibc

   Some of the Glibc programs use the non-FHS compliant /var/db directory to
   store their runtime data. Apply the following patch to make such programs
   store their runtime data in the FHS-compliant locations:

 patch -Np1 -i ../glibc-2.36-fhs-1.patch

   The Glibc documentation recommends building Glibc in a dedicated build
   directory:

 mkdir -v build
 cd       build

   Ensure that the ldconfig and sln utilities will be installed into
   /usr/sbin:

 echo "rootsbindir=/usr/sbin" > configparms

   Prepare Glibc for compilation:

 ../configure --prefix=/usr                            \
              --disable-werror                         \
              --enable-kernel=3.2                      \
              --enable-stack-protector=strong          \
              --with-headers=/usr/include              \
              libc_cv_slibdir=/usr/lib

   The meaning of the configure options:

   --disable-werror

           This option disables the -Werror option passed to GCC. This is
           necessary for running the test suite.

   --enable-kernel=3.2

           This option tells the build system that this glibc may be used
           with kernels as old as 3.2. This means generating workarounds in
           case a system call introduced in a later version cannot be used.

   --enable-stack-protector=strong

           This option increases system security by adding extra code to
           check for buffer overflows, such as stack smashing attacks.

   --with-headers=/usr/include

           This option tells the build system where to find the kernel API
           headers.

   libc_cv_slibdir=/usr/lib

           This variable sets the correct library for all systems. We do not
           want lib64 to be used.

   Compile the package:

 make

  Important

   In this section, the test suite for Glibc is considered critical. Do not
   skip it under any circumstance.

   Generally a few tests do not pass. The test failures listed below are
   usually safe to ignore.

 make check

   You may see some test failures. The Glibc test suite is somewhat dependent
   on the host system. A few failures out of over 4200 tests can generally be
   ignored. This is a list of the most common issues seen for recent versions
   of LFS:

     * io/tst-lchmod is known to fail in the LFS chroot environment.

     * misc/tst-ttyname is known to fail in the LFS chroot environment.

     * The nss/tst-nss-files-hosts-long test is known to fail if the system
       has no non-loopback IP addresses.

     * The stdlib/tst-arc4random-thread test is known to fail if the host
       kernel is relatively old.

     * Some tests, for example nss/tst-nss-files-hosts-multi, are known to
       fail on relatively slow systems due to an internal timeout.

   Though it is a harmless message, the install stage of Glibc will complain
   about the absence of /etc/ld.so.conf. Prevent this warning with:

 touch /etc/ld.so.conf

   Fix the Makefile to skip an unneeded sanity check that fails in the LFS
   partial environment:

 sed '/test-installation/s@$(PERL)@echo not running@' -i ../Makefile

   Install the package:

 make install

   Fix hardcoded path to the executable loader in ldd script:

 sed '/RTLDLIST=/s@/usr@@g' -i /usr/bin/ldd

   Install the configuration file and runtime directory for nscd:

 cp -v ../nscd/nscd.conf /etc/nscd.conf
 mkdir -pv /var/cache/nscd

   Next, install the locales that can make the system respond in a different
   language. None of the locales are required, but if some of them are
   missing, the test suites of future packages would skip important
   testcases.

   Individual locales can be installed using the localedef program. E.g., the
   second localedef command below combines the /usr/share/i18n/locales/cs_CZ
   charset-independent locale definition with the
   /usr/share/i18n/charmaps/UTF-8.gz charmap definition and appends the
   result to the /usr/lib/locale/locale-archive file. The following
   instructions will install the minimum set of locales necessary for the
   optimal coverage of tests:

 mkdir -pv /usr/lib/locale
 localedef -i POSIX -f UTF-8 C.UTF-8 2> /dev/null || true
 localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8
 localedef -i de_DE -f ISO-8859-1 de_DE
 localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
 localedef -i de_DE -f UTF-8 de_DE.UTF-8
 localedef -i el_GR -f ISO-8859-7 el_GR
 localedef -i en_GB -f ISO-8859-1 en_GB
 localedef -i en_GB -f UTF-8 en_GB.UTF-8
 localedef -i en_HK -f ISO-8859-1 en_HK
 localedef -i en_PH -f ISO-8859-1 en_PH
 localedef -i en_US -f ISO-8859-1 en_US
 localedef -i en_US -f UTF-8 en_US.UTF-8
 localedef -i es_ES -f ISO-8859-15 es_ES@euro
 localedef -i es_MX -f ISO-8859-1 es_MX
 localedef -i fa_IR -f UTF-8 fa_IR
 localedef -i fr_FR -f ISO-8859-1 fr_FR
 localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
 localedef -i fr_FR -f UTF-8 fr_FR.UTF-8
 localedef -i is_IS -f ISO-8859-1 is_IS
 localedef -i is_IS -f UTF-8 is_IS.UTF-8
 localedef -i it_IT -f ISO-8859-1 it_IT
 localedef -i it_IT -f ISO-8859-15 it_IT@euro
 localedef -i it_IT -f UTF-8 it_IT.UTF-8
 localedef -i ja_JP -f EUC-JP ja_JP
 localedef -i ja_JP -f SHIFT_JIS ja_JP.SJIS 2> /dev/null || true
 localedef -i ja_JP -f UTF-8 ja_JP.UTF-8
 localedef -i nl_NL@euro -f ISO-8859-15 nl_NL@euro
 localedef -i ru_RU -f KOI8-R ru_RU.KOI8-R
 localedef -i ru_RU -f UTF-8 ru_RU.UTF-8
 localedef -i se_NO -f UTF-8 se_NO.UTF-8
 localedef -i ta_IN -f UTF-8 ta_IN.UTF-8
 localedef -i tr_TR -f UTF-8 tr_TR.UTF-8
 localedef -i zh_CN -f GB18030 zh_CN.GB18030
 localedef -i zh_HK -f BIG5-HKSCS zh_HK.BIG5-HKSCS
 localedef -i zh_TW -f UTF-8 zh_TW.UTF-8

   In addition, install the locale for your own country, language and
   character set.

   Alternatively, install all locales listed in the
   glibc-2.36/localedata/SUPPORTED file (it includes every locale listed
   above and many more) at once with the following time-consuming command:

 make localedata/install-locales

   Then use the localedef command to create and install locales not listed in
   the glibc-2.36/localedata/SUPPORTED file when you need them. For instance,
   the following two locales are needed for some tests later in this chapter:

 localedef -i POSIX -f UTF-8 C.UTF-8 2> /dev/null || true
 localedef -i ja_JP -f SHIFT_JIS ja_JP.SJIS 2> /dev/null || true

  Note

   Glibc now uses libidn2 when resolving internationalized domain names. This
   is a run time dependency. If this capability is needed, the instructions
   for installing libidn2 are in the BLFS libidn2 page.

  8.5.2. Configuring Glibc

    8.5.2.1. Adding nsswitch.conf

   The /etc/nsswitch.conf file needs to be created because the Glibc defaults
   do not work well in a networked environment.

   Create a new file /etc/nsswitch.conf by running the following:

 cat > /etc/nsswitch.conf << "EOF"
 # Begin /etc/nsswitch.conf

 passwd: files
 group: files
 shadow: files

 hosts: files dns
 networks: files

 protocols: files
 services: files
 ethers: files
 rpc: files

 # End /etc/nsswitch.conf
 EOF

    8.5.2.2. Adding time zone data

   Install and set up the time zone data with the following:

 tar -xf ../../tzdata2022c.tar.gz

 ZONEINFO=/usr/share/zoneinfo
 mkdir -pv $ZONEINFO/{posix,right}

 for tz in etcetera southamerica northamerica europe africa antarctica  \
           asia australasia backward; do
     zic -L /dev/null   -d $ZONEINFO       ${tz}
     zic -L /dev/null   -d $ZONEINFO/posix ${tz}
     zic -L leapseconds -d $ZONEINFO/right ${tz}
 done

 cp -v zone.tab zone1970.tab iso3166.tab $ZONEINFO
 zic -d $ZONEINFO -p America/New_York
 unset ZONEINFO

   The meaning of the zic commands:

   zic -L /dev/null ...

           This creates posix time zones without any leap seconds. It is
           conventional to put these in both zoneinfo and zoneinfo/posix. It
           is necessary to put the POSIX time zones in zoneinfo, otherwise
           various test-suites will report errors. On an embedded system,
           where space is tight and you do not intend to ever update the time
           zones, you could save 1.9 MB by not using the posix directory, but
           some applications or test-suites might produce some failures.

   zic -L leapseconds ...

           This creates right time zones, including leap seconds. On an
           embedded system, where space is tight and you do not intend to
           ever update the time zones, or care about the correct time, you
           could save 1.9MB by omitting the right directory.

   zic ... -p ...

           This creates the posixrules file. We use New York because POSIX
           requires the daylight savings time rules to be in accordance with
           US rules.

   One way to determine the local time zone is to run the following script:

 tzselect

   After answering a few questions about the location, the script will output
   the name of the time zone (e.g., America/Edmonton). There are also some
   other possible time zones listed in /usr/share/zoneinfo such as
   Canada/Eastern or EST5EDT that are not identified by the script but can be
   used.

   Then create the /etc/localtime file by running:

 ln -sfv /usr/share/zoneinfo/<xxx> /etc/localtime

   Replace <xxx> with the name of the time zone selected (e.g.,
   Canada/Eastern).

    8.5.2.3. Configuring the Dynamic Loader

   By default, the dynamic loader (/lib/ld-linux.so.2) searches through
   /usr/lib for dynamic libraries that are needed by programs as they are
   run. However, if there are libraries in directories other than /usr/lib,
   these need to be added to the /etc/ld.so.conf file in order for the
   dynamic loader to find them. Two directories that are commonly known to
   contain additional libraries are /usr/local/lib and /opt/lib, so add those
   directories to the dynamic loader's search path.

   Create a new file /etc/ld.so.conf by running the following:

 cat > /etc/ld.so.conf << "EOF"
 # Begin /etc/ld.so.conf
 /usr/local/lib
 /opt/lib
 EOF

   If desired, the dynamic loader can also search a directory and include the
   contents of files found there. Generally the files in this include
   directory are one line specifying the desired library path. To add this
   capability run the following commands:

 cat >> /etc/ld.so.conf << "EOF"
 # Add an include directory
 include /etc/ld.so.conf.d/*.conf
 EOF
 mkdir -pv /etc/ld.so.conf.d

  8.5.3. Contents of Glibc

   Installed programs: gencat, getconf, getent, iconv, iconvconfig, ldconfig,
   ldd, lddlibc4, ld.so (symlink to ld-linux-x86-64.so.2 or ld-linux.so.2),
   locale, localedef, makedb, mtrace, nscd, pcprofiledump, pldd, sln,
   sotruss, sprof, tzselect, xtrace, zdump, and zic
   Installed libraries: ld-linux-x86-64.so.2, ld-linux.so.2,
   libBrokenLocale.{a,so}, libanl.{a,so}, libc.{a,so}, libc_nonshared.a,
   libc_malloc_debug.so, libcrypt.{a,so}, libdl.{a,so.2}, libg.a,
   libm.{a,so}, libmcheck.a, libmemusage.so, libmvec.{a,so}, libnsl.so.1,
   libnss_compat.so, libnss_dns.so, libnss_files.so, libnss_hesiod.so,
   libpcprofile.so, libpthread.{a,so.0}, libresolv.{a,so}, librt.{a,so.1},
   libthread_db.so, and libutil.{a,so.1}
   Installed directories: /usr/include/arpa, /usr/include/bits,
   /usr/include/gnu, /usr/include/net, /usr/include/netash,
   /usr/include/netatalk, /usr/include/netax25, /usr/include/neteconet,
   /usr/include/netinet, /usr/include/netipx, /usr/include/netiucv,
   /usr/include/netpacket, /usr/include/netrom, /usr/include/netrose,
   /usr/include/nfs, /usr/include/protocols, /usr/include/rpc,
   /usr/include/sys, /usr/lib/audit, /usr/lib/gconv, /usr/lib/locale,
   /usr/libexec/getconf, /usr/share/i18n, /usr/share/zoneinfo,
   /var/cache/nscd, and /var/lib/nss_db

    Short Descriptions

   gencat            Generates message catalogues                             
   getconf           Displays the system configuration values for file system 
                     specific variables                                       
   getent            Gets entries from an administrative database             
   iconv             Performs character set conversion                        
   iconvconfig       Creates fastloading iconv module configuration files     
   ldconfig          Configures the dynamic linker runtime bindings           
   ldd               Reports which shared libraries are required by each      
                     given program or shared library                          
   lddlibc4          Assists ldd with object files. It does not exist on      
                     newer architectures like x86_64                          
   locale            Prints various information about the current locale      
   localedef         Compiles locale specifications                           
   makedb            Creates a simple database from textual input             
   mtrace            Reads and interprets a memory trace file and displays a  
                     summary in human-readable format                         
   nscd              A daemon that provides a cache for the most common name  
                     service requests                                         
   pcprofiledump     Dump information generated by PC profiling               
   pldd              Lists dynamic shared objects used by running processes   
   sln               A statically linked ln program                           
   sotruss           Traces shared library procedure calls of a specified     
                     command                                                  
   sprof             Reads and displays shared object profiling data          
   tzselect          Asks the user about the location of the system and       
                     reports the corresponding time zone description          
   xtrace            Traces the execution of a program by printing the        
                     currently executed function                              
   zdump             The time zone dumper                                     
   zic               The time zone compiler                                   
   ld-*.so           The helper program for shared library executables        
   libBrokenLocale   Used internally by Glibc as a gross hack to get broken   
                     programs (e.g., some Motif applications) running. See    
                     comments in glibc-2.36/locale/broken_cur_max.c for more  
                     information                                              
   libanl            An asynchronous name lookup library                      
   libc              The main C library                                       
   libc_malloc_debug Turns on memory allocation checking when preloaded       
   libcrypt          The cryptography library                                 
   libdl             Dummy library containing no functions. Previously was    
                     the dynamic linking interface library, whose functions   
                     are now in libc                                          
   libg              Dummy library containing no functions. Previously was a  
                     runtime library for g++                                  
   libm              The mathematical library                                 
   libmvec           The vector math library, linked in as needed when libm   
                     is used                                                  
   libmcheck         Turns on memory allocation checking when linked to       
   libmemusage       Used by memusage to help collect information about the   
                     memory usage of a program                                
   libnsl            The network services library, now deprecated             
   libnss_*          The Name Service Switch modules, containing functions    
                     for resolving host names, user names, group names,       
                     aliases, services, protocols, etc. Loaded by libc        
                     according to the configuration in /etc/nsswitch.conf     
   libpcprofile      Can be preloaded to PC profile an executable             
   libpthread        Dummy library containing no functions. Previously        
                     contained functions providing most of the interfaces     
                     specified by the POSIX.1b Realtime Extension, now the    
                     functions are in libc                                    
   libresolv         Contains functions for creating, sending, and            
                     interpreting packets to the Internet domain name servers 
   librt             Contains functions providing most of the interfaces      
                     specified by the POSIX.1b Realtime Extension             
   libthread_db      Contains functions useful for building debuggers for     
                     multi-threaded programs                                  
   libutil           Dummy library containing no functions. Previously        
                     contained code for “standard” functions used in many     
                     different Unix utilities. These functions are now in     
                     libc                                                     

8.6. Zlib-1.2.12

   The Zlib package contains compression and decompression routines used by
   some programs.

   Approximate build time: less than 0.1 SBU
   Required disk space: 6.1 MB

  8.6.1. Installation of Zlib

   Prepare Zlib for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

   Remove a useless static library:

 rm -fv /usr/lib/libz.a

  8.6.2. Contents of Zlib

   Installed libraries: libz.so

    Short Descriptions

   libz Contains compression and decompression functions used by some         
        programs                                                              

8.7. Bzip2-1.0.8

   The Bzip2 package contains programs for compressing and decompressing
   files. Compressing text files with bzip2 yields a much better compression
   percentage than with the traditional gzip.

   Approximate build time: less than 0.1 SBU
   Required disk space: 7.2 MB

  8.7.1. Installation of Bzip2

   Apply a patch that will install the documentation for this package:

 patch -Np1 -i ../bzip2-1.0.8-install_docs-1.patch

   The following command ensures installation of symbolic links are relative:

 sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile

   Ensure the man pages are installed into the correct location:

 sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile

   Prepare Bzip2 for compilation with:

 make -f Makefile-libbz2_so
 make clean

   The meaning of the make parameter:

   -f Makefile-libbz2_so

           This will cause Bzip2 to be built using a different Makefile file,
           in this case the Makefile-libbz2_so file, which creates a dynamic
           libbz2.so library and links the Bzip2 utilities against it.

   Compile and test the package:

 make

   Install the programs:

 make PREFIX=/usr install

   Install the shared library:

 cp -av libbz2.so.* /usr/lib
 ln -sv libbz2.so.1.0.8 /usr/lib/libbz2.so

   Install the shared bzip2 binary into the /usr/bin directory, and replace
   two copies of bzip2 with symlinks:

 cp -v bzip2-shared /usr/bin/bzip2
 for i in /usr/bin/{bzcat,bunzip2}; do
   ln -sfv bzip2 $i
 done

   Remove a useless static library:

 rm -fv /usr/lib/libbz2.a

  8.7.2. Contents of Bzip2

   Installed programs: bunzip2 (link to bzip2), bzcat (link to bzip2), bzcmp
   (link to bzdiff), bzdiff, bzegrep (link to bzgrep), bzfgrep (link to
   bzgrep), bzgrep, bzip2, bzip2recover, bzless (link to bzmore), and bzmore
   Installed libraries: libbz2.so
   Installed directory: /usr/share/doc/bzip2-1.0.8

    Short Descriptions

   bunzip2      Decompresses bzipped files                                    
   bzcat        Decompresses to standard output                               
   bzcmp        Runs cmp on bzipped files                                     
   bzdiff       Runs diff on bzipped files                                    
   bzegrep      Runs egrep on bzipped files                                   
   bzfgrep      Runs fgrep on bzipped files                                   
   bzgrep       Runs grep on bzipped files                                    
   bzip2        Compresses files using the Burrows-Wheeler block sorting text 
                compression algorithm with Huffman coding; the compression    
                rate is better than that achieved by more conventional        
                compressors using “Lempel-Ziv” algorithms, like gzip          
   bzip2recover Tries to recover data from damaged bzipped files              
   bzless       Runs less on bzipped files                                    
   bzmore       Runs more on bzipped files                                    
   libbz2       The library implementing lossless, block-sorting data         
                compression, using the Burrows-Wheeler algorithm              

8.8. Xz-5.2.6

   The Xz package contains programs for compressing and decompressing files.
   It provides capabilities for the lzma and the newer xz compression
   formats. Compressing text files with xz yields a better compression
   percentage than with the traditional gzip or bzip2 commands.

   Approximate build time: 0.2 SBU
   Required disk space: 16 MB

  8.8.1. Installation of Xz

   Prepare Xz for compilation with:

 ./configure --prefix=/usr    \
             --disable-static \
             --docdir=/usr/share/doc/xz-5.2.6

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.8.2. Contents of Xz

   Installed programs: lzcat (link to xz), lzcmp (link to xzdiff), lzdiff
   (link to xzdiff), lzegrep (link to xzgrep), lzfgrep (link to xzgrep),
   lzgrep (link to xzgrep), lzless (link to xzless), lzma (link to xz),
   lzmadec, lzmainfo, lzmore (link to xzmore), unlzma (link to xz), unxz
   (link to xz), xz, xzcat (link to xz), xzcmp (link to xzdiff), xzdec,
   xzdiff, xzegrep (link to xzgrep), xzfgrep (link to xzgrep), xzgrep,
   xzless, and xzmore
   Installed libraries: liblzma.so
   Installed directories: /usr/include/lzma and /usr/share/doc/xz-5.2.6

    Short Descriptions

   lzcat    Decompresses to standard output                                   
   lzcmp    Runs cmp on LZMA compressed files                                 
   lzdiff   Runs diff on LZMA compressed files                                
   lzegrep  Runs egrep on LZMA compressed files                               
   lzfgrep  Runs fgrep on LZMA compressed files                               
   lzgrep   Runs grep on LZMA compressed files                                
   lzless   Runs less on LZMA compressed files                                
   lzma     Compresses or decompresses files using the LZMA format            
   lzmadec  A small and fast decoder for LZMA compressed files                
   lzmainfo Shows information stored in the LZMA compressed file header       
   lzmore   Runs more on LZMA compressed files                                
   unlzma   Decompresses files using the LZMA format                          
   unxz     Decompresses files using the XZ format                            
   xz       Compresses or decompresses files using the XZ format              
   xzcat    Decompresses to standard output                                   
   xzcmp    Runs cmp on XZ compressed files                                   
   xzdec    A small and fast decoder for XZ compressed files                  
   xzdiff   Runs diff on XZ compressed files                                  
   xzegrep  Runs egrep on XZ compressed files                                 
   xzfgrep  Runs fgrep on XZ compressed files                                 
   xzgrep   Runs grep on XZ compressed files                                  
   xzless   Runs less on XZ compressed files                                  
   xzmore   Runs more on XZ compressed files                                  
   liblzma  The library implementing lossless, block-sorting data             
            compression, using the Lempel-Ziv-Markov chain algorithm          

8.9. Zstd-1.5.2

   Zstandard is a real-time compression algorithm, providing high compression
   ratios. It offers a very wide range of compression / speed trade-offs,
   while being backed by a very fast decoder.

   Approximate build time: 1.1 SBU
   Required disk space: 56 MB

  8.9.1. Installation of Zstd

   Apply a patch to fix some issues identified by upstream:

 patch -Np1 -i ../zstd-1.5.2-upstream_fixes-1.patch

   Compile the package:

 make prefix=/usr

  Note

   In the test output there are several places that indicate 'failed'. These
   are expected and only 'FAIL' is an actual test failure. There should be no
   test failures.

   To test the results, issue:

 make check

   Install the package:

 make prefix=/usr install

   Remove the static library:

 rm -v /usr/lib/libzstd.a

  8.9.2. Contents of Zstd

   Installed programs: zstd, zstdcat (link to zstd), zstdgrep, zstdless,
   zstdmt (link to zstd), and unzstd (link to zstd)
   Installed library: libzstd.so

    Short Descriptions

   zstd     Compresses or decompresses files using the ZSTD format            
   zstdgrep Runs grep on ZSTD compressed files                                
   zstdless Runs less on ZSTD compressed files                                
   libzstd  The library implementing lossless data compression, using the     
            ZSTD algorithm                                                    

8.10. File-5.42

   The File package contains a utility for determining the type of a given
   file or files.

   Approximate build time: 0.1 SBU
   Required disk space: 16 MB

  8.10.1. Installation of File

   Prepare File for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.10.2. Contents of File

   Installed programs: file
   Installed library: libmagic.so

    Short Descriptions

   file     Tries to classify each given file; it does this by performing     
            several tests—file system tests, magic number tests, and language 
            tests                                                             
   libmagic Contains routines for magic number recognition, used by the file  
            program                                                           

8.11. Readline-8.1.2

   The Readline package is a set of libraries that offers command-line
   editing and history capabilities.

   Approximate build time: 0.1 SBU
   Required disk space: 15 MB

  8.11.1. Installation of Readline

   Reinstalling Readline will cause the old libraries to be moved to
   <libraryname>.old. While this is normally not a problem, in some cases it
   can trigger a linking bug in ldconfig. This can be avoided by issuing the
   following two seds:

 sed -i '/MV.*old/d' Makefile.in
 sed -i '/{OLDSUFF}/c:' support/shlib-install

   Prepare Readline for compilation:

 ./configure --prefix=/usr    \
             --disable-static \
             --with-curses    \
             --docdir=/usr/share/doc/readline-8.1.2

   The meaning of the configure option:

   --with-curses

           This option tells Readline that it can find the termcap library
           functions in the curses library, rather than a separate termcap
           library. It allows generating a correct readline.pc file.

   Compile the package:

 make SHLIB_LIBS="-lncursesw"

   The meaning of the make option:

   SHLIB_LIBS="-lncursesw"

           This option forces Readline to link against the libncursesw
           library.

   This package does not come with a test suite.

   Install the package:

 make SHLIB_LIBS="-lncursesw" install

   If desired, install the documentation:

 install -v -m644 doc/*.{ps,pdf,html,dvi} /usr/share/doc/readline-8.1.2

  8.11.2. Contents of Readline

   Installed libraries: libhistory.so and libreadline.so
   Installed directories: /usr/include/readline and
   /usr/share/doc/readline-8.1.2

    Short Descriptions

   libhistory  Provides a consistent user interface for recalling lines of    
               history                                                        
   libreadline Provides a set of commands for manipulating text entered in an 
               interactive session of a program                               

8.12. M4-1.4.19

   The M4 package contains a macro processor.

   Approximate build time: 0.6 SBU
   Required disk space: 49 MB

  8.12.1. Installation of M4

   Prepare M4 for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.12.2. Contents of M4

   Installed program: m4

    Short Descriptions

   m4 Copies the given files while expanding the macros that they contain.    
      These macros are either built-in or user-defined and can take any       
      number of arguments. Besides performing macro expansion, m4 has         
      built-in functions for including named files, running Unix commands,    
      performing integer arithmetic, manipulating text, recursion, etc. The   
      m4 program can be used either as a front-end to a compiler or as a      
      macro processor in its own right                                        

8.13. Bc-6.0.1

   The Bc package contains an arbitrary precision numeric processing
   language.

   Approximate build time: less than 0.1 SBU
   Required disk space: 7.4 MB

  8.13.1. Installation of Bc

   Prepare Bc for compilation:

 CC=gcc ./configure --prefix=/usr -G -O3 -r

   The meaning of the configure options:

   CC=gcc

           This parameter specifies the compiler to use.

   -G

           Omit parts of the test suite that won't work without a GNU bc
           present.

   -O3

           Specify the optimization to use.

   -r

           Enable the use of Readline to improve the line editing feature of
           bc.

   Compile the package:

 make

   To test bc, run:

 make test

   Install the package:

 make install

  8.13.2. Contents of Bc

   Installed programs: bc and dc

    Short Descriptions

   bc A command line calculator                
   dc A reverse-polish command line calculator 

8.14. Flex-2.6.4

   The Flex package contains a utility for generating programs that recognize
   patterns in text.

   Approximate build time: 0.4 SBU
   Required disk space: 33 MB

  8.14.1. Installation of Flex

   Prepare Flex for compilation:

 ./configure --prefix=/usr \
             --docdir=/usr/share/doc/flex-2.6.4 \
             --disable-static

   Compile the package:

 make

   To test the results (about 0.5 SBU), issue:

 make check

   Install the package:

 make install

   A few programs do not know about flex yet and try to run its predecessor,
   lex. To support those programs, create a symbolic link named lex that runs
   flex in lex emulation mode:

 ln -sv flex /usr/bin/lex

  8.14.2. Contents of Flex

   Installed programs: flex, flex++ (link to flex), and lex (link to flex)
   Installed libraries: libfl.so
   Installed directory: /usr/share/doc/flex-2.6.4

    Short Descriptions

   flex   A tool for generating programs that recognize patterns in text; it  
          allows for the versatility to specify the rules for                 
          pattern-finding, eradicating the need to develop a specialized      
          program                                                             
   flex++ An extension of flex, is used for generating C++ code and classes.  
          It is a symbolic link to flex                                       
   lex    A symbolic link that runs flex in lex emulation mode                
   libfl  The flex library                                                    

8.15. Tcl-8.6.12

   The Tcl package contains the Tool Command Language, a robust
   general-purpose scripting language. The Expect package is written in the
   Tcl language.

   Approximate build time: 3.2 SBU
   Required disk space: 88 MB

  8.15.1. Installation of Tcl

   This package and the next two (Expect and DejaGNU) are installed to
   support running the test suites for binutils and GCC and other packages.
   Installing three packages for testing purposes may seem excessive, but it
   is very reassuring, if not essential, to know that the most important
   tools are working properly.

   First, unpack the documentation by issuing the following command:

 tar -xf ../tcl8.6.12-html.tar.gz --strip-components=1

   Prepare Tcl for compilation:

 SRCDIR=$(pwd)
 cd unix
 ./configure --prefix=/usr           \
             --mandir=/usr/share/man

   Build the package:

 make

 sed -e "s|$SRCDIR/unix|/usr/lib|" \
     -e "s|$SRCDIR|/usr/include|"  \
     -i tclConfig.sh

 sed -e "s|$SRCDIR/unix/pkgs/tdbc1.1.3|/usr/lib/tdbc1.1.3|" \
     -e "s|$SRCDIR/pkgs/tdbc1.1.3/generic|/usr/include|"    \
     -e "s|$SRCDIR/pkgs/tdbc1.1.3/library|/usr/lib/tcl8.6|" \
     -e "s|$SRCDIR/pkgs/tdbc1.1.3|/usr/include|"            \
     -i pkgs/tdbc1.1.3/tdbcConfig.sh

 sed -e "s|$SRCDIR/unix/pkgs/itcl4.2.2|/usr/lib/itcl4.2.2|" \
     -e "s|$SRCDIR/pkgs/itcl4.2.2/generic|/usr/include|"    \
     -e "s|$SRCDIR/pkgs/itcl4.2.2|/usr/include|"            \
     -i pkgs/itcl4.2.2/itclConfig.sh

 unset SRCDIR

   The various “sed” instructions after the “make” command removes references
   to the build directory from the configuration files and replaces them with
   the install directory. This is not mandatory for the remainder of LFS, but
   may be needed in case a package built later uses Tcl.

   To test the results, issue:

 make test

   Install the package:

 make install

   Make the installed library writable so debugging symbols can be removed
   later:

 chmod -v u+w /usr/lib/libtcl8.6.so

   Install Tcl's headers. The next package, Expect, requires them.

 make install-private-headers

   Now make a necessary symbolic link:

 ln -sfv tclsh8.6 /usr/bin/tclsh

   Rename a man page that conflicts with a Perl man page:

 mv /usr/share/man/man3/{Thread,Tcl_Thread}.3

   If you downloaded the optional documentation, install it by issuing the
   following commands:

 mkdir -v -p /usr/share/doc/tcl-8.6.12
 cp -v -r  ../html/* /usr/share/doc/tcl-8.6.12

  8.15.2. Contents of Tcl

   Installed programs: tclsh (link to tclsh8.6) and tclsh8.6
   Installed library: libtcl8.6.so and libtclstub8.6.a

    Short Descriptions

   tclsh8.6        The Tcl command shell 
   tclsh           A link to tclsh8.6    
   libtcl8.6.so    The Tcl library       
   libtclstub8.6.a The Tcl Stub library  

8.16. Expect-5.45.4

   The Expect package contains tools for automating, via scripted dialogues,
   interactive applications such as telnet, ftp, passwd, fsck, rlogin, and
   tip. Expect is also useful for testing these same applications as well as
   easing all sorts of tasks that are prohibitively difficult with anything
   else. The DejaGnu framework is written in Expect.

   Approximate build time: 0.2 SBU
   Required disk space: 3.9 MB

  8.16.1. Installation of Expect

   Prepare Expect for compilation:

 ./configure --prefix=/usr           \
             --with-tcl=/usr/lib     \
             --enable-shared         \
             --mandir=/usr/share/man \
             --with-tclinclude=/usr/include

   The meaning of the configure options:

   --with-tcl=/usr/lib

           This parameter is needed to tell configure where the tclConfig.sh
           script is located.

   --with-tclinclude=/usr/include

           This explicitly tells Expect where to find Tcl's internal headers.

   Build the package:

 make

   To test the results, issue:

 make test

   Install the package:

 make install
 ln -svf expect5.45.4/libexpect5.45.4.so /usr/lib

  8.16.2. Contents of Expect

   Installed program: expect
   Installed library: libexpect5.45.4.so

    Short Descriptions

   expect              Communicates with other interactive programs according 
                       to a script                                            
   libexpect-5.45.4.so Contains functions that allow Expect to be used as a   
                       Tcl extension or to be used directly from C or C++     
                       (without Tcl)                                          

8.17. DejaGNU-1.6.3

   The DejaGnu package contains a framework for running test suites on GNU
   tools. It is written in expect, which itself uses Tcl (Tool Command
   Language).

   Approximate build time: less than 0.1 SBU
   Required disk space: 6.9 MB

  8.17.1. Installation of DejaGNU

   The upstream recommends building DejaGNU in a dedicated build directory:

 mkdir -v build
 cd       build

   Prepare DejaGNU for compilation:

 ../configure --prefix=/usr
 makeinfo --html --no-split -o doc/dejagnu.html ../doc/dejagnu.texi
 makeinfo --plaintext       -o doc/dejagnu.txt  ../doc/dejagnu.texi

   Build and install the package:

 make install
 install -v -dm755  /usr/share/doc/dejagnu-1.6.3
 install -v -m644   doc/dejagnu.{html,txt} /usr/share/doc/dejagnu-1.6.3

   To test the results, issue:

 make check

  8.17.2. Contents of DejaGNU

   Installed program: dejagnu and runtest

    Short Descriptions

   dejagnu DejaGNU auxiliary command launcher                                 
   runtest A wrapper script that locates the proper expect shell and then     
           runs DejaGNU                                                       

8.18. Binutils-2.39

   The Binutils package contains a linker, an assembler, and other tools for
   handling object files.

   Approximate build time: 8.2 SBU
   Required disk space: 2.7 GB

  8.18.1. Installation of Binutils

   Verify that the PTYs are working properly inside the chroot environment by
   performing a simple test:

 expect -c "spawn ls"

   This command should output the following:

 spawn ls

   If, instead, the output includes the message below, then the environment
   is not set up for proper PTY operation. This issue needs to be resolved
   before running the test suites for Binutils and GCC:

 The system has no more ptys.
 Ask your system administrator to create more.

   The Binutils documentation recommends building Binutils in a dedicated
   build directory:

 mkdir -v build
 cd       build

   Prepare Binutils for compilation:

 ../configure --prefix=/usr       \
              --sysconfdir=/etc   \
              --enable-gold       \
              --enable-ld=default \
              --enable-plugins    \
              --enable-shared     \
              --disable-werror    \
              --enable-64-bit-bfd \
              --with-system-zlib

   The meaning of the configure parameters:

   --enable-gold

           Build the gold linker and install it as ld.gold (along side the
           default linker).

   --enable-ld=default

           Build the original bfd linker and install it as both ld (the
           default linker) and ld.bfd.

   --enable-plugins

           Enables plugin support for the linker.

   --enable-64-bit-bfd

           Enables 64-bit support (on hosts with narrower word sizes). May
           not be needed on 64-bit systems, but does no harm.

   --with-system-zlib

           Use the installed zlib library rather than building the included
           version.

   Compile the package:

 make tooldir=/usr

   The meaning of the make parameter:

   tooldir=/usr

           Normally, the tooldir (the directory where the executables will
           ultimately be located) is set to $(exec_prefix)/$(target_alias).
           For example, x86_64 machines would expand that to
           /usr/x86_64-pc-linux-gnu. Because this is a custom system, this
           target-specific directory in /usr is not required.
           $(exec_prefix)/$(target_alias) would be used if the system was
           used to cross-compile (for example, compiling a package on an
           Intel machine that generates code that can be executed on PowerPC
           machines).

  Important

   The test suite for Binutils in this section is considered critical. Do not
   skip it under any circumstances.

   Test the results:

 make -k check

   Install the package:

 make tooldir=/usr install

   Remove useless static libraries:

 rm -fv /usr/lib/lib{bfd,ctf,ctf-nobfd,opcodes}.a

  8.18.2. Contents of Binutils

   Installed programs: addr2line, ar, as, c++filt, dwp, elfedit, gprof,
   gprofng, ld, ld.bfd, ld.gold, nm, objcopy, objdump, ranlib, readelf, size,
   strings, and strip
   Installed libraries: libbfd.so, libctf.so, libctf-nobfd.so, and
   libopcodes.so
   Installed directory: /usr/lib/ldscripts

    Short Descriptions

   addr2line    Translates program addresses to file names and line numbers;  
                given an address and the name of an executable, it uses the   
                debugging information in the executable to determine which    
                source file and line number are associated with the address   
   ar           Creates, modifies, and extracts from archives                 
   as           An assembler that assembles the output of gcc into object     
                files                                                         
   c++filt      Used by the linker to de-mangle C++ and Java symbols and to   
                keep overloaded functions from clashing                       
   dwp          The DWARF packaging utility                                   
   elfedit      Updates the ELF header of ELF files                           
   gprof        Displays call graph profile data                              
   gprofng      Gather and analyze performance data                           
   ld           A linker that combines a number of object and archive files   
                into a single file, relocating their data and tying up symbol 
                references                                                    
   ld.gold      A cut down version of ld that only supports the elf object    
                file format                                                   
   ld.bfd       Hard link to ld                                               
   nm           Lists the symbols occurring in a given object file            
   objcopy      Translates one type of object file into another               
   objdump      Displays information about the given object file, with        
                options controlling the particular information to display;    
                the information shown is useful to programmers who are        
                working on the compilation tools                              
   ranlib       Generates an index of the contents of an archive and stores   
                it in the archive; the index lists all of the symbols defined 
                by archive members that are relocatable object files          
   readelf      Displays information about ELF type binaries                  
   size         Lists the section sizes and the total size for the given      
                object files                                                  
   strings      Outputs, for each given file, the sequences of printable      
                characters that are of at least the specified length          
                (defaulting to four); for object files, it prints, by         
                default, only the strings from the initializing and loading   
                sections while for other types of files, it scans the entire  
                file                                                          
   strip        Discards symbols from object files                            
   libbfd       The Binary File Descriptor library                            
   libctf       The Compat ANSI-C Type Format debugging support library       
   libctf-nobfd A libctf variant which does not use libbfd functionality      
   libopcodes   A library for dealing with opcodes—the “readable text”        
                versions of instructions for the processor; it is used for    
                building utilities like objdump                               

8.19. GMP-6.2.1

   The GMP package contains math libraries. These have useful functions for
   arbitrary precision arithmetic.

   Approximate build time: 0.9 SBU
   Required disk space: 53 MB

  8.19.1. Installation of GMP

  Note

   If you are building for 32-bit x86, but you have a CPU which is capable of
   running 64-bit code and you have specified CFLAGS in the environment, the
   configure script will attempt to configure for 64-bits and fail. Avoid
   this by invoking the configure command below with

 ABI=32 ./configure ...

  Note

   The default settings of GMP produce libraries optimized for the host
   processor. If libraries suitable for processors less capable than the
   host's CPU are desired, generic libraries can be created by running the
   following:

 cp -v configfsf.guess config.guess
 cp -v configfsf.sub   config.sub

   Prepare GMP for compilation:

 ./configure --prefix=/usr    \
             --enable-cxx     \
             --disable-static \
             --docdir=/usr/share/doc/gmp-6.2.1

   The meaning of the new configure options:

   --enable-cxx

           This parameter enables C++ support

   --docdir=/usr/share/doc/gmp-6.2.1

           This variable specifies the correct place for the documentation.

   Compile the package and generate the HTML documentation:

 make
 make html

  Important

   The test suite for GMP in this section is considered critical. Do not skip
   it under any circumstances.

   Test the results:

 make check 2>&1 | tee gmp-check-log

  Caution

   The code in gmp is highly optimized for the processor where it is built.
   Occasionally, the code that detects the processor misidentifies the system
   capabilities and there will be errors in the tests or other applications
   using the gmp libraries with the message "Illegal instruction". In this
   case, gmp should be reconfigured with the option
   --build=x86_64-pc-linux-gnu and rebuilt.

   Ensure that all 197 tests in the test suite passed. Check the results by
   issuing the following command:

 awk '/# PASS:/{total+=$3} ; END{print total}' gmp-check-log

   Install the package and its documentation:

 make install
 make install-html

  8.19.2. Contents of GMP

   Installed Libraries: libgmp.so and libgmpxx.so
   Installed directory: /usr/share/doc/gmp-6.2.1

    Short Descriptions

   libgmp   Contains precision math functions     
   libgmpxx Contains C++ precision math functions 

8.20. MPFR-4.1.0

   The MPFR package contains functions for multiple precision math.

   Approximate build time: 0.8 SBU
   Required disk space: 39 MB

  8.20.1. Installation of MPFR

   Prepare MPFR for compilation:

 ./configure --prefix=/usr        \
             --disable-static     \
             --enable-thread-safe \
             --docdir=/usr/share/doc/mpfr-4.1.0

   Compile the package and generate the HTML documentation:

 make
 make html

  Important

   The test suite for MPFR in this section is considered critical. Do not
   skip it under any circumstances.

   Test the results and ensure that all tests passed:

 make check

   Install the package and its documentation:

 make install
 make install-html

  8.20.2. Contents of MPFR

   Installed Libraries: libmpfr.so
   Installed directory: /usr/share/doc/mpfr-4.1.0

    Short Descriptions

   libmpfr Contains multiple-precision math functions 

8.21. MPC-1.2.1

   The MPC package contains a library for the arithmetic of complex numbers
   with arbitrarily high precision and correct rounding of the result.

   Approximate build time: 0.3 SBU
   Required disk space: 21 MB

  8.21.1. Installation of MPC

   Prepare MPC for compilation:

 ./configure --prefix=/usr    \
             --disable-static \
             --docdir=/usr/share/doc/mpc-1.2.1

   Compile the package and generate the HTML documentation:

 make
 make html

   To test the results, issue:

 make check

   Install the package and its documentation:

 make install
 make install-html

  8.21.2. Contents of MPC

   Installed Libraries: libmpc.so
   Installed Directory: /usr/share/doc/mpc-1.2.1

    Short Descriptions

   libmpc Contains complex math functions 

8.22. Attr-2.5.1

   The attr package contains utilities to administer the extended attributes
   on filesystem objects.

   Approximate build time: less than 0.1 SBU
   Required disk space: 4.1 MB

  8.22.1. Installation of Attr

   Prepare Attr for compilation:

 ./configure --prefix=/usr     \
             --disable-static  \
             --sysconfdir=/etc \
             --docdir=/usr/share/doc/attr-2.5.1

   Compile the package:

 make

   The tests need to be run on a filesystem that supports extended attributes
   such as the ext2, ext3, or ext4 filesystems. To test the results, issue:

 make check

   Install the package:

 make install

  8.22.2. Contents of Attr

   Installed programs: attr, getfattr, and setfattr
   Installed library: libattr.so
   Installed directories: /usr/include/attr and /usr/share/doc/attr-2.5.1

    Short Descriptions

   attr     Extends attributes on filesystem objects                          
   getfattr Gets the extended attributes of filesystem objects                
   setfattr Sets the extended attributes of filesystem objects                
   libattr  Contains the library functions for manipulating extended          
            attributes                                                        

8.23. Acl-2.3.1

   The Acl package contains utilities to administer Access Control Lists,
   which are used to define more fine-grained discretionary access rights for
   files and directories.

   Approximate build time: 0.1 SBU
   Required disk space: 6.1 MB

  8.23.1. Installation of Acl

   Prepare Acl for compilation:

 ./configure --prefix=/usr         \
             --disable-static      \
             --docdir=/usr/share/doc/acl-2.3.1

   Compile the package:

 make

   The Acl tests need to be run on a filesystem that supports access controls
   after Coreutils has been built with the Acl libraries. If desired, return
   to this package and run make check after Coreutils has been built later in
   this chapter.

   Install the package:

 make install

  8.23.2. Contents of Acl

   Installed programs: chacl, getfacl, and setfacl
   Installed library: libacl.so
   Installed directories: /usr/include/acl and /usr/share/doc/acl-2.3.1

    Short Descriptions

   chacl   Changes the access control list of a file or directory             
   getfacl Gets file access control lists                                     
   setfacl Sets file access control lists                                     
   libacl  Contains the library functions for manipulating Access Control     
           Lists                                                              

8.24. Libcap-2.65

   The Libcap package implements the user-space interfaces to the POSIX
   1003.1e capabilities available in Linux kernels. These capabilities are a
   partitioning of the all powerful root privilege into a set of distinct
   privileges.

   Approximate build time: less than 0.1 SBU
   Required disk space: 2.7 MB

  8.24.1. Installation of Libcap

   Prevent static libraries from being installed:

 sed -i '/install -m.*STA/d' libcap/Makefile

   Compile the package:

 make prefix=/usr lib=lib

   The meaning of the make option:

   lib=lib

           This parameter sets the library directory to /usr/lib rather than
           /usr/lib64 on x86_64. It has no effect on x86.

   To test the results, issue:

 make test

   Install the package:

 make prefix=/usr lib=lib install

  8.24.2. Contents of Libcap

   Installed programs: capsh, getcap, getpcaps, and setcap
   Installed library: libcap.so and libpsx.so

    Short Descriptions

   capsh    A shell wrapper to explore and constrain capability support       
   getcap   Examines file capabilities                                        
   getpcaps Displays the capabilities on the queried process(es)              
   setcap   Sets file capabilities                                            
   libcap   Contains the library functions for manipulating POSIX 1003.1e     
            capabilities                                                      
   libpsx   Contains functions to support POSIX semantics for syscalls        
            associated with the pthread library                               

8.25. Shadow-4.12.2

   The Shadow package contains programs for handling passwords in a secure
   way.

   Approximate build time: 0.2 SBU
   Required disk space: 46 MB

  8.25.1. Installation of Shadow

  Note

   If you would like to enforce the use of strong passwords, refer to
   https://www.linuxfromscratch.org/blfs/view/11.2/postlfs/cracklib.html for
   installing CrackLib prior to building Shadow. Then add --with-libcrack to
   the configure command below.

   Disable the installation of the groups program and its man pages, as
   Coreutils provides a better version. Also, prevent the installation of
   manual pages that were already installed in Section 8.3, “Man-pages-5.13”:

 sed -i 's/groups$(EXEEXT) //' src/Makefile.in
 find man -name Makefile.in -exec sed -i 's/groups\.1 / /'   {} \;
 find man -name Makefile.in -exec sed -i 's/getspnam\.3 / /' {} \;
 find man -name Makefile.in -exec sed -i 's/passwd\.5 / /'   {} \;

   Instead of using the default crypt method, use the more secure SHA-512
   method of password encryption, which also allows passwords longer than 8
   characters. It is also necessary to change the obsolete /var/spool/mail
   location for user mailboxes that Shadow uses by default to the /var/mail
   location used currently. And, get rid of /bin and /sbin from PATH, since
   they are simply symlinks to their counterpart in /usr.

  Note

   If /bin and/or /sbin are preferred to be left over in PATH for some
   reason, modify PATH in .bashrc after LFS is built.

 sed -e 's:#ENCRYPT_METHOD DES:ENCRYPT_METHOD SHA512:' \
     -e 's:/var/spool/mail:/var/mail:'                 \
     -e '/PATH=/{s@/sbin:@@;s@/bin:@@}'                \
     -i etc/login.defs

  Note

   If you chose to build Shadow with Cracklib support, run the following:

 sed -i 's:DICTPATH.*:DICTPATH\t/lib/cracklib/pw_dict:' etc/login.defs

   Prepare Shadow for compilation:

 touch /usr/bin/passwd
 ./configure --sysconfdir=/etc \
             --disable-static  \
             --with-group-name-max-length=32

   The meaning of the configure option:

   touch /usr/bin/passwd

           The file /usr/bin/passwd needs to exist because its location is
           hardcoded in some programs, and if it does not exist, the default
           location is not right.

   --with-group-name-max-length=32

           The maximum user name is 32 characters. Make the maximum group
           name the same.

   Compile the package:

 make

   This package does not come with a test suite.

   Install the package:

 make exec_prefix=/usr install
 make -C man install-man

  8.25.2. Configuring Shadow

   This package contains utilities to add, modify, and delete users and
   groups; set and change their passwords; and perform other administrative
   tasks. For a full explanation of what password shadowing means, see the
   doc/HOWTO file within the unpacked source tree. If using Shadow support,
   keep in mind that programs which need to verify passwords (display
   managers, FTP programs, pop3 daemons, etc.) must be Shadow-compliant. That
   is, they need to be able to work with shadowed passwords.

   To enable shadowed passwords, run the following command:

 pwconv

   To enable shadowed group passwords, run:

 grpconv

   Shadow's default configuration for the useradd utility has a few caveats
   that need some explanation. First, the default action for the useradd
   utility is to create the user and a group of the same name as the user. By
   default the user ID (UID) and group ID (GID) numbers will begin with 1000.
   This means if you don't pass parameters to useradd, each user will be a
   member of a unique group on the system. If this behavior is undesirable,
   you'll need to pass one of the -g or -N parameter to useradd or to change
   the setting of USERGROUPS_ENAB in /etc/login.defs. See useradd(8) for more
   information.

   Second, to change the default parameters, the file /etc/default/useradd
   needs to be created and tailored to suit your particular needs. Create it
   with:

 mkdir -p /etc/default
 useradd -D --gid 999

   /etc/default/useradd Parameter Explanations

   GROUP=999

           This parameter sets the beginning of the group numbers used in the
           /etc/group file. The particular value 999 comes from the --gid
           parameter above. You can modify it to anything you desire. Note
           that useradd will never reuse a UID or GID. If the number
           identified in this parameter is used, it will use the next
           available number. Note also that if you don't have a group with an
           ID equal to this number on your system the first time you use
           useradd without the -g parameter, you will get a message displayed
           on the terminal that says: useradd: unknown GID 999, although the
           account is correctly created. That is why we have created the
           group users with this group ID in Section 7.6, “Creating Essential
           Files and Symlinks”.

   CREATE_MAIL_SPOOL=yes

           This parameter causes useradd to create a mailbox file for the
           newly created user. useradd will make the group ownership of this
           file to the mail group with 0660 permissions. If you would prefer
           that these mailbox files are not created by useradd, issue the
           following command:

 sed -i '/MAIL/s/yes/no/' /etc/default/useradd

  8.25.3. Setting the root password

   Choose a password for user root and set it by running:

 passwd root

  8.25.4. Contents of Shadow

   Installed programs: chage, chfn, chgpasswd, chpasswd, chsh, expiry,
   faillog, getsubids, gpasswd, groupadd, groupdel, groupmems, groupmod,
   grpck, grpconv, grpunconv, lastlog, login, logoutd, newgidmap, newgrp,
   newuidmap, newusers, nologin, passwd, pwck, pwconv, pwunconv, sg (link to
   newgrp), su, useradd, userdel, usermod, vigr (link to vipw), and vipw
   Installed directory: /etc/default
   Installed libraries: libsubid.so

    Short Descriptions

   chage     Used to change the maximum number of days between obligatory     
             password changes                                                 
   chfn      Used to change a user's full name and other information          
   chgpasswd Used to update group passwords in batch mode                     
   chpasswd  Used to update user passwords in batch mode                      
   chsh      Used to change a user's default login shell                      
   expiry    Checks and enforces the current password expiration policy       
   faillog   Is used to examine the log of login failures, to set a maximum   
             number of failures before an account is blocked, or to reset the 
             failure count                                                    
   getsubids Is used to list the subordinate id ranges for a user             
   gpasswd   Is used to add and delete members and administrators to groups   
   groupadd  Creates a group with the given name                              
   groupdel  Deletes the group with the given name                            
   groupmems Allows a user to administer his/her own group membership list    
             without the requirement of super user privileges.                
   groupmod  Is used to modify the given group's name or GID                  
   grpck     Verifies the integrity of the group files /etc/group and         
             /etc/gshadow                                                     
   grpconv   Creates or updates the shadow group file from the normal group   
             file                                                             
   grpunconv Updates /etc/group from /etc/gshadow and then deletes the latter 
   lastlog   Reports the most recent login of all users or of a given user    
   login     Is used by the system to let users sign on                       
   logoutd   Is a daemon used to enforce restrictions on log-on time and      
             ports                                                            
   newgidmap Is used to set the gid mapping of a user namespace               
   newgrp    Is used to change the current GID during a login session         
   newuidmap Is used to set the uid mapping of a user namespace               
   newusers  Is used to create or update an entire series of user accounts    
   nologin   Displays a message that an account is not available; it is       
             designed to be used as the default shell for accounts that have  
             been disabled                                                    
   passwd    Is used to change the password for a user or group account       
   pwck      Verifies the integrity of the password files /etc/passwd and     
             /etc/shadow                                                      
   pwconv    Creates or updates the shadow password file from the normal      
             password file                                                    
   pwunconv  Updates /etc/passwd from /etc/shadow and then deletes the latter 
   sg        Executes a given command while the user's GID is set to that of  
             the given group                                                  
   su        Runs a shell with substitute user and group IDs                  
   useradd   Creates a new user with the given name, or updates the default   
             new-user information                                             
   userdel   Deletes the given user account                                   
   usermod   Is used to modify the given user's login name, User              
             Identification (UID), shell, initial group, home directory, etc. 
   vigr      Edits the /etc/group or /etc/gshadow files                       
   vipw      Edits the /etc/passwd or /etc/shadow files                       
   libsubid  library for process subordinate id ranges for users              

8.26. GCC-12.2.0

   The GCC package contains the GNU compiler collection, which includes the C
   and C++ compilers.

   Approximate build time: 160 SBU (with tests)
   Required disk space: 5.1 GB

  8.26.1. Installation of GCC

   If building on x86_64, change the default directory name for 64-bit
   libraries to “lib”:

 case $(uname -m) in
   x86_64)
     sed -e '/m64=/s/lib64/lib/' \
         -i.orig gcc/config/i386/t-linux64
   ;;
 esac

   The GCC documentation recommends building GCC in a dedicated build
   directory:

 mkdir -v build
 cd       build

   Prepare GCC for compilation:

 ../configure --prefix=/usr            \
              LD=ld                    \
              --enable-languages=c,c++ \
              --disable-multilib       \
              --disable-bootstrap      \
              --with-system-zlib

   Note that for other programming languages there are some prerequisites
   that are not yet available. See the BLFS Book GCC page for instructions on
   how to build all of GCC's supported languages.

   The meaning of the new configure parameters:

   LD=ld

           This parameter makes the configure script use the ld installed by
           the binutils built earlier in this chapter, rather than the
           cross-built version which would otherwise be used.

   --with-system-zlib

           This switch tells GCC to link to the system installed copy of the
           zlib library, rather than its own internal copy.

   Compile the package:

 make

  Important

   In this section, the test suite for GCC is considered important, but it
   takes a long time. First time builders are encouraged to not skip it. The
   time to run the tests can be reduced significantly by adding -jx to the
   make command below where x is the number of cores on your system.

   One set of tests in the GCC test suite is known to exhaust the default
   stack, so increase the stack size prior to running the tests:

 ulimit -s 32768

   Test the results as a non-privileged user, but do not stop at errors:

 chown -Rv tester .
 su tester -c "PATH=$PATH make -k check"

   To receive a summary of the test suite results, run:

 ../contrib/test_summary

   For only the summaries, pipe the output through grep -A7 Summ.

   Results can be compared with those located at
   https://www.linuxfromscratch.org/lfs/build-logs/11.2/ and
   https://gcc.gnu.org/ml/gcc-testresults/.

   In g++, four tests related to PR100400 are known to be reported as both
   XPASS and FAIL. It's because the test file for this known issue is not
   well written.

   A few unexpected failures cannot always be avoided. The GCC developers are
   usually aware of these issues, but have not resolved them yet. Unless the
   test results are vastly different from those at the above URL, it is safe
   to continue.

   Install the package:

 make install

   The GCC build directory is owned by tester now and the ownership of the
   installed header directory (and its content) will be incorrect. Change the
   ownership to root user and group:

 chown -v -R root:root \
     /usr/lib/gcc/$(gcc -dumpmachine)/12.2.0/include{,-fixed}

   Create a symlink required by the FHS for "historical" reasons.

 ln -svr /usr/bin/cpp /usr/lib

   Add a compatibility symlink to enable building programs with Link Time
   Optimization (LTO):

 ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/12.2.0/liblto_plugin.so \
         /usr/lib/bfd-plugins/

   Now that our final toolchain is in place, it is important to again ensure
   that compiling and linking will work as expected. We do this by performing
   some sanity checks:

 echo 'int main(){}' > dummy.c
 cc dummy.c -v -Wl,--verbose &> dummy.log
 readelf -l a.out | grep ': /lib'

   There should be no errors, and the output of the last command will be
   (allowing for platform-specific differences in the dynamic linker name):

 [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]

   Now make sure that we're setup to use the correct start files:

 grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log

   The output of the last command should be:

 /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.0/../../../../lib/crt1.o succeeded
 /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.0/../../../../lib/crti.o succeeded
 /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.0/../../../../lib/crtn.o succeeded

   Depending on your machine architecture, the above may differ slightly. The
   difference will be the name of the directory after /usr/lib/gcc. The
   important thing to look for here is that gcc has found all three crt*.o
   files under the /usr/lib directory.

   Verify that the compiler is searching for the correct header files:

 grep -B4 '^ /usr/include' dummy.log

   This command should return the following output:

 #include <...> search starts here:
  /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.0/include
  /usr/local/include
  /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.0/include-fixed
  /usr/include

   Again, the directory named after your target triplet may be different than
   the above, depending on your system architecture.

   Next, verify that the new linker is being used with the correct search
   paths:

 grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'

   References to paths that have components with '-linux-gnu' should be
   ignored, but otherwise the output of the last command should be:

 SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64")
 SEARCH_DIR("/usr/local/lib64")
 SEARCH_DIR("/lib64")
 SEARCH_DIR("/usr/lib64")
 SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib")
 SEARCH_DIR("/usr/local/lib")
 SEARCH_DIR("/lib")
 SEARCH_DIR("/usr/lib");

   A 32-bit system may see a few different directories. For example, here is
   the output from an i686 machine:

 SEARCH_DIR("/usr/i686-pc-linux-gnu/lib32")
 SEARCH_DIR("/usr/local/lib32")
 SEARCH_DIR("/lib32")
 SEARCH_DIR("/usr/lib32")
 SEARCH_DIR("/usr/i686-pc-linux-gnu/lib")
 SEARCH_DIR("/usr/local/lib")
 SEARCH_DIR("/lib")
 SEARCH_DIR("/usr/lib");

   Next make sure that we're using the correct libc:

 grep "/lib.*/libc.so.6 " dummy.log

   The output of the last command should be:

 attempt to open /usr/lib/libc.so.6 succeeded

   Make sure GCC is using the correct dynamic linker:

 grep found dummy.log

   The output of the last command should be (allowing for platform-specific
   differences in dynamic linker name):

 found ld-linux-x86-64.so.2 at /usr/lib/ld-linux-x86-64.so.2

   If the output does not appear as shown above or is not received at all,
   then something is seriously wrong. Investigate and retrace the steps to
   find out where the problem is and correct it. Any issues will need to be
   resolved before continuing with the process.

   Once everything is working correctly, clean up the test files:

 rm -v dummy.c a.out dummy.log

   Finally, move a misplaced file:

 mkdir -pv /usr/share/gdb/auto-load/usr/lib
 mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib

  8.26.2. Contents of GCC

   Installed programs: c++, cc (link to gcc), cpp, g++, gcc, gcc-ar, gcc-nm,
   gcc-ranlib, gcov, gcov-dump, gcov-tool, and lto-dump
   Installed libraries: libasan.{a,so}, libatomic.{a,so}, libcc1.so,
   libgcc.a, libgcc_eh.a, libgcc_s.so, libgcov.a, libgomp.{a,so},
   libitm.{a,so}, liblsan.{a,so}, liblto_plugin.so, libquadmath.{a,so},
   libssp.{a,so}, libssp_nonshared.a, libstdc++.{a,so}, libstdc++fs.a,
   libsupc++.a, libtsan.{a,so}, and libubsan.{a,so}
   Installed directories: /usr/include/c++, /usr/lib/gcc, /usr/libexec/gcc,
   and /usr/share/gcc-12.2.0

    Short Descriptions

   c++           The C++ compiler                                             
   cc            The C compiler                                               
   cpp           The C preprocessor; it is used by the compiler to expand the 
                 #include, #define, and similar statements in the source      
                 files                                                        
   g++           The C++ compiler                                             
   gcc           The C compiler                                               
   gcc-ar        A wrapper around ar that adds a plugin to the command line.  
                 This program is only used to add "link time optimization"    
                 and is not useful with the default build options             
   gcc-nm        A wrapper around nm that adds a plugin to the command line.  
                 This program is only used to add "link time optimization"    
                 and is not useful with the default build options             
   gcc-ranlib    A wrapper around ranlib that adds a plugin to the command    
                 line. This program is only used to add "link time            
                 optimization" and is not useful with the default build       
                 options                                                      
   gcov          A coverage testing tool; it is used to analyze programs to   
                 determine where optimizations will have the most effect      
   gcov-dump     Offline gcda and gcno profile dump tool                      
   gcov-tool     Offline gcda profile processing tool                         
   lto-dump      Tool for dumping object files produced by GCC with LTO       
                 enabled                                                      
   libasan       The Address Sanitizer runtime library                        
   libatomic     GCC atomic built-in runtime library                          
   libcc1        The C preprocessing library                                  
   libgcc        Contains run-time support for gcc                            
   libgcov       This library is linked in to a program when GCC is           
                 instructed to enable profiling                               
   libgomp       GNU implementation of the OpenMP API for multi-platform      
                 shared-memory parallel programming in C/C++ and Fortran      
   libitm        The GNU transactional memory library                         
   liblsan       The Leak Sanitizer runtime library                           
   liblto_plugin GCC's LTO plugin allows binutils to process object files     
                 produced by GCC with LTO enabled                             
   libquadmath   GCC Quad Precision Math Library API                          
   libssp        Contains routines supporting GCC's stack-smashing protection 
                 functionality                                                
   libstdc++     The standard C++ library                                     
   libstdc++fs   ISO/IEC TS 18822:2015 Filesystem library                     
   libsupc++     Provides supporting routines for the C++ programming         
                 language                                                     
   libtsan       The Thread Sanitizer runtime library                         
   libubsan      The Undefined Behavior Sanitizer runtime library             

8.27. Pkg-config-0.29.2

   The pkg-config package contains a tool for passing the include path and/or
   library paths to build tools during the configure and make phases of
   package installations.

   Approximate build time: 0.3 SBU
   Required disk space: 29 MB

  8.27.1. Installation of Pkg-config

   Prepare Pkg-config for compilation:

 ./configure --prefix=/usr              \
             --with-internal-glib       \
             --disable-host-tool        \
             --docdir=/usr/share/doc/pkg-config-0.29.2

   The meaning of the new configure options:

   --with-internal-glib

           This will allow pkg-config to use its internal version of Glib
           because an external version is not available in LFS.

   --disable-host-tool

           This option disables the creation of an undesired hard link to the
           pkg-config program.

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.27.2. Contents of Pkg-config

   Installed program: pkg-config
   Installed directory: /usr/share/doc/pkg-config-0.29.2

    Short Descriptions

   pkg-config Returns meta information for the specified library or package 

8.28. Ncurses-6.3

   The Ncurses package contains libraries for terminal-independent handling
   of character screens.

   Approximate build time: 0.4 SBU
   Required disk space: 45 MB

  8.28.1. Installation of Ncurses

   Prepare Ncurses for compilation:

 ./configure --prefix=/usr           \
             --mandir=/usr/share/man \
             --with-shared           \
             --without-debug         \
             --without-normal        \
             --with-cxx-shared       \
             --enable-pc-files       \
             --enable-widec          \
             --with-pkg-config-libdir=/usr/lib/pkgconfig

   The meaning of the new configure options:

   --with-shared

           This makes Ncurses build and install shared C libraries.

   --without-normal

           This prevents Ncurses building and installing static C libraries.

   --without-debug

           This prevents Ncurses building and installing debug libraries.

   --with-cxx-shared

           This makes Ncurses build and install shared C++ bindings. It also
           prevents it building and installing static C++ bindings.

   --enable-pc-files

           This switch generates and installs .pc files for pkg-config.

   --enable-widec

           This switch causes wide-character libraries (e.g.,
           libncursesw.so.6.3) to be built instead of normal ones (e.g.,
           libncurses.so.6.3). These wide-character libraries are usable in
           both multibyte and traditional 8-bit locales, while normal
           libraries work properly only in 8-bit locales. Wide-character and
           normal libraries are source-compatible, but not binary-compatible.

   Compile the package:

 make

   This package has a test suite, but it can only be run after the package
   has been installed. The tests reside in the test/ directory. See the
   README file in that directory for further details.

   The installation of this package will overwrite libncursesw.so.6.3
   in-place. It may crash the shell process which is using code and data from
   the library file. Install the package with DESTDIR, and replace the
   library file correctly using install command. A useless static archive
   which is not handled by configure is also removed:

 make DESTDIR=$PWD/dest install
 install -vm755 dest/usr/lib/libncursesw.so.6.3 /usr/lib
 rm -v  dest/usr/lib/libncursesw.so.6.3
 cp -av dest/* /

   Many applications still expect the linker to be able to find
   non-wide-character Ncurses libraries. Trick such applications into linking
   with wide-character libraries by means of symlinks and linker scripts:

 for lib in ncurses form panel menu ; do
     rm -vf                    /usr/lib/lib${lib}.so
     echo "INPUT(-l${lib}w)" > /usr/lib/lib${lib}.so
     ln -sfv ${lib}w.pc        /usr/lib/pkgconfig/${lib}.pc
 done

   Finally, make sure that old applications that look for -lcurses at build
   time are still buildable:

 rm -vf                     /usr/lib/libcursesw.so
 echo "INPUT(-lncursesw)" > /usr/lib/libcursesw.so
 ln -sfv libncurses.so      /usr/lib/libcurses.so

   If desired, install the Ncurses documentation:

 mkdir -pv      /usr/share/doc/ncurses-6.3
 cp -v -R doc/* /usr/share/doc/ncurses-6.3

  Note

   The instructions above don't create non-wide-character Ncurses libraries
   since no package installed by compiling from sources would link against
   them at runtime. However, the only known binary-only applications that
   link against non-wide-character Ncurses libraries require version 5. If
   you must have such libraries because of some binary-only application or to
   be compliant with LSB, build the package again with the following
   commands:

 make distclean
 ./configure --prefix=/usr    \
             --with-shared    \
             --without-normal \
             --without-debug  \
             --without-cxx-binding \
             --with-abi-version=5
 make sources libs
 cp -av lib/lib*.so.5* /usr/lib

  8.28.2. Contents of Ncurses

   Installed programs: captoinfo (link to tic), clear, infocmp, infotocap
   (link to tic), ncursesw6-config, reset (link to tset), tabs, tic, toe,
   tput, and tset
   Installed libraries: libcursesw.so (symlink and linker script to
   libncursesw.so), libformw.so, libmenuw.so, libncursesw.so, libpanelw.so,
   and their non-wide-character counterparts without "w" in the library
   names.
   Installed directories: /usr/share/tabset, /usr/share/terminfo, and
   /usr/share/doc/ncurses-6.3

    Short Descriptions

   captoinfo        Converts a termcap description into a terminfo            
                    description                                               
   clear            Clears the screen, if possible                            
   infocmp          Compares or prints out terminfo descriptions              
   infotocap        Converts a terminfo description into a termcap            
                    description                                               
   ncursesw6-config Provides configuration information for ncurses            
   reset            Reinitializes a terminal to its default values            
   tabs             Clears and sets tab stops on a terminal                   
   tic              The terminfo entry-description compiler that translates a 
                    terminfo file from source format into the binary format   
                    needed for the ncurses library routines [A terminfo file  
                    contains information on the capabilities of a certain     
                    terminal.]                                                
   toe              Lists all available terminal types, giving the primary    
                    name and description for each                             
   tput             Makes the values of terminal-dependent capabilities       
                    available to the shell; it can also be used to reset or   
                    initialize a terminal or report its long name             
   tset             Can be used to initialize terminals                       
   libcursesw       A link to libncursesw                                     
   libncursesw      Contains functions to display text in many complex ways   
                    on a terminal screen; a good example of the use of these  
                    functions is the menu displayed during the kernel's make  
                    menuconfig                                                
   libformw         Contains functions to implement forms                     
   libmenuw         Contains functions to implement menus                     
   libpanelw        Contains functions to implement panels                    

8.29. Sed-4.8

   The Sed package contains a stream editor.

   Approximate build time: 0.4 SBU
   Required disk space: 31 MB

  8.29.1. Installation of Sed

   Prepare Sed for compilation:

 ./configure --prefix=/usr

   Compile the package and generate the HTML documentation:

 make
 make html

   To test the results, issue:

 chown -Rv tester .
 su tester -c "PATH=$PATH make check"

   Install the package and its documentation:

 make install
 install -d -m755           /usr/share/doc/sed-4.8
 install -m644 doc/sed.html /usr/share/doc/sed-4.8

  8.29.2. Contents of Sed

   Installed program: sed
   Installed directory: /usr/share/doc/sed-4.8

    Short Descriptions

   sed Filters and transforms text files in a single pass 

8.30. Psmisc-23.5

   The Psmisc package contains programs for displaying information about
   running processes.

   Approximate build time: less than 0.1 SBU
   Required disk space: 5.8 MB

  8.30.1. Installation of Psmisc

   Prepare Psmisc for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   This package does not come with a test suite.

   Install the package:

 make install

  8.30.2. Contents of Psmisc

   Installed programs: fuser, killall, peekfd, prtstat, pslog, pstree, and
   pstree.x11 (link to pstree)

    Short Descriptions

   fuser      Reports the Process IDs (PIDs) of processes that use the given  
              files or file systems                                           
   killall    Kills processes by name; it sends a signal to all processes     
              running any of the given commands                               
   peekfd     Peek at file descriptors of a running process, given its PID    
   prtstat    Prints information about a process                              
   pslog      Reports current logs path of a process                          
   pstree     Displays running processes as a tree                            
   pstree.x11 Same as pstree, except that it waits for confirmation before    
              exiting                                                         

8.31. Gettext-0.21

   The Gettext package contains utilities for internationalization and
   localization. These allow programs to be compiled with NLS (Native
   Language Support), enabling them to output messages in the user's native
   language.

   Approximate build time: 2.7 SBU
   Required disk space: 235 MB

  8.31.1. Installation of Gettext

   Prepare Gettext for compilation:

 ./configure --prefix=/usr    \
             --disable-static \
             --docdir=/usr/share/doc/gettext-0.21

   Compile the package:

 make

   To test the results (this takes a long time, around 3 SBUs), issue:

 make check

   Install the package:

 make install
 chmod -v 0755 /usr/lib/preloadable_libintl.so

  8.31.2. Contents of Gettext

   Installed programs: autopoint, envsubst, gettext, gettext.sh, gettextize,
   msgattrib, msgcat, msgcmp, msgcomm, msgconv, msgen, msgexec, msgfilter,
   msgfmt, msggrep, msginit, msgmerge, msgunfmt, msguniq, ngettext,
   recode-sr-latin, and xgettext
   Installed libraries: libasprintf.so, libgettextlib.so, libgettextpo.so,
   libgettextsrc.so, libtextstyle.so, and preloadable_libintl.so
   Installed directories: /usr/lib/gettext, /usr/share/doc/gettext-0.21,
   /usr/share/gettext, and /usr/share/gettext-0.19.8

    Short Descriptions

   autopoint           Copies standard Gettext infrastructure files into a    
                       source package                                         
   envsubst            Substitutes environment variables in shell format      
                       strings                                                
   gettext             Translates a natural language message into the user's  
                       language by looking up the translation in a message    
                       catalog                                                
   gettext.sh          Primarily serves as a shell function library for       
                       gettext                                                
   gettextize          Copies all standard Gettext files into the given       
                       top-level directory of a package to begin              
                       internationalizing it                                  
   msgattrib           Filters the messages of a translation catalog          
                       according to their attributes and manipulates the      
                       attributes                                             
   msgcat              Concatenates and merges the given .po files            
   msgcmp              Compares two .po files to check that both contain the  
                       same set of msgid strings                              
   msgcomm             Finds the messages that are common to the given .po    
                       files                                                  
   msgconv             Converts a translation catalog to a different          
                       character encoding                                     
   msgen               Creates an English translation catalog                 
   msgexec             Applies a command to all translations of a translation 
                       catalog                                                
   msgfilter           Applies a filter to all translations of a translation  
                       catalog                                                
   msgfmt              Generates a binary message catalog from a translation  
                       catalog                                                
   msggrep             Extracts all messages of a translation catalog that    
                       match a given pattern or belong to some given source   
                       files                                                  
   msginit             Creates a new .po file, initializing the meta          
                       information with values from the user's environment    
   msgmerge            Combines two raw translations into a single file       
   msgunfmt            Decompiles a binary message catalog into raw           
                       translation text                                       
   msguniq             Unifies duplicate translations in a translation        
                       catalog                                                
   ngettext            Displays native language translations of a textual     
                       message whose grammatical form depends on a number     
   recode-sr-latin     Recodes Serbian text from Cyrillic to Latin script     
   xgettext            Extracts the translatable message lines from the given 
                       source files to make the first translation template    
   libasprintf         defines the autosprintf class, which makes C formatted 
                       output routines usable in C++ programs, for use with   
                       the <string> strings and the <iostream> streams        
   libgettextlib       a private library containing common routines used by   
                       the various Gettext programs; these are not intended   
                       for general use                                        
   libgettextpo        Used to write specialized programs that process .po    
                       files; this library is used when the standard          
                       applications shipped with Gettext (such as msgcomm,    
                       msgcmp, msgattrib, and msgen) will not suffice         
   libgettextsrc       A private library containing common routines used by   
                       the various Gettext programs; these are not intended   
                       for general use                                        
   libtextstyle        Text styling library                                   
   preloadable_libintl A library, intended to be used by LD_PRELOAD that      
                       assists libintl in logging untranslated messages       

8.32. Bison-3.8.2

   The Bison package contains a parser generator.

   Approximate build time: 8.7 SBU
   Required disk space: 63 MB

  8.32.1. Installation of Bison

   Prepare Bison for compilation:

 ./configure --prefix=/usr --docdir=/usr/share/doc/bison-3.8.2

   Compile the package:

 make

   To test the results (about 5.5 SBU), issue:

 make check

   Install the package:

 make install

  8.32.2. Contents of Bison

   Installed programs: bison and yacc
   Installed library: liby.a
   Installed directory: /usr/share/bison

    Short Descriptions

   bison Generates, from a series of rules, a program for analyzing the       
         structure of text files; Bison is a replacement for Yacc (Yet        
         Another Compiler Compiler)                                           
   yacc  A wrapper for bison, meant for programs that still call yacc instead 
         of bison; it calls bison with the -y option                          
   liby  The Yacc library containing implementations of Yacc-compatible       
         yyerror and main functions; this library is normally not very        
         useful, but POSIX requires it                                        

8.33. Grep-3.7

   The Grep package contains programs for searching through the contents of
   files.

   Approximate build time: 0.8 SBU
   Required disk space: 37 MB

  8.33.1. Installation of Grep

   Prepare Grep for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.33.2. Contents of Grep

   Installed programs: egrep, fgrep, and grep

    Short Descriptions

   egrep Prints lines matching an extended regular expression. It is          
         obsolete, use grep -E instead                                        
   fgrep Prints lines matching a list of fixed strings. It is obsolete, use   
         grep -F instead                                                      
   grep  Prints lines matching a basic regular expression                     

8.34. Bash-5.1.16

   The Bash package contains the Bourne-Again SHell.

   Approximate build time: 1.4 SBU
   Required disk space: 50 MB

  8.34.1. Installation of Bash

   Prepare Bash for compilation:

 ./configure --prefix=/usr                      \
             --docdir=/usr/share/doc/bash-5.1.16 \
             --without-bash-malloc              \
             --with-installed-readline

   The meaning of the new configure option:

   --with-installed-readline

           This option tells Bash to use the readline library that is already
           installed on the system rather than using its own readline
           version.

   Compile the package:

 make

   Skip down to “Install the package” if not running the test suite.

   To prepare the tests, ensure that the tester user can write to the sources
   tree:

 chown -Rv tester .

   The testsuite of the package is designed to be run as a non-root user that
   owns the terminal connected to standard input. To satisfy the requirement,
   spawn a new pseudo terminal using Expect and run the tests as the tester
   user:

 su -s /usr/bin/expect tester << EOF
 set timeout -1
 spawn make tests
 expect eof
 lassign [wait] _ _ _ value
 exit $value
 EOF

   Install the package:

 make install

   Run the newly compiled bash program (replacing the one that is currently
   being executed):

 exec /usr/bin/bash --login

  8.34.2. Contents of Bash

   Installed programs: bash, bashbug, and sh (link to bash)
   Installed directory: /usr/include/bash, /usr/lib/bash, and
   /usr/share/doc/bash-5.1.16

    Short Descriptions

   bash    A widely-used command interpreter; it performs many types of       
           expansions and substitutions on a given command line before        
           executing it, thus making this interpreter a powerful tool         
   bashbug A shell script to help the user compose and mail standard          
           formatted bug reports concerning bash                              
   sh      A symlink to the bash program; when invoked as sh, bash tries to   
           mimic the startup behavior of historical versions of sh as closely 
           as possible, while conforming to the POSIX standard as well        

8.35. Libtool-2.4.7

   The Libtool package contains the GNU generic library support script. It
   wraps the complexity of using shared libraries in a consistent, portable
   interface.

   Approximate build time: 1.5 SBU
   Required disk space: 43 MB

  8.35.1. Installation of Libtool

   Prepare Libtool for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

  Note

   The test time for libtool can be reduced significantly on a system with
   multiple cores. To do this, append TESTSUITEFLAGS=-j<N> to the line above.
   For instance, using -j4 can reduce the test time by over 60 percent.

   Five tests are known to fail in the LFS build environment due to a
   circular dependency, but all tests pass if rechecked after automake is
   installed.

   Install the package:

 make install

   Remove a useless static library:

 rm -fv /usr/lib/libltdl.a

  8.35.2. Contents of Libtool

   Installed programs: libtool and libtoolize
   Installed libraries: libltdl.so
   Installed directories: /usr/include/libltdl and /usr/share/libtool

    Short Descriptions

   libtool    Provides generalized library-building support services      
   libtoolize Provides a standard way to add libtool support to a package 
   libltdl    Hides the various difficulties of dlopening libraries       

8.36. GDBM-1.23

   The GDBM package contains the GNU Database Manager. It is a library of
   database functions that use extensible hashing and works similar to the
   standard UNIX dbm. The library provides primitives for storing key/data
   pairs, searching and retrieving the data by its key and deleting a key
   along with its data.

   Approximate build time: 0.1 SBU
   Required disk space: 13 MB

  8.36.1. Installation of GDBM

   Prepare GDBM for compilation:

 ./configure --prefix=/usr    \
             --disable-static \
             --enable-libgdbm-compat

   The meaning of the configure option:

   --enable-libgdbm-compat

           This switch enables building the libgdbm compatibility library.
           Some packages outside of LFS may require the older DBM routines it
           provides.

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.36.2. Contents of GDBM

   Installed programs: gdbm_dump, gdbm_load, and gdbmtool
   Installed libraries: libgdbm.so and libgdbm_compat.so

    Short Descriptions

   gdbm_dump      Dumps a GDBM database to a file                      
   gdbm_load      Recreates a GDBM database from a dump file           
   gdbmtool       Tests and modifies a GDBM database                   
   libgdbm        Contains functions to manipulate a hashed database   
   libgdbm_compat Compatibility library containing older DBM functions 

8.37. Gperf-3.1

   Gperf generates a perfect hash function from a key set.

   Approximate build time: less than 0.1 SBU
   Required disk space: 6.0 MB

  8.37.1. Installation of Gperf

   Prepare Gperf for compilation:

 ./configure --prefix=/usr --docdir=/usr/share/doc/gperf-3.1

   Compile the package:

 make

   The tests are known to fail if running multiple simultaneous tests (-j
   option greater than 1). To test the results, issue:

 make -j1 check

   Install the package:

 make install

  8.37.2. Contents of Gperf

   Installed program: gperf
   Installed directory: /usr/share/doc/gperf-3.1

    Short Descriptions

   gperf Generates a perfect hash from a key set 

8.38. Expat-2.4.8

   The Expat package contains a stream oriented C library for parsing XML.

   Approximate build time: 0.1 SBU
   Required disk space: 12 MB

  8.38.1. Installation of Expat

   Prepare Expat for compilation:

 ./configure --prefix=/usr    \
             --disable-static \
             --docdir=/usr/share/doc/expat-2.4.8

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

   If desired, install the documentation:

 install -v -m644 doc/*.{html,css} /usr/share/doc/expat-2.4.8

  8.38.2. Contents of Expat

   Installed program: xmlwf
   Installed libraries: libexpat.so
   Installed directory: /usr/share/doc/expat-2.4.8

    Short Descriptions

   xmlwf    Is a non-validating utility to check whether or not XML documents 
            are well formed                                                   
   libexpat Contains API functions for parsing XML                            

8.39. Inetutils-2.3

   The Inetutils package contains programs for basic networking.

   Approximate build time: 0.3 SBU
   Required disk space: 31 MB

  8.39.1. Installation of Inetutils

   Prepare Inetutils for compilation:

 ./configure --prefix=/usr        \
             --bindir=/usr/bin    \
             --localstatedir=/var \
             --disable-logger     \
             --disable-whois      \
             --disable-rcp        \
             --disable-rexec      \
             --disable-rlogin     \
             --disable-rsh        \
             --disable-servers

   The meaning of the configure options:

   --disable-logger

           This option prevents Inetutils from installing the logger program,
           which is used by scripts to pass messages to the System Log
           Daemon. Do not install it because Util-linux installs a more
           recent version.

   --disable-whois

           This option disables the building of the Inetutils whois client,
           which is out of date. Instructions for a better whois client are
           in the BLFS book.

   --disable-r*

           These parameters disable building obsolete programs that should
           not be used due to security issues. The functions provided by
           these programs can be provided by the openssh package in the BLFS
           book.

   --disable-servers

           This disables the installation of the various network servers
           included as part of the Inetutils package. These servers are
           deemed not appropriate in a basic LFS system. Some are insecure by
           nature and are only considered safe on trusted networks. Note that
           better replacements are available for many of these servers.

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

   Move a program to the proper location:

 mv -v /usr/{,s}bin/ifconfig

  8.39.2. Contents of Inetutils

   Installed programs: dnsdomainname, ftp, ifconfig, hostname, ping, ping6,
   talk, telnet, tftp, and traceroute

    Short Descriptions

   dnsdomainname Show the system's DNS domain name                            
   ftp           Is the file transfer protocol program                        
   hostname      Reports or sets the name of the host                         
   ifconfig      Manages network interfaces                                   
   ping          Sends echo-request packets and reports how long the replies  
                 take                                                         
   ping6         A version of ping for IPv6 networks                          
   talk          Is used to chat with another user                            
   telnet        An interface to the TELNET protocol                          
   tftp          A trivial file transfer program                              
   traceroute    Traces the route your packets take from the host you are     
                 working on to another host on a network, showing all the     
                 intermediate hops (gateways) along the way                   

8.40. Less-590

   The Less package contains a text file viewer.

   Approximate build time: less than 0.1 SBU
   Required disk space: 4.2 MB

  8.40.1. Installation of Less

   Prepare Less for compilation:

 ./configure --prefix=/usr --sysconfdir=/etc

   The meaning of the configure options:

   --sysconfdir=/etc

           This option tells the programs created by the package to look in
           /etc for the configuration files.

   Compile the package:

 make

   This package does not come with a test suite.

   Install the package:

 make install

  8.40.2. Contents of Less

   Installed programs: less, lessecho, and lesskey

    Short Descriptions

   less     A file viewer or pager; it displays the contents of the given     
            file, letting the user scroll, find strings, and jump to marks    
   lessecho Needed to expand meta-characters, such as * and ?, in filenames   
            on Unix systems                                                   
   lesskey  Used to specify the key bindings for less                         

8.41. Perl-5.36.0

   The Perl package contains the Practical Extraction and Report Language.

   Approximate build time: 9.4 SBU
   Required disk space: 236 MB

  8.41.1. Installation of Perl

   This version of Perl now builds the Compress::Raw::Zlib and
   Compress::Raw::BZip2 modules. By default Perl will use an internal copy of
   the sources for the build. Issue the following command so that Perl will
   use the libraries installed on the system:

 export BUILD_ZLIB=False
 export BUILD_BZIP2=0

   To have full control over the way Perl is set up, you can remove the
   “-des” options from the following command and hand-pick the way this
   package is built. Alternatively, use the command exactly as below to use
   the defaults that Perl auto-detects:

 sh Configure -des                                         \
              -Dprefix=/usr                                \
              -Dvendorprefix=/usr                          \
              -Dprivlib=/usr/lib/perl5/5.36/core_perl      \
              -Darchlib=/usr/lib/perl5/5.36/core_perl      \
              -Dsitelib=/usr/lib/perl5/5.36/site_perl      \
              -Dsitearch=/usr/lib/perl5/5.36/site_perl     \
              -Dvendorlib=/usr/lib/perl5/5.36/vendor_perl  \
              -Dvendorarch=/usr/lib/perl5/5.36/vendor_perl \
              -Dman1dir=/usr/share/man/man1                \
              -Dman3dir=/usr/share/man/man3                \
              -Dpager="/usr/bin/less -isR"                 \
              -Duseshrplib                                 \
              -Dusethreads

   The meaning of the configure options:

   -Dvendorprefix=/usr

           This ensures perl knows how to tell packages where they should
           install their perl modules.

   -Dpager="/usr/bin/less -isR"

           This ensures that less is used instead of more.

   -Dman1dir=/usr/share/man/man1 -Dman3dir=/usr/share/man/man3

           Since Groff is not installed yet, Configure thinks that we do not
           want man pages for Perl. Issuing these parameters overrides this
           decision.

   -Duseshrplib

           Build a shared libperl needed by some perl modules.

   -Dusethreads

           Build perl with support for threads.

   -Dprivlib,-Darchlib,-Dsitelib,...

           These settings define where Perl is looking for installed modules.
           The LFS editors chose to put them in a directory structure based
           on the Major.Minor version of Perl (5.36) which allows upgrading
           Perl to newer Patch levels (5.36.0) without the need to reinstall
           all of the modules again.

   Compile the package:

 make

   To test the results (approximately 11 SBU), issue:

 make test

   Install the package and clean up:

 make install
 unset BUILD_ZLIB BUILD_BZIP2

  8.41.2. Contents of Perl

   Installed programs: corelist, cpan, enc2xs, encguess, h2ph, h2xs,
   instmodsh, json_pp, libnetcfg, perl, perl5.36.0 (hard link to perl),
   perlbug, perldoc, perlivp, perlthanks (hard link to perlbug), piconv,
   pl2pm, pod2html, pod2man, pod2text, pod2usage, podchecker, podselect,
   prove, ptar, ptardiff, ptargrep, shasum, splain, xsubpp, and zipdetails
   Installed libraries: Many which cannot all be listed here
   Installed directory: /usr/lib/perl5

    Short Descriptions

   corelist   A commandline frontend to Module::CoreList                      
   cpan       Interact with the Comprehensive Perl Archive Network (CPAN)     
              from the command line                                           
   enc2xs     Builds a Perl extension for the Encode module from either       
              Unicode Character Mappings or Tcl Encoding Files                
   encguess   Guess the encoding type of one or several files                 
   h2ph       Converts .h C header files to .ph Perl header files             
   h2xs       Converts .h C header files to Perl extensions                   
   instmodsh  Shell script for examining installed Perl modules, and can      
              create a tarball from an installed module                       
   json_pp    Converts data between certain input and output formats          
   libnetcfg  Can be used to configure the libnet Perl module                 
   perl       Combines some of the best features of C, sed, awk and sh into a 
              single swiss-army language                                      
   perl5.36.0 A hard link to perl                                             
   perlbug    Used to generate bug reports about Perl, or the modules that    
              come with it, and mail them                                     
   perldoc    Displays a piece of documentation in pod format that is         
              embedded in the Perl installation tree or in a Perl script      
   perlivp    The Perl Installation Verification Procedure; it can be used to 
              verify that Perl and its libraries have been installed          
              correctly                                                       
   perlthanks Used to generate thank you messages to mail to the Perl         
              developers                                                      
   piconv     A Perl version of the character encoding converter iconv        
   pl2pm      A rough tool for converting Perl4 .pl files to Perl5 .pm        
              modules                                                         
   pod2html   Converts files from pod format to HTML format                   
   pod2man    Converts pod data to formatted *roff input                      
   pod2text   Converts pod data to formatted ASCII text                       
   pod2usage  Prints usage messages from embedded pod docs in files           
   podchecker Checks the syntax of pod format documentation files             
   podselect  Displays selected sections of pod documentation                 
   prove      Command line tool for running tests against the Test::Harness   
              module                                                          
   ptar       A tar-like program written in Perl                              
   ptardiff   A Perl program that compares an extracted archive with an       
              unextracted one                                                 
   ptargrep   A Perl program that applies pattern matching to the contents of 
              files in a tar archive                                          
   shasum     Prints or checks SHA checksums                                  
   splain     Is used to force verbose warning diagnostics in Perl            
   xsubpp     Converts Perl XS code into C code                               
   zipdetails Displays details about the internal structure of a Zip file     

8.42. XML::Parser-2.46

   The XML::Parser module is a Perl interface to James Clark's XML parser,
   Expat.

   Approximate build time: less than 0.1 SBU
   Required disk space: 2.3 MB

  8.42.1. Installation of XML::Parser

   Prepare XML::Parser for compilation:

 perl Makefile.PL

   Compile the package:

 make

   To test the results, issue:

 make test

   Install the package:

 make install

  8.42.2. Contents of XML::Parser

   Installed module: Expat.so

    Short Descriptions

   Expat provides the Perl Expat interface 

8.43. Intltool-0.51.0

   The Intltool is an internationalization tool used for extracting
   translatable strings from source files.

   Approximate build time: less than 0.1 SBU
   Required disk space: 1.5 MB

  8.43.1. Installation of Intltool

   First fix a warning that is caused by perl-5.22 and later:

 sed -i 's:\\\${:\\\$\\{:' intltool-update.in

  Note

   The above regular expression looks unusual because of all the backslashes.
   What it does is add a backslash before the right brace character in the
   sequence '\${' resulting in '\$\{'.

   Prepare Intltool for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install
 install -v -Dm644 doc/I18N-HOWTO /usr/share/doc/intltool-0.51.0/I18N-HOWTO

  8.43.2. Contents of Intltool

   Installed programs: intltool-extract, intltool-merge, intltool-prepare,
   intltool-update, and intltoolize
   Installed directories: /usr/share/doc/intltool-0.51.0 and
   /usr/share/intltool

    Short Descriptions

   intltoolize      Prepares a package to use intltool                        
   intltool-extract Generates header files that can be read by gettext        
   intltool-merge   Merges translated strings into various file types         
   intltool-prepare Updates pot files and merges them with translation files  
   intltool-update  Updates the po template files and merges them with the    
                    translations                                              

8.44. Autoconf-2.71

   The Autoconf package contains programs for producing shell scripts that
   can automatically configure source code.

   Approximate build time: less than 0.1 SBU (about 6.7 SBU with tests)
   Required disk space: 24 MB

  8.44.1. Installation of Autoconf

   Prepare Autoconf for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

  Note

   The test time for autoconf can be reduced significantly on a system with
   multiple cores. To do this, append TESTSUITEFLAGS=-j<N> to the line above.
   For instance, using -j4 can reduce the test time by over 60 percent.

   Install the package:

 make install

  8.44.2. Contents of Autoconf

   Installed programs: autoconf, autoheader, autom4te, autoreconf, autoscan,
   autoupdate, and ifnames
   Installed directory: /usr/share/autoconf

    Short Descriptions

   autoconf   Produces shell scripts that automatically configure software    
              source code packages to adapt to many kinds of Unix-like        
              systems; the configuration scripts it produces are              
              independent—running them does not require the autoconf program  
   autoheader A tool for creating template files of C #define statements for  
              configure to use                                                
   autom4te   A wrapper for the M4 macro processor                            
   autoreconf Automatically runs autoconf, autoheader, aclocal, automake,     
              gettextize, and libtoolize in the correct order to save time    
              when changes are made to autoconf and automake template files   
   autoscan   Helps to create a configure.in file for a software package; it  
              examines the source files in a directory tree, searching them   
              for common portability issues, and creates a configure.scan     
              file that serves as as a preliminary configure.in file for the  
              package                                                         
   autoupdate Modifies a configure.in file that still calls autoconf macros   
              by their old names to use the current macro names               
   ifnames    Helps when writing configure.in files for a software package;   
              it prints the identifiers that the package uses in C            
              preprocessor conditionals [If a package has already been set up 
              to have some portability, this program can help determine what  
              configure needs to check for. It can also fill in gaps in a     
              configure.in file generated by autoscan.]                       

8.45. Automake-1.16.5

   The Automake package contains programs for generating Makefiles for use
   with Autoconf.

   Approximate build time: less than 0.1 SBU (about 7.7 SBU with tests)
   Required disk space: 116 MB

  8.45.1. Installation of Automake

   Prepare Automake for compilation:

 ./configure --prefix=/usr --docdir=/usr/share/doc/automake-1.16.5

   Compile the package:

 make

   Using the -j4 make option speeds up the tests, even on systems with only
   one processor, due to internal delays in individual tests. To test the
   results, issue:

 make -j4 check

   The test t/subobj.sh is known to fail.

   Install the package:

 make install

  8.45.2. Contents of Automake

   Installed programs: aclocal, aclocal-1.16 (hard linked with aclocal),
   automake, and automake-1.16 (hard linked with automake)
   Installed directories: /usr/share/aclocal-1.16, /usr/share/automake-1.16,
   and /usr/share/doc/automake-1.16.5

    Short Descriptions

   aclocal       Generates aclocal.m4 files based on the contents of          
                 configure.in files                                           
   aclocal-1.16  A hard link to aclocal                                       
   automake      A tool for automatically generating Makefile.in files from   
                 Makefile.am files [To create all the Makefile.in files for a 
                 package, run this program in the top-level directory. By     
                 scanning the configure.in file, it automatically finds each  
                 appropriate Makefile.am file and generates the corresponding 
                 Makefile.in file.]                                           
   automake-1.16 A hard link to automake                                      

8.46. OpenSSL-3.0.5

   The OpenSSL package contains management tools and libraries relating to
   cryptography. These are useful for providing cryptographic functions to
   other packages, such as OpenSSH, email applications, and web browsers (for
   accessing HTTPS sites).

   Approximate build time: 5.0 SBU
   Required disk space: 476 MB

  8.46.1. Installation of OpenSSL

   Prepare OpenSSL for compilation:

 ./config --prefix=/usr         \
          --openssldir=/etc/ssl \
          --libdir=lib          \
          shared                \
          zlib-dynamic

   Compile the package:

 make

   To test the results, issue:

 make test

   One test, 30-test_afalg.t, is known to fail on some kernel configurations
   (depending on inconsistent values of CONFIG_CRYPTO_USER_API* settings.) If
   it fails, it can safely be ignored.

   Install the package:

 sed -i '/INSTALL_LIBS/s/libcrypto.a libssl.a//' Makefile
 make MANSUFFIX=ssl install

   Add the version to the documentation directory name, to be consistent with
   other packages:

 mv -v /usr/share/doc/openssl /usr/share/doc/openssl-3.0.5

   If desired, install some additional documentation:

 cp -vfr doc/* /usr/share/doc/openssl-3.0.5

  Note

   You should update OpenSSL when a new version which fixes vulnerabilities
   is announced. Since OpenSSL 3.0.0, the OpenSSL versioning scheme follows
   the MAJOR.MINOR.PATCH format. API/ABI compatibility are guaranteed for the
   same MAJOR version number. Because LFS installs only the shared libraries,
   there is no need to recompile packages which link to libcrypto.so or
   libssl.so when upgrading to a version with MAJOR version number unchanged.

   However, any running programs linked to those libraries need to be stopped
   and restarted. Read the related entries in Section 8.2.1, “Upgrade Issues”
   for details.

  8.46.2. Contents of OpenSSL

   Installed programs: c_rehash and openssl
   Installed libraries: libcrypto.so and libssl.so
   Installed directories: /etc/ssl, /usr/include/openssl, /usr/lib/engines
   and /usr/share/doc/openssl-3.0.5

    Short Descriptions

   c_rehash     is a Perl script that scans all files in a directory and adds 
                symbolic links to their hash values. Use of c_rehash is       
                considered obsolete and should be replaced by openssl rehash  
                command                                                       
   openssl      is a command-line tool for using the various cryptography     
                functions of OpenSSL's crypto library from the shell. It can  
                be used for various functions which are documented in man 1   
                openssl                                                       
   libcrypto.so implements a wide range of cryptographic algorithms used in   
                various Internet standards. The services provided by this     
                library are used by the OpenSSL implementations of SSL, TLS   
                and S/MIME, and they have also been used to implement         
                OpenSSH, OpenPGP, and other cryptographic standards           
   libssl.so    implements the Transport Layer Security (TLS v1) protocol. It 
                provides a rich API, documentation on which can be found by   
                running man 3 ssl                                             

8.47. Kmod-30

   The Kmod package contains libraries and utilities for loading kernel
   modules

   Approximate build time: 0.1 SBU
   Required disk space: 12 MB

  8.47.1. Installation of Kmod

   Prepare Kmod for compilation:

 ./configure --prefix=/usr          \
             --sysconfdir=/etc      \
             --with-openssl         \
             --with-xz              \
             --with-zstd            \
             --with-zlib

   The meaning of the configure options:

   --with-openssl

           This option enables Kmod to handle PKCS7 signatures for kernel
           modules.

   --with-xz, --with-zlib, and --with-zstd

           These options enable Kmod to handle compressed kernel modules.

   Compile the package:

 make

   The test suite of this package requires raw kernel headers (not the
   “sanitized” kernel headers installed earlier), which are beyond the scope
   of LFS.

   Install the package and create symlinks for compatibility with
   Module-Init-Tools (the package that previously handled Linux kernel
   modules):

 make install

 for target in depmod insmod modinfo modprobe rmmod; do
   ln -sfv ../bin/kmod /usr/sbin/$target
 done

 ln -sfv kmod /usr/bin/lsmod

  8.47.2. Contents of Kmod

   Installed programs: depmod (link to kmod), insmod (link to kmod), kmod,
   lsmod (link to kmod), modinfo (link to kmod), modprobe (link to kmod), and
   rmmod (link to kmod)
   Installed library: libkmod.so

    Short Descriptions

   depmod   Creates a dependency file based on the symbols it finds in the    
            existing set of modules; this dependency file is used by modprobe 
            to automatically load the required modules                        
   insmod   Installs a loadable module in the running kernel                  
   kmod     Loads and unloads kernel modules                                  
   lsmod    Lists currently loaded modules                                    
   modinfo  Examines an object file associated with a kernel module and       
            displays any information that it can glean                        
   modprobe Uses a dependency file, created by depmod, to automatically load  
            relevant modules                                                  
   rmmod    Unloads modules from the running kernel                           
   libkmod  This library is used by other programs to load and unload kernel  
            modules                                                           

8.48. Libelf from Elfutils-0.187

   Libelf is a library for handling ELF (Executable and Linkable Format)
   files.

   Approximate build time: 0.9 SBU
   Required disk space: 117 MB

  8.48.1. Installation of Libelf

   Libelf is part of elfutils-0.187 package. Use the elfutils-0.187.tar.bz2
   as the source tarball.

   Prepare Libelf for compilation:

 ./configure --prefix=/usr                \
             --disable-debuginfod         \
             --enable-libdebuginfod=dummy

   Compile the package:

 make

   To test the results, issue:

 make check

   Install only Libelf:

 make -C libelf install
 install -vm644 config/libelf.pc /usr/lib/pkgconfig
 rm /usr/lib/libelf.a

  8.48.2. Contents of Libelf

   Installed Library: libelf.so (symlink) and libelf-0.187.so
   Installed Directory: /usr/include/elfutils

    Short Descriptions

   libelf Contains API functions to handle ELF object files 

8.49. Libffi-3.4.2

   The Libffi library provides a portable, high level programming interface
   to various calling conventions. This allows a programmer to call any
   function specified by a call interface description at run time.

   Approximate build time: 1.8 SBU
   Required disk space: 10 MB

  8.49.1. Installation of Libffi

  Note

   Similar to GMP, libffi builds with optimizations specific to the processor
   in use. If building for another system, change the value of the
   --with-gcc-arch= parameter in the following command to an architecture
   name fully implemented by the CPU on that system. If this is not done, all
   applications that link to libffi will trigger Illegal Operation Errors.

   Prepare libffi for compilation:

 ./configure --prefix=/usr          \
             --disable-static       \
             --with-gcc-arch=native \
             --disable-exec-static-tramp

   The meaning of the configure option:

   --with-gcc-arch=native

           Ensure GCC optimizes for the current system. If this is not
           specified, the system is guessed and the code generated may not be
           correct for some systems. If the generated code will be copied
           from the native system to a less capable system, use the less
           capable system as a parameter. For details about alternative
           system types, see the x86 options in the GCC manual.

   --disable-exec-static-tramp

           Disable static trampoline support. It's a new security feature in
           libffi, but some BLFS packages (notably GJS) have not been adapted
           for it.

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.49.2. Contents of Libffi

   Installed library: libffi.so

    Short Descriptions

   libffi contains the foreign function interface API functions 

8.50. Python-3.10.6

   The Python 3 package contains the Python development environment. It is
   useful for object-oriented programming, writing scripts, prototyping large
   programs, or developing entire applications.

   Approximate build time: 3.4 SBU
   Required disk space: 283 MB

  8.50.1. Installation of Python 3

   Prepare Python for compilation:

 ./configure --prefix=/usr        \
             --enable-shared      \
             --with-system-expat  \
             --with-system-ffi    \
             --enable-optimizations

   The meaning of the configure options:

   --with-system-expat

           This switch enables linking against system version of Expat.

   --with-system-ffi

           This switch enables linking against system version of libffi.

   --enable-optimizations

           This switch enables stable, but expensive, optimizations.

   Compile the package:

 make

   Running the tests at this point is not recommended. The tests are known to
   hang indefinitely in the partial LFS environment. If desired, the tests
   can be rerun at the end of this chapter or when Python 3 is reinstalled in
   BLFS. To run the tests anyway, issue make test.

   Install the package:

 make install

   In several places we use the pip3 command to install Python 3 programs and
   modules for all users as root. This conflicts with the Python developers
   recommendation to install packages into a virtual environment or the home
   directory of a regular user (by running pip3 as this user). To this end, a
   multi-line warning is written when using pip3 as the root user. The main
   reason of this recommendation is for avoiding a conflict with the system
   package manager (dpkg for example), but LFS does not have a system-wide
   package manager so this is not a problem. And, pip3 will attempt to check
   for a new version of itself whenever it's run. As domain name resolving is
   not configured yet in LFS chroot environment, it will fail to check for a
   new version and produce a warning. Once we boot the LFS system and set up
   network connection, it will then produce a warning telling the user to
   update it from a pre-built wheel on PyPI if any new version is available.
   But LFS consider pip3 a part of Python 3 so it should not be updated
   separately, and an update from a pre-built wheel will deviate from our
   purpose to build a Linux system from source code. So the warning for a new
   pip3 version should be ignored as well. If desired, suppress these
   warnings by running the following commands:

 cat > /etc/pip.conf << EOF
 [global]
 root-user-action = ignore
 disable-pip-version-check = true
 EOF

  Important

   In LFS and BLFS we normally build and install Python modules with the pip3
   command. Please take care that the pip3 install commands in both the books
   should be run as the root user unless it's for a Python virtual
   environment. Running a pip3 install as a non-root user may seem to work
   fine, but it will cause the installed module to be inaccessible by other
   users.

   pip3 install will not reinstall an already installed module by default.
   For using the pip3 install command to upgrade a module (for example, from
   meson-0.61.3 to meson-0.62.0), insert the option --upgrade into the
   command line. If it's really necessary to downgrade a module or reinstall
   the same version for some reason, insert --force-reinstall --no-deps into
   the command line.

   If desired, install the preformatted documentation:

 install -v -dm755 /usr/share/doc/python-3.10.6/html

 tar --strip-components=1  \
     --no-same-owner       \
     --no-same-permissions \
     -C /usr/share/doc/python-3.10.6/html \
     -xvf ../python-3.10.6-docs-html.tar.bz2

   The meaning of the documentation install commands:

   --no-same-owner and --no-same-permissions

           Ensure the installed files have the correct ownership and
           permissions. Without these options, using tar will install the
           package files with the upstream creator's values.

  8.50.2. Contents of Python 3

   Installed Programs: 2to3, idle3, pip3, pydoc3, python3, and python3-config
   Installed Library: libpython3.10.so and libpython3.so
   Installed Directories: /usr/include/python3.10, /usr/lib/python3, and
   /usr/share/doc/python-3.10.6

    Short Descriptions

   2to3    is a Python program that reads Python 2.x source code and applies  
           a series of fixes to transform it into valid Python 3.x code       
   idle3   is a wrapper script that opens a Python aware GUI editor. For this 
           script to run, you must have installed Tk before Python so that    
           the Tkinter Python module is built                                 
   pip3    The package installer for Python. You can use pip to install       
           packages from Python Package Index and other indexes               
   pydoc3  is the Python documentation tool                                   
   python3 is an interpreted, interactive, object-oriented programming        
           language                                                           

8.51. Wheel-0.37.1

   Wheel is a Python library that is the reference implementation of the
   Python wheel packaging standard.

   Approximate build time: less than 0.1 SBU
   Required disk space: 956 KB

  8.51.1. Installation of Wheel

   Install wheel with the following command:

 pip3 install --no-index $PWD

   The meaning of the pip3 options:

   install

           Install the package.

   --no-index

           Prevent pip from fetching files from the online package repository
           (PyPI). If packages are installed in the correct order, then it
           won't need to fetch any files in the first place, but this option
           adds some safety in case of user error.

   $PWD

           Look for files to install in the current working directory.

  8.51.2. Contents of Wheel

   Installed program: wheel
   Installed directories: /usr/lib/python3.10/site-packages/wheel and
   /usr/lib/python3.10/site-packages/wheel-0.37.1-py3.10.egg-info

    Short Descriptions

   wheel is an utility to unpack, pack, or convert wheel packages 

8.52. Ninja-1.11.0

   Ninja is a small build system with a focus on speed.

   Approximate build time: 0.6 SBU
   Required disk space: 79 MB

  Tip

   This section is not strictly required for LFS if not using systemd. On the
   other hand, ninja associated to meson makes a powerful build system
   combination, which is expected to be used more and more often. It is
   required for several packages in the BLFS book.

  8.52.1. Installation of Ninja

   When run, ninja normally runs a maximum number of processes in parallel.
   By default this is the number of cores on the system plus two. In some
   cases this can overheat a CPU or run a system out of memory. If run from
   the command line, passing a -jN parameter will limit the number of
   parallel processes, but some packages embed the execution of ninja and do
   not pass a -j parameter.

   Using the optional procedure below allows a user to limit the number of
   parallel processes via an environment variable, NINJAJOBS. For example,
   setting:

 export NINJAJOBS=4

   will limit ninja to four parallel processes.

   If desired, add the capability to use the environment variable NINJAJOBS
   by running:

 sed -i '/int Guess/a \
   int   j = 0;\
   char* jobs = getenv( "NINJAJOBS" );\
   if ( jobs != NULL ) j = atoi( jobs );\
   if ( j > 0 ) return j;\
 ' src/ninja.cc

   Build Ninja with:

 python3 configure.py --bootstrap

   The meaning of the build option:

   --bootstrap

           This parameter forces ninja to rebuild itself for the current
           system.

   To test the results, issue:

 ./ninja ninja_test
 ./ninja_test --gtest_filter=-SubprocessTest.SetWithLots

   Install the package:

 install -vm755 ninja /usr/bin/
 install -vDm644 misc/bash-completion /usr/share/bash-completion/completions/ninja
 install -vDm644 misc/zsh-completion  /usr/share/zsh/site-functions/_ninja

  8.52.2. Contents of Ninja

   Installed programs: ninja

    Short Descriptions

   ninja is the Ninja build system 

8.53. Meson-0.63.1

   Meson is an open source build system meant to be both extremely fast and
   as user friendly as possible.

   Approximate build time: less than 0.1 SBU
   Required disk space: 38 MB

  Tip

   This section is not strictly required for LFS if not using systemd. On the
   other hand, meson/ninja is a powerful build system, which is expected to
   be used more and more often. It is required for several packages in the
   BLFS book.

  8.53.1. Installation of Meson

   Compile Meson with the following command:

 pip3 wheel -w dist --no-build-isolation --no-deps $PWD

   The test suite requires some packages out of the scope of LFS.

   Install the package:

 pip3 install --no-index --find-links dist meson
 install -vDm644 data/shell-completions/bash/meson /usr/share/bash-completion/completions/meson
 install -vDm644 data/shell-completions/zsh/_meson /usr/share/zsh/site-functions/_meson

   The meaning of the install parameters:

   -w dist

           Put the created wheels into the dist directory.

   --find-links dist

           Install wheels from the dist directory.

  8.53.2. Contents of Meson

   Installed programs: meson
   Installed directory:
   /usr/lib/python3.10/site-packages/meson-0.63.1.dist-info and
   /usr/lib/python3.10/site-packages/mesonbuild

    Short Descriptions

   meson A high productivity build system 

8.54. Coreutils-9.1

   The Coreutils package contains utilities for showing and setting the basic
   system characteristics.

   Approximate build time: 2.8 SBU
   Required disk space: 159 MB

  8.54.1. Installation of Coreutils

   POSIX requires that programs from Coreutils recognize character boundaries
   correctly even in multibyte locales. The following patch fixes this
   non-compliance and other internationalization-related bugs.

 patch -Np1 -i ../coreutils-9.1-i18n-1.patch

  Note

   In the past, many bugs were found in this patch. When reporting new bugs
   to Coreutils maintainers, please check first if they are reproducible
   without this patch.

   Now prepare Coreutils for compilation:

 autoreconf -fiv
 FORCE_UNSAFE_CONFIGURE=1 ./configure \
             --prefix=/usr            \
             --enable-no-install-program=kill,uptime

   The meaning of the configure options:

   autoreconf

           The patch for internationalization has modified the building
           system of the package, so the configuration files have to be
           regenerated.

   FORCE_UNSAFE_CONFIGURE=1

           This environment variable allows the package to be built as the
           root user.

   --enable-no-install-program=kill,uptime

           The purpose of this switch is to prevent Coreutils from installing
           binaries that will be installed by other packages later.

   Compile the package:

 make

   Skip down to “Install the package” if not running the test suite.

   Now the test suite is ready to be run. First, run the tests that are meant
   to be run as user root:

 make NON_ROOT_USERNAME=tester check-root

   We're going to run the remainder of the tests as the tester user. Certain
   tests require that the user be a member of more than one group. So that
   these tests are not skipped, add a temporary group and make the user
   tester a part of it:

 echo "dummy:x:102:tester" >> /etc/group

   Fix some of the permissions so that the non-root user can compile and run
   the tests:

 chown -Rv tester .

   Now run the tests:

 su tester -c "PATH=$PATH make RUN_EXPENSIVE_TESTS=yes check"

   The sort-NaN-infloop test is known to fail with GCC-12.

   Remove the temporary group:

 sed -i '/dummy/d' /etc/group

   Install the package:

 make install

   Move programs to the locations specified by the FHS:

 mv -v /usr/bin/chroot /usr/sbin
 mv -v /usr/share/man/man1/chroot.1 /usr/share/man/man8/chroot.8
 sed -i 's/"1"/"8"/' /usr/share/man/man8/chroot.8

  8.54.2. Contents of Coreutils

   Installed programs: [, b2sum, base32, base64, basename, basenc, cat,
   chcon, chgrp, chmod, chown, chroot, cksum, comm, cp, csplit, cut, date,
   dd, df, dir, dircolors, dirname, du, echo, env, expand, expr, factor,
   false, fmt, fold, groups, head, hostid, id, install, join, link, ln,
   logname, ls, md5sum, mkdir, mkfifo, mknod, mktemp, mv, nice, nl, nohup,
   nproc, numfmt, od, paste, pathchk, pinky, pr, printenv, printf, ptx, pwd,
   readlink, realpath, rm, rmdir, runcon, seq, sha1sum, sha224sum, sha256sum,
   sha384sum, sha512sum, shred, shuf, sleep, sort, split, stat, stdbuf, stty,
   sum, sync, tac, tail, tee, test, timeout, touch, tr, true, truncate,
   tsort, tty, uname, unexpand, uniq, unlink, users, vdir, wc, who, whoami,
   and yes
   Installed library: libstdbuf.so (in /usr/libexec/coreutils)
   Installed directory: /usr/libexec/coreutils

    Short Descriptions

   [         Is an actual command, /usr/bin/[, that is a synonym for the test 
             command                                                          
   base32    Encodes and decodes data according to the base32 specification   
             (RFC 4648)                                                       
   base64    Encodes and decodes data according to the base64 specification   
             (RFC 4648)                                                       
   b2sum     Prints or checks BLAKE2 (512-bit) checksums                      
   basename  Strips any path and a given suffix from a file name              
   basenc    Encodes or decodes data using various algorithms                 
   cat       Concatenates files to standard output                            
   chcon     Changes security context for files and directories               
   chgrp     Changes the group ownership of files and directories             
   chmod     Changes the permissions of each file to the given mode; the mode 
             can be either a symbolic representation of the changes to make   
             or an octal number representing the new permissions              
   chown     Changes the user and/or group ownership of files and directories 
   chroot    Runs a command with the specified directory as the / directory   
   cksum     Prints the Cyclic Redundancy Check (CRC) checksum and the byte   
             counts of each specified file                                    
   comm      Compares two sorted files, outputting in three columns the lines 
             that are unique and the lines that are common                    
   cp        Copies files                                                     
   csplit    Splits a given file into several new files, separating them      
             according to given patterns or line numbers and outputting the   
             byte count of each new file                                      
   cut       Prints sections of lines, selecting the parts according to given 
             fields or positions                                              
   date      Displays the current time in the given format, or sets the       
             system date                                                      
   dd        Copies a file using the given block size and count, while        
             optionally performing conversions on it                          
   df        Reports the amount of disk space available (and used) on all     
             mounted file systems, or only on the file systems holding the    
             selected files                                                   
   dir       Lists the contents of each given directory (the same as the ls   
             command)                                                         
   dircolors Outputs commands to set the LS_COLOR environment variable to     
             change the color scheme used by ls                               
   dirname   Strips the non-directory suffix from a file name                 
   du        Reports the amount of disk space used by the current directory,  
             by each of the given directories (including all subdirectories)  
             or by each of the given files                                    
   echo      Displays the given strings                                       
   env       Runs a command in a modified environment                         
   expand    Converts tabs to spaces                                          
   expr      Evaluates expressions                                            
   factor    Prints the prime factors of all specified integer numbers        
   false     Does nothing, unsuccessfully; it always exits with a status code 
             indicating failure                                               
   fmt       Reformats the paragraphs in the given files                      
   fold      Wraps the lines in the given files                               
   groups    Reports a user's group memberships                               
   head      Prints the first ten lines (or the given number of lines) of     
             each given file                                                  
   hostid    Reports the numeric identifier (in hexadecimal) of the host      
   id        Reports the effective user ID, group ID, and group memberships   
             of the current user or specified user                            
   install   Copies files while setting their permission modes and, if        
             possible, their owner and group                                  
   join      Joins the lines that have identical join fields from two         
             separate files                                                   
   link      Creates a hard link with the given name to a file                
   ln        Makes hard links or soft (symbolic) links between files          
   logname   Reports the current user's login name                            
   ls        Lists the contents of each given directory                       
   md5sum    Reports or checks Message Digest 5 (MD5) checksums               
   mkdir     Creates directories with the given names                         
   mkfifo    Creates First-In, First-Outs (FIFOs), a "named pipe" in UNIX     
             parlance, with the given names                                   
   mknod     Creates device nodes with the given names; a device node is a    
             character special file, a block special file, or a FIFO          
   mktemp    Creates temporary files in a secure manner; it is used in        
             scripts                                                          
   mv        Moves or renames files or directories                            
   nice      Runs a program with modified scheduling priority                 
   nl        Numbers the lines from the given files                           
   nohup     Runs a command immune to hangups, with its output redirected to  
             a log file                                                       
   nproc     Prints the number of processing units available to a process     
   numfmt    Converts numbers to or from human-readable strings               
   od        Dumps files in octal and other formats                           
   paste     Merges the given files, joining sequentially corresponding lines 
             side by side, separated by tab characters                        
   pathchk   Checks if file names are valid or portable                       
   pinky     Is a lightweight finger client; it reports some information      
             about the given users                                            
   pr        Paginates and columnates files for printing                      
   printenv  Prints the environment                                           
   printf    Prints the given arguments according to the given format, much   
             like the C printf function                                       
   ptx       Produces a permuted index from the contents of the given files,  
             with each keyword in its context                                 
   pwd       Reports the name of the current working directory                
   readlink  Reports the value of the given symbolic link                     
   realpath  Prints the resolved path                                         
   rm        Removes files or directories                                     
   rmdir     Removes directories if they are empty                            
   runcon    Runs a command with specified security context                   
   seq       Prints a sequence of numbers within a given range and with a     
             given increment                                                  
   sha1sum   Prints or checks 160-bit Secure Hash Algorithm 1 (SHA1)          
             checksums                                                        
   sha224sum Prints or checks 224-bit Secure Hash Algorithm checksums         
   sha256sum Prints or checks 256-bit Secure Hash Algorithm checksums         
   sha384sum Prints or checks 384-bit Secure Hash Algorithm checksums         
   sha512sum Prints or checks 512-bit Secure Hash Algorithm checksums         
   shred     Overwrites the given files repeatedly with complex patterns,     
             making it difficult to recover the data                          
   shuf      Shuffles lines of text                                           
   sleep     Pauses for the given amount of time                              
   sort      Sorts the lines from the given files                             
   split     Splits the given file into pieces, by size or by number of lines 
   stat      Displays file or filesystem status                               
   stdbuf    Runs commands with altered buffering operations for its standard 
             streams                                                          
   stty      Sets or reports terminal line settings                           
   sum       Prints checksum and block counts for each given file             
   sync      Flushes file system buffers; it forces changed blocks to disk    
             and updates the super block                                      
   tac       Concatenates the given files in reverse                          
   tail      Prints the last ten lines (or the given number of lines) of each 
             given file                                                       
   tee       Reads from standard input while writing both to standard output  
             and to the given files                                           
   test      Compares values and checks file types                            
   timeout   Runs a command with a time limit                                 
   touch     Changes file timestamps, setting the access and modification     
             times of the given files to the current time; files that do not  
             exist are created with zero length                               
   tr        Translates, squeezes, and deletes the given characters from      
             standard input                                                   
   true      Does nothing, successfully; it always exits with a status code   
             indicating success                                               
   truncate  Shrinks or expands a file to the specified size                  
   tsort     Performs a topological sort; it writes a completely ordered list 
             according to the partial ordering in a given file                
   tty       Reports the file name of the terminal connected to standard      
             input                                                            
   uname     Reports system information                                       
   unexpand  Converts spaces to tabs                                          
   uniq      Discards all but one of successive identical lines               
   unlink    Removes the given file                                           
   users     Reports the names of the users currently logged on               
   vdir      Is the same as ls -l                                             
   wc        Reports the number of lines, words, and bytes for each given     
             file, as well as a total line when more than one file is given   
   who       Reports who is logged on                                         
   whoami    Reports the user name associated with the current effective user 
             ID                                                               
   yes       Repeatedly outputs “y” or a given string until killed            
   libstdbuf Library used by stdbuf                                           

8.55. Check-0.15.2

   Check is a unit testing framework for C.

   Approximate build time: 0.1 SBU (about 3.6 SBU with tests)
   Required disk space: 12 MB

  8.55.1. Installation of Check

   Prepare Check for compilation:

 ./configure --prefix=/usr --disable-static

   Build the package:

 make

   Compilation is now complete. To run the Check test suite, issue the
   following command:

 make check

   Install the package:

 make docdir=/usr/share/doc/check-0.15.2 install

  8.55.2. Contents of Check

   Installed program: checkmk
   Installed library: libcheck.so

    Short Descriptions

   checkmk     Awk script for generating C unit tests for use with the Check  
               unit testing framework                                         
   libcheck.so Contains functions that allow Check to be called from a test   
               program                                                        

8.56. Diffutils-3.8

   The Diffutils package contains programs that show the differences between
   files or directories.

   Approximate build time: 0.6 SBU
   Required disk space: 35 MB

  8.56.1. Installation of Diffutils

   Prepare Diffutils for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.56.2. Contents of Diffutils

   Installed programs: cmp, diff, diff3, and sdiff

    Short Descriptions

   cmp   Compares two files and reports whether or in which bytes they differ 
   diff  Compares two files or directories and reports which lines in the     
         files differ                                                         
   diff3 Compares three files line by line                                    
   sdiff Merges two files and interactively outputs the results               

8.57. Gawk-5.1.1

   The Gawk package contains programs for manipulating text files.

   Approximate build time: 0.4 SBU
   Required disk space: 44 MB

  8.57.1. Installation of Gawk

   First, ensure some unneeded files are not installed:

 sed -i 's/extras//' Makefile.in

   Prepare Gawk for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

   If desired, install the documentation:

 mkdir -pv                                   /usr/share/doc/gawk-5.1.1
 cp    -v doc/{awkforai.txt,*.{eps,pdf,jpg}} /usr/share/doc/gawk-5.1.1

  8.57.2. Contents of Gawk

   Installed programs: awk (link to gawk), gawk, and awk-5.1.1
   Installed libraries: filefuncs.so, fnmatch.so, fork.so, inplace.so,
   intdiv.so, ordchr.so, readdir.so, readfile.so, revoutput.so, revtwoway.so,
   rwarray.so, and time.so (all in /usr/lib/gawk)
   Installed directories: /usr/lib/gawk, /usr/libexec/awk, /usr/share/awk,
   and /usr/share/doc/gawk-5.1.1

    Short Descriptions

   awk        A link to gawk                                                  
   gawk       A program for manipulating text files; it is the GNU            
              implementation of awk                                           
   gawk-5.1.1 A hard link to gawk                                             

8.58. Findutils-4.9.0

   The Findutils package contains programs to find files. These programs are
   provided to recursively search through a directory tree and to create,
   maintain, and search a database (often faster than the recursive find, but
   is unreliable if the database has not been recently updated).

   Approximate build time: 0.8 SBU
   Required disk space: 52 MB

  8.58.1. Installation of Findutils

   Prepare Findutils for compilation:

 case $(uname -m) in
     i?86)   TIME_T_32_BIT_OK=yes ./configure --prefix=/usr --localstatedir=/var/lib/locate ;;
     x86_64) ./configure --prefix=/usr --localstatedir=/var/lib/locate ;;
 esac

   The meaning of the configure options:

   TIME_32_BIT_OK=yes

           This setting is needed for building on a 32 bit system.

   --localstatedir

           This option changes the location of the locate database to be in
           /var/lib/locate, which is FHS-compliant.

   Compile the package:

 make

   To test the results, issue:

 chown -Rv tester .
 su tester -c "PATH=$PATH make check"

   Install the package:

 make install

  8.58.2. Contents of Findutils

   Installed programs: find, locate, updatedb, and xargs
   Installed directory: /var/lib/locate

    Short Descriptions

   find     Searches given directory trees for files matching the specified   
            criteria                                                          
   locate   Searches through a database of file names and reports the names   
            that contain a given string or match a given pattern              
   updatedb Updates the locate database; it scans the entire file system      
            (including other file systems that are currently mounted, unless  
            told not to) and puts every file name it finds into the database  
   xargs    Can be used to apply a given command to a list of files           

8.59. Groff-1.22.4

   The Groff package contains programs for processing and formatting text.

   Approximate build time: 0.5 SBU
   Required disk space: 88 MB

  8.59.1. Installation of Groff

   Groff expects the environment variable PAGE to contain the default paper
   size. For users in the United States, PAGE=letter is appropriate.
   Elsewhere, PAGE=A4 may be more suitable. While the default paper size is
   configured during compilation, it can be overridden later by echoing
   either “A4” or “letter” to the /etc/papersize file.

   Prepare Groff for compilation:

 PAGE=<paper_size> ./configure --prefix=/usr

   This package does not support parallel build. Compile the package:

 make -j1

   This package does not come with a test suite.

   Install the package:

 make install

  8.59.2. Contents of Groff

   Installed programs: addftinfo, afmtodit, chem, eqn, eqn2graph, gdiffmk,
   glilypond, gperl, gpinyin, grap2graph, grn, grodvi, groff, groffer, grog,
   grolbp, grolj4, gropdf, grops, grotty, hpftodit, indxbib, lkbib, lookbib,
   mmroff, neqn, nroff, pdfmom, pdfroff, pfbtops, pic, pic2graph,
   post-grohtml, preconv, pre-grohtml, refer, roff2dvi, roff2html, roff2pdf,
   roff2ps, roff2text, roff2x, soelim, tbl, tfmtodit, and troff
   Installed directories: /usr/lib/groff and /usr/share/doc/groff-1.22.4,
   /usr/share/groff

    Short Descriptions

   addftinfo    Reads a troff font file and adds some additional font-metric  
                information that is used by the groff system                  
   afmtodit     Creates a font file for use with groff and grops              
   chem         Groff preprocessor for producing chemical structure diagrams  
   eqn          Compiles descriptions of equations embedded within troff      
                input files into commands that are understood by troff        
   eqn2graph    Converts a troff EQN (equation) into a cropped image          
   gdiffmk      Marks differences between groff/nroff/troff files             
   glilypond    Transforms sheet music written in the lilypond language into  
                the groff language                                            
   gperl        Preprocesor for groff, allowing addition of perl code into    
                groff files                                                   
   gpinyin      Preprocesor for groff, allowing addition of Chinese           
                European-like language Pinyin into groff files.               
   grap2graph   Converts a grap diagram into a cropped bitmap image           
   grn          A groff preprocessor for gremlin files                        
   grodvi       A driver for groff that produces TeX dvi format               
   groff        A front-end to the groff document formatting system;          
                normally, it runs the troff program and a post-processor      
                appropriate for the selected device                           
   groffer      Displays groff files and man pages on X and tty terminals     
   grog         Reads files and guesses which of the groff options -e, -man,  
                -me, -mm, -ms, -p, -s, and -t are required for printing       
                files, and reports the groff command including those options  
   grolbp       Is a groff driver for Canon CAPSL printers (LBP-4 and LBP-8   
                series laser printers)                                        
   grolj4       Is a driver for groff that produces output in PCL5 format     
                suitable for an HP LaserJet 4 printer                         
   gropdf       Translates the output of GNU troff to PDF                     
   grops        Translates the output of GNU troff to PostScript              
   grotty       Translates the output of GNU troff into a form suitable for   
                typewriter-like devices                                       
   hpftodit     Creates a font file for use with groff -Tlj4 from an          
                HP-tagged font metric file                                    
   indxbib      Creates an inverted index for the bibliographic databases     
                with a specified file for use with refer, lookbib, and lkbib  
   lkbib        Searches bibliographic databases for references that contain  
                specified keys and reports any references found               
   lookbib      Prints a prompt on the standard error (unless the standard    
                input is not a terminal), reads a line containing a set of    
                keywords from the standard input, searches the bibliographic  
                databases in a specified file for references containing those 
                keywords, prints any references found on the standard output, 
                and repeats this process until the end of input               
   mmroff       A simple preprocessor for groff                               
   neqn         Formats equations for American Standard Code for Information  
                Interchange (ASCII) output                                    
   nroff        A script that emulates the nroff command using groff          
   pdfmom       Is a wrapper around groff that facilitates the production of  
                PDF documents from files formatted with the mom macros.       
   pdfroff      Creates pdf documents using groff                             
   pfbtops      Translates a PostScript font in .pfb format to ASCII          
   pic          Compiles descriptions of pictures embedded within troff or    
                TeX input files into commands understood by TeX or troff      
   pic2graph    Converts a PIC diagram into a cropped image                   
   post-grohtml Translates the output of GNU troff to HTML                    
   preconv      Converts encoding of input files to something GNU troff       
                understands                                                   
   pre-grohtml  Translates the output of GNU troff to HTML                    
   refer        Copies the contents of a file to the standard output, except  
                that lines between .[ and .] are interpreted as citations,    
                and lines between .R1 and .R2 are interpreted as commands for 
                how citations are to be processed                             
   roff2dvi     Transforms roff files into DVI format                         
   roff2html    Transforms roff files into HTML format                        
   roff2pdf     Transforms roff files into PDFs                               
   roff2ps      Transforms roff files into ps files                           
   roff2text    Transforms roff files into text files                         
   roff2x       Transforms roff files into other formats                      
   soelim       Reads files and replaces lines of the form .so file by the    
                contents of the mentioned file                                
   tbl          Compiles descriptions of tables embedded within troff input   
                files into commands that are understood by troff              
   tfmtodit     Creates a font file for use with groff -Tdvi                  
   troff        Is highly compatible with Unix troff; it should usually be    
                invoked using the groff command, which will also run          
                preprocessors and post-processors in the appropriate order    
                and with the appropriate options                              

8.60. GRUB-2.06

   The GRUB package contains the GRand Unified Bootloader.

   Approximate build time: 0.7 SBU
   Required disk space: 159 MB

  8.60.1. Installation of GRUB

  Note

   If your system has UEFI support and you wish to boot LFS with UEFI, you
   can skip this package in LFS, and install GRUB with UEFI support (and its
   dependencies) following the BLFS page at the end of this chapter.

   Prepare GRUB for compilation:

 ./configure --prefix=/usr          \
             --sysconfdir=/etc      \
             --disable-efiemu       \
             --disable-werror

   The meaning of the new configure options:

   --disable-werror

           This allows the build to complete with warnings introduced by more
           recent Flex versions.

   --disable-efiemu

           This option minimizes what is built by disabling a feature and
           testing programs not needed for LFS.

   Compile the package:

 make

   The test suite for this packages is not recommended. Most of the tests
   depend on packages that are not available in the limited LFS environment.
   To run the tests anyway, run make check.

   Install the package:

 make install
 mv -v /etc/bash_completion.d/grub /usr/share/bash-completion/completions

   Using GRUB to make your LFS system bootable will be discussed in
   Section 10.4, “Using GRUB to Set Up the Boot Process”.

  8.60.2. Contents of GRUB

   Installed programs: grub-bios-setup, grub-editenv, grub-file, grub-fstest,
   grub-glue-efi, grub-install, grub-kbdcomp, grub-macbless,
   grub-menulst2cfg, grub-mkconfig, grub-mkimage, grub-mklayout,
   grub-mknetdir, grub-mkpasswd-pbkdf2, grub-mkrelpath, grub-mkrescue,
   grub-mkstandalone, grub-ofpathname, grub-probe, grub-reboot,
   grub-render-label, grub-script-check, grub-set-default,
   grub-sparc64-setup, and grub-syslinux2cfg
   Installed directories: /usr/lib/grub, /etc/grub.d, /usr/share/grub, and
   /boot/grub (when grub-install is first run)

    Short Descriptions

   grub-bios-setup      Is a helper program for grub-install                  
   grub-editenv         A tool to edit the environment block                  
   grub-file            Checks if FILE is of the specified type.              
   grub-fstest          Tool to debug the filesystem driver                   
   grub-glue-efi        Glue 32-bit and 64-bit binary into Apple universal    
                        one.                                                  
   grub-install         Install GRUB on your drive                            
   grub-kbdcomp         Script that converts an xkb layout into one           
                        recognized by GRUB                                    
   grub-macbless        Mac-style bless on HFS or HFS+ files                  
   grub-menulst2cfg     Converts a GRUB Legacy menu.lst into a grub.cfg for   
                        use with GRUB 2                                       
   grub-mkconfig        Generate a grub config file                           
   grub-mkimage         Make a bootable image of GRUB                         
   grub-mklayout        Generates a GRUB keyboard layout file                 
   grub-mknetdir        Prepares a GRUB netboot directory                     
   grub-mkpasswd-pbkdf2 Generates an encrypted PBKDF2 password for use in the 
                        boot menu                                             
   grub-mkrelpath       Makes a system pathname relative to its root          
   grub-mkrescue        Make a bootable image of GRUB suitable for a floppy   
                        disk or CDROM/DVD                                     
   grub-mkstandalone    Generates a standalone image                          
   grub-ofpathname      Is a helper program that prints the path of a GRUB    
                        device                                                
   grub-probe           Probe device information for a given path or device   
   grub-reboot          Sets the default boot entry for GRUB for the next     
                        boot only                                             
   grub-render-label    Render Apple .disk_label for Apple Macs               
   grub-script-check    Checks GRUB configuration script for syntax errors    
   grub-set-default     Sets the default boot entry for GRUB                  
   grub-sparc64-setup   Is a helper program for grub-setup                    
   grub-syslinux2cfg    Transform a syslinux config file into grub.cfg format 

8.61. Gzip-1.12

   The Gzip package contains programs for compressing and decompressing
   files.

   Approximate build time: 0.3 SBU
   Required disk space: 21 MB

  8.61.1. Installation of Gzip

   Prepare Gzip for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.61.2. Contents of Gzip

   Installed programs: gunzip, gzexe, gzip, uncompress (hard link with
   gunzip), zcat, zcmp, zdiff, zegrep, zfgrep, zforce, zgrep, zless, zmore,
   and znew

    Short Descriptions

   gunzip     Decompresses gzipped files                                      
   gzexe      Creates self-decompressing executable files                     
   gzip       Compresses the given files using Lempel-Ziv (LZ77) coding       
   uncompress Decompresses compressed files                                   
   zcat       Decompresses the given gzipped files to standard output         
   zcmp       Runs cmp on gzipped files                                       
   zdiff      Runs diff on gzipped files                                      
   zegrep     Runs egrep on gzipped files                                     
   zfgrep     Runs fgrep on gzipped files                                     
   zforce     Forces a .gz extension on all given files that are gzipped      
              files, so that gzip will not compress them again; this can be   
              useful when file names were truncated during a file transfer    
   zgrep      Runs grep on gzipped files                                      
   zless      Runs less on gzipped files                                      
   zmore      Runs more on gzipped files                                      
   znew       Re-compresses files from compress format to gzip format—.Z to   
              .gz                                                             

8.62. IPRoute2-5.19.0

   The IPRoute2 package contains programs for basic and advanced IPV4-based
   networking.

   Approximate build time: 0.2 SBU
   Required disk space: 16 MB

  8.62.1. Installation of IPRoute2

   The arpd program included in this package will not be built since it is
   dependent on Berkeley DB, which is not installed in LFS. However, a
   directory for arpd and a man page will still be installed. Prevent this by
   running the commands below. If the arpd binary is needed, instructions for
   compiling Berkeley DB can be found in the BLFS Book at
   https://www.linuxfromscratch.org/blfs/view/11.2/server/db.html.

 sed -i /ARPD/d Makefile
 rm -fv man/man8/arpd.8

   Compile the package:

 make NETNS_RUN_DIR=/run/netns

   This package does not have a working test suite.

   Install the package:

 make SBINDIR=/usr/sbin install

   If desired, install the documentation:

 mkdir -pv             /usr/share/doc/iproute2-5.19.0
 cp -v COPYING README* /usr/share/doc/iproute2-5.19.0

  8.62.2. Contents of IPRoute2

   Installed programs: bridge, ctstat (link to lnstat), genl, ifcfg, ifstat,
   ip, lnstat, nstat, routef, routel, rtacct, rtmon, rtpr, rtstat (link to
   lnstat), ss, and tc
   Installed directories: /etc/iproute2, /usr/lib/tc, and
   /usr/share/doc/iproute2-5.19.0

    Short Descriptions

   bridge Configures network bridges                                          
   ctstat Connection status utility                                           
   genl   Generic netlink utility frontend                                    
   ifcfg  A shell script wrapper for the ip command [Note that it requires    
          the arping and rdisk programs from the iputils package found at     
          http://www.skbuff.net/iputils/.]                                    
   ifstat Shows the interface statistics, including the amount of transmitted 
          and received packets by interface                                   
   ip     The main executable. It has several different functions:            
                                                                              
          ip link <device> allows users to look at the state of devices and   
          to make changes                                                     
                                                                              
          ip addr allows users to look at addresses and their properties, add 
          new addresses, and delete old ones                                  
                                                                              
          ip neighbor allows users to look at neighbor bindings and their     
          properties, add new neighbor entries, and delete old ones           
                                                                              
          ip rule allows users to look at the routing policies and change     
          them                                                                
                                                                              
          ip route allows users to look at the routing table and change       
          routing table rules                                                 
                                                                              
          ip tunnel allows users to look at the IP tunnels and their          
          properties, and change them                                         
                                                                              
          ip maddr allows users to look at the multicast addresses and their  
          properties, and change them                                         
                                                                              
          ip mroute allows users to set, change, or delete the multicast      
          routing                                                             
                                                                              
          ip monitor allows users to continuously monitor the state of        
          devices, addresses and routes                                       
   lnstat Provides Linux network statistics; it is a generalized and more     
          feature-complete replacement for the old rtstat program             
   nstat  Shows network statistics                                            
   routef A component of ip route. This is for flushing the routing tables    
   routel A component of ip route. This is for listing the routing tables     
   rtacct Displays the contents of /proc/net/rt_acct                          
   rtmon  Route monitoring utility                                            
   rtpr   Converts the output of ip -o back into a readable form              
   rtstat Route status utility                                                
   ss     Similar to the netstat command; shows active connections            
   tc     Traffic Controlling Executable; this is for Quality Of Service      
          (QOS) and Class Of Service (COS) implementations                    
                                                                              
          tc qdisc allows users to setup the queueing discipline              
                                                                              
          tc class allows users to setup classes based on the queuing         
          discipline scheduling                                               
                                                                              
          tc estimator allows users to estimate the network flow into a       
          network                                                             
                                                                              
          tc filter allows users to setup the QOS/COS packet filtering        
                                                                              
          tc policy allows users to setup the QOS/COS policies                

8.63. Kbd-2.5.1

   The Kbd package contains key-table files, console fonts, and keyboard
   utilities.

   Approximate build time: 0.1 SBU
   Required disk space: 35 MB

  8.63.1. Installation of Kbd

   The behaviour of the backspace and delete keys is not consistent across
   the keymaps in the Kbd package. The following patch fixes this issue for
   i386 keymaps:

 patch -Np1 -i ../kbd-2.5.1-backspace-1.patch

   After patching, the backspace key generates the character with code 127,
   and the delete key generates a well-known escape sequence.

   Remove the redundant resizecons program (it requires the defunct svgalib
   to provide the video mode files - for normal use setfont sizes the console
   appropriately) together with its manpage.

 sed -i '/RESIZECONS_PROGS=/s/yes/no/' configure
 sed -i 's/resizecons.8 //' docs/man/man8/Makefile.in

   Prepare Kbd for compilation:

 ./configure --prefix=/usr --disable-vlock

   The meaning of the configure option:

   --disable-vlock

           This option prevents the vlock utility from being built because it
           requires the PAM library, which isn't available in the chroot
           environment.

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  Note

   For some languages (e.g., Belarusian) the Kbd package doesn't provide a
   useful keymap where the stock “by” keymap assumes the ISO-8859-5 encoding,
   and the CP1251 keymap is normally used. Users of such languages have to
   download working keymaps separately.

   If desired, install the documentation:

 mkdir -pv           /usr/share/doc/kbd-2.5.1
 cp -R -v docs/doc/* /usr/share/doc/kbd-2.5.1

  8.63.2. Contents of Kbd

   Installed programs: chvt, deallocvt, dumpkeys, fgconsole, getkeycodes,
   kbdinfo, kbd_mode, kbdrate, loadkeys, loadunimap, mapscrn, openvt,
   psfaddtable (link to psfxtable), psfgettable (link to psfxtable),
   psfstriptable (link to psfxtable), psfxtable, setfont, setkeycodes,
   setleds, setmetamode, setvtrgb, showconsolefont, showkey, unicode_start,
   and unicode_stop
   Installed directories: /usr/share/consolefonts, /usr/share/consoletrans,
   /usr/share/keymaps, /usr/share/doc/kbd-2.5.1, and /usr/share/unimaps

    Short Descriptions

   chvt            Changes the foreground virtual terminal                    
   deallocvt       Deallocates unused virtual terminals                       
   dumpkeys        Dumps the keyboard translation tables                      
   fgconsole       Prints the number of the active virtual terminal           
   getkeycodes     Prints the kernel scancode-to-keycode mapping table        
   kbdinfo         Obtains information about the status of a console          
   kbd_mode        Reports or sets the keyboard mode                          
   kbdrate         Sets the keyboard repeat and delay rates                   
   loadkeys        Loads the keyboard translation tables                      
   loadunimap      Loads the kernel unicode-to-font mapping table             
   mapscrn         An obsolete program that used to load a user-defined       
                   output character mapping table into the console driver;    
                   this is now done by setfont                                
   openvt          Starts a program on a new virtual terminal (VT)            
   psfaddtable     Adds a Unicode character table to a console font           
   psfgettable     Extracts the embedded Unicode character table from a       
                   console font                                               
   psfstriptable   Removes the embedded Unicode character table from a        
                   console font                                               
   psfxtable       Handles Unicode character tables for console fonts         
   setfont         Changes the Enhanced Graphic Adapter (EGA) and Video       
                   Graphics Array (VGA) fonts on the console                  
   setkeycodes     Loads kernel scancode-to-keycode mapping table entries;    
                   this is useful if there are unusual keys on the keyboard   
   setleds         Sets the keyboard flags and Light Emitting Diodes (LEDs)   
   setmetamode     Defines the keyboard meta-key handling                     
   setvtrgb        Sets the console color map in all virtual terminals        
   showconsolefont Shows the current EGA/VGA console screen font              
   showkey         Reports the scancodes, keycodes, and ASCII codes of the    
                   keys pressed on the keyboard                               
   unicode_start   Puts the keyboard and console in UNICODE mode [Don't use   
                   this program unless your keymap file is in the ISO-8859-1  
                   encoding. For other encodings, this utility produces       
                   incorrect results.]                                        
   unicode_stop    Reverts keyboard and console from UNICODE mode             

8.64. Libpipeline-1.5.6

   The Libpipeline package contains a library for manipulating pipelines of
   subprocesses in a flexible and convenient way.

   Approximate build time: 0.1 SBU
   Required disk space: 10 MB

  8.64.1. Installation of Libpipeline

   Prepare Libpipeline for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.64.2. Contents of Libpipeline

   Installed library: libpipeline.so

    Short Descriptions

   libpipeline This library is used to safely construct pipelines between     
               subprocesses                                                   

8.65. Make-4.3

   The Make package contains a program for controlling the generation of
   executables and other non-source files of a package from source files.

   Approximate build time: 0.5 SBU
   Required disk space: 14 MB

  8.65.1. Installation of Make

   Prepare Make for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.65.2. Contents of Make

   Installed program: make

    Short Descriptions

   make Automatically determines which pieces of a package need to be         
        (re)compiled and then issues the relevant commands                    

8.66. Patch-2.7.6

   The Patch package contains a program for modifying or creating files by
   applying a “patch” file typically created by the diff program.

   Approximate build time: 0.2 SBU
   Required disk space: 12 MB

  8.66.1. Installation of Patch

   Prepare Patch for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.66.2. Contents of Patch

   Installed program: patch

    Short Descriptions

   patch Modifies files according to a patch file (A patch file is normally a 
         difference listing created with the diff program. By applying these  
         differences to the original files, patch creates the patched         
         versions.)                                                           

8.67. Tar-1.34

   The Tar package provides the ability to create tar archives as well as
   perform various other kinds of archive manipulation. Tar can be used on
   previously created archives to extract files, to store additional files,
   or to update or list files which were already stored.

   Approximate build time: 1.7 SBU
   Required disk space: 40 MB

  8.67.1. Installation of Tar

   Prepare Tar for compilation:

 FORCE_UNSAFE_CONFIGURE=1  \
 ./configure --prefix=/usr

   The meaning of the configure option:

   FORCE_UNSAFE_CONFIGURE=1

           This forces the test for mknod to be run as root. It is generally
           considered dangerous to run this test as the root user, but as it
           is being run on a system that has only been partially built,
           overriding it is OK.

   Compile the package:

 make

   To test the results, issue:

 make check

   One test, capabilities: binary store/restore, is known to fail if it is
   run because LFS lacks selinux, but will be skipped if the host kernel does
   not support extended attributes on the filesystem used for building LFS.

   Install the package:

 make install
 make -C doc install-html docdir=/usr/share/doc/tar-1.34

  8.67.2. Contents of Tar

   Installed programs: tar
   Installed directory: /usr/share/doc/tar-1.34

    Short Descriptions

   tar Creates, extracts files from, and lists the contents of archives, also 
       known as tarballs                                                      

8.68. Texinfo-6.8

   The Texinfo package contains programs for reading, writing, and converting
   info pages.

   Approximate build time: 0.6 SBU
   Required disk space: 114 MB

  8.68.1. Installation of Texinfo

   Prepare Texinfo for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

   Optionally, install the components belonging in a TeX installation:

 make TEXMF=/usr/share/texmf install-tex

   The meaning of the make parameter:

   TEXMF=/usr/share/texmf

           The TEXMF makefile variable holds the location of the root of the
           TeX tree if, for example, a TeX package will be installed later.

   The Info documentation system uses a plain text file to hold its list of
   menu entries. The file is located at /usr/share/info/dir. Unfortunately,
   due to occasional problems in the Makefiles of various packages, it can
   sometimes get out of sync with the info pages installed on the system. If
   the /usr/share/info/dir file ever needs to be recreated, the following
   optional commands will accomplish the task:

 pushd /usr/share/info
   rm -v dir
   for f in *
     do install-info $f dir 2>/dev/null
   done
 popd

  8.68.2. Contents of Texinfo

   Installed programs: info, install-info, makeinfo (link to texi2any),
   pdftexi2dvi, pod2texi, texi2any, texi2dvi, texi2pdf, and texindex
   Installed library: MiscXS.so, Parsetexi.so, and XSParagraph.so (all in
   /usr/lib/texinfo)
   Installed directories: /usr/share/texinfo and /usr/lib/texinfo

    Short Descriptions

   info         Used to read info pages which are similar to man pages, but   
                often go much deeper than just explaining all the available   
                command line options [For example, compare man bison and info 
                bison.]                                                       
   install-info Used to install info pages; it updates entries in the info    
                index file                                                    
   makeinfo     Translates the given Texinfo source documents into info       
                pages, plain text, or HTML                                    
   pdftexi2dvi  Used to format the given Texinfo document into a Portable     
                Document Format (PDF) file                                    
   pod2texi     Converts Pod to Texinfo format                                
   texi2any     Translate Texinfo source documentation to various other       
                formats                                                       
   texi2dvi     Used to format the given Texinfo document into a              
                device-independent file that can be printed                   
   texi2pdf     Used to format the given Texinfo document into a Portable     
                Document Format (PDF) file                                    
   texindex     Used to sort Texinfo index files                              

8.69. Vim-9.0.0228

   The Vim package contains a powerful text editor.

   Approximate build time: 2.5 SBU
   Required disk space: 217 MB

  Alternatives to Vim

   If you prefer another editor—such as Emacs, Joe, or Nano—please refer to
   https://www.linuxfromscratch.org/blfs/view/11.2/postlfs/editors.html for
   suggested installation instructions.

  8.69.1. Installation of Vim

   First, change the default location of the vimrc configuration file to
   /etc:

 echo '#define SYS_VIMRC_FILE "/etc/vimrc"' >> src/feature.h

   Prepare vim for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   To prepare the tests, ensure that user tester can write to the source
   tree:

 chown -Rv tester .

   Now run the tests as user tester:

 su tester -c "LANG=en_US.UTF-8 make -j1 test" &> vim-test.log

   The test suite outputs a lot of binary data to the screen. This can cause
   issues with the settings of the current terminal. The problem can be
   avoided by redirecting the output to a log file as shown above. A
   successful test will result in the words "ALL DONE" in the log file at
   completion.

   Install the package:

 make install

   Many users are used to using vi instead of vim. To allow execution of vim
   when users habitually enter vi, create a symlink for both the binary and
   the man page in the provided languages:

 ln -sv vim /usr/bin/vi
 for L in  /usr/share/man/{,*/}man1/vim.1; do
     ln -sv vim.1 $(dirname $L)/vi.1
 done

   By default, vim's documentation is installed in /usr/share/vim. The
   following symlink allows the documentation to be accessed via
   /usr/share/doc/vim-9.0.0228, making it consistent with the location of
   documentation for other packages:

 ln -sv ../vim/vim90/doc /usr/share/doc/vim-9.0.0228

   If an X Window System is going to be installed on the LFS system, it may
   be necessary to recompile vim after installing X. Vim comes with a GUI
   version of the editor that requires X and some additional libraries to be
   installed. For more information on this process, refer to the vim
   documentation and the vim installation page in the BLFS book at
   https://www.linuxfromscratch.org/blfs/view/11.2/postlfs/vim.html.

  8.69.2. Configuring Vim

   By default, vim runs in vi-incompatible mode. This may be new to users who
   have used other editors in the past. The “nocompatible” setting is
   included below to highlight the fact that a new behavior is being used. It
   also reminds those who would change to “compatible” mode that it should be
   the first setting in the configuration file. This is necessary because it
   changes other settings, and overrides must come after this setting. Create
   a default vim configuration file by running the following:

 cat > /etc/vimrc << "EOF"
 " Begin /etc/vimrc

 " Ensure defaults are set before customizing settings, not after
 source $VIMRUNTIME/defaults.vim
 let skip_defaults_vim=1

 set nocompatible
 set backspace=2
 set mouse=
 syntax on
 if (&term == "xterm") || (&term == "putty")
   set background=dark
 endif

 " End /etc/vimrc
 EOF

   The set nocompatible setting makes vim behave in a more useful way (the
   default) than the vi-compatible manner. Remove the “no” to keep the old vi
   behavior. The set backspace=2 setting allows backspacing over line breaks,
   autoindents, and the start of an insert. The syntax on parameter enables
   vim's syntax highlighting. The set mouse= setting enables proper pasting
   of text with the mouse when working in chroot or over a remote connection.
   Finally, the if statement with the set background=dark setting corrects
   vim's guess about the background color of some terminal emulators. This
   gives the highlighting a better color scheme for use on the black
   background of these programs.

   Documentation for other available options can be obtained by running the
   following command:

 vim -c ':options'

  Note

   By default, vim only installs spell files for the English language. To
   install spell files for your preferred language, download the *.spl and
   optionally, the *.sug files for your language and character encoding from
   ftp://ftp.vim.org/pub/vim/runtime/spell/ and save them to
   /usr/share/vim/vim90/spell/.

   To use these spell files, some configuration in /etc/vimrc is needed,
   e.g.:

 set spelllang=en,ru
 set spell

   For more information, see the appropriate README file located at the URL
   above.

  8.69.3. Contents of Vim

   Installed programs: ex (link to vim), rview (link to vim), rvim (link to
   vim), vi (link to vim), view (link to vim), vim, vimdiff (link to vim),
   vimtutor, and xxd
   Installed directory: /usr/share/vim

    Short Descriptions

   ex       Starts vim in ex mode                                             
   rview    Is a restricted version of view; no shell commands can be started 
            and view cannot be suspended                                      
   rvim     Is a restricted version of vim; no shell commands can be started  
            and vim cannot be suspended                                       
   vi       Link to vim                                                       
   view     Starts vim in read-only mode                                      
   vim      Is the editor                                                     
   vimdiff  Edits two or three versions of a file with vim and shows          
            differences                                                       
   vimtutor Teaches the basic keys and commands of vim                        
   xxd      Creates a hex dump of the given file; it can also do the reverse, 
            so it can be used for binary patching                             

8.70. Eudev-3.2.11

   The Eudev package contains programs for dynamic creation of device nodes.

   Approximate build time: 0.2 SBU
   Required disk space: 83 MB

  8.70.1. Installation of Eudev

   Prepare Eudev for compilation:

 ./configure --prefix=/usr           \
             --bindir=/usr/sbin      \
             --sysconfdir=/etc       \
             --enable-manpages       \
             --disable-static

   Compile the package:

 make

   Create some directories now that are needed for tests, but will also be
   used as a part of installation:

 mkdir -pv /usr/lib/udev/rules.d
 mkdir -pv /etc/udev/rules.d

   To test the results, issue:

 make check

   Install the package:

 make install

   Install some custom rules and support files useful in an LFS environment:

 tar -xvf ../udev-lfs-20171102.tar.xz
 make -f udev-lfs-20171102/Makefile.lfs install

  8.70.2. Configuring Eudev

   Information about hardware devices is maintained in the /etc/udev/hwdb.d
   and /usr/lib/udev/hwdb.d directories. Eudev needs that information to be
   compiled into a binary database /etc/udev/hwdb.bin. Create the initial
   database:

 udevadm hwdb --update

   This command needs to be run each time the hardware information is
   updated.

  8.70.3. Contents of Eudev

   Installed programs: udevadm and udevd
   Installed libraries: libudev.so
   Installed directories: /etc/udev, /usr/lib/udev, and
   /usr/share/doc/udev-udev-lfs-20171102

    Short Descriptions

   udevadm   Generic udev administration tool: controls the udevd daemon,     
             provides info from the Udev database, monitors uevents, waits    
             for uevents to finish, tests Udev configuration, and triggers    
             uevents for a given device                                       
   udevd     A daemon that listens for uevents on the netlink socket, creates 
             devices and runs the configured external programs in response to 
             these uevents                                                    
   libudev   A library interface to udev device information                   
   /etc/udev Contains Udev configuration files, device permissions, and rules 
             for device naming                                                

8.71. Man-DB-2.10.2

   The Man-DB package contains programs for finding and viewing man pages.

   Approximate build time: 0.4 SBU
   Required disk space: 40 MB

  8.71.1. Installation of Man-DB

   Prepare Man-DB for compilation:

 ./configure --prefix=/usr                         \
             --docdir=/usr/share/doc/man-db-2.10.2 \
             --sysconfdir=/etc                     \
             --disable-setuid                      \
             --enable-cache-owner=bin              \
             --with-browser=/usr/bin/lynx          \
             --with-vgrind=/usr/bin/vgrind         \
             --with-grap=/usr/bin/grap             \
             --with-systemdtmpfilesdir=            \
             --with-systemdsystemunitdir=

   The meaning of the configure options:

   --disable-setuid

           This disables making the man program setuid to user man.

   --enable-cache-owner=bin

           This makes the system-wide cache files be owned by user bin.

   --with-...

           These three parameters are used to set some default programs. lynx
           is a text-based web browser (see BLFS for installation
           instructions), vgrind converts program sources to Groff input, and
           grap is useful for typesetting graphs in Groff documents. The
           vgrind and grap programs are not normally needed for viewing
           manual pages. They are not part of LFS or BLFS, but you should be
           able to install them yourself after finishing LFS if you wish to
           do so.

   --with-systemd...

           These parameters prevent installing unneeded systemd directories
           and files.

   Compile the package:

 make

   To test the results, issue:

 make check

   Install the package:

 make install

  8.71.2. Non-English Manual Pages in LFS

   The following table shows the character set that Man-DB assumes manual
   pages installed under /usr/share/man/<ll> will be encoded with. In
   addition to this, Man-DB correctly determines if manual pages installed in
   that directory are UTF-8 encoded.

   Table 8.1. Expected character encoding of legacy 8-bit manual pages

   +------------------------------------------------------------------------+
   | Language (code)   | Encoding   | Language (code)         | Encoding    |
   |-------------------+------------+-------------------------+-------------|
   | Danish (da)       | ISO-8859-1 | Croatian (hr)           | ISO-8859-2  |
   |-------------------+------------+-------------------------+-------------|
   | German (de)       | ISO-8859-1 | Hungarian (hu)          | ISO-8859-2  |
   |-------------------+------------+-------------------------+-------------|
   | English (en)      | ISO-8859-1 | Japanese (ja)           | EUC-JP      |
   |-------------------+------------+-------------------------+-------------|
   | Spanish (es)      | ISO-8859-1 | Korean (ko)             | EUC-KR      |
   |-------------------+------------+-------------------------+-------------|
   | Estonian (et)     | ISO-8859-1 | Lithuanian (lt)         | ISO-8859-13 |
   |-------------------+------------+-------------------------+-------------|
   | Finnish (fi)      | ISO-8859-1 | Latvian (lv)            | ISO-8859-13 |
   |-------------------+------------+-------------------------+-------------|
   | French (fr)       | ISO-8859-1 | Macedonian (mk)         | ISO-8859-5  |
   |-------------------+------------+-------------------------+-------------|
   | Irish (ga)        | ISO-8859-1 | Polish (pl)             | ISO-8859-2  |
   |-------------------+------------+-------------------------+-------------|
   | Galician (gl)     | ISO-8859-1 | Romanian (ro)           | ISO-8859-2  |
   |-------------------+------------+-------------------------+-------------|
   | Indonesian (id)   | ISO-8859-1 | Greek (el)              | ISO-8859-7  |
   |-------------------+------------+-------------------------+-------------|
   | Icelandic (is)    | ISO-8859-1 | Slovak (sk)             | ISO-8859-2  |
   |-------------------+------------+-------------------------+-------------|
   | Italian (it)      | ISO-8859-1 | Slovenian (sl)          | ISO-8859-2  |
   |-------------------+------------+-------------------------+-------------|
   | Norwegian Bokmal  | ISO-8859-1 | Serbian Latin           | ISO-8859-2  |
   | (nb)              |            | (sr@latin)              |             |
   |-------------------+------------+-------------------------+-------------|
   | Dutch (nl)        | ISO-8859-1 | Serbian (sr)            | ISO-8859-5  |
   |-------------------+------------+-------------------------+-------------|
   | Norwegian Nynorsk | ISO-8859-1 | Turkish (tr)            | ISO-8859-9  |
   | (nn)              |            |                         |             |
   |-------------------+------------+-------------------------+-------------|
   | Norwegian (no)    | ISO-8859-1 | Ukrainian (uk)          | KOI8-U      |
   |-------------------+------------+-------------------------+-------------|
   | Portuguese (pt)   | ISO-8859-1 | Vietnamese (vi)         | TCVN5712-1  |
   |-------------------+------------+-------------------------+-------------|
   | Swedish (sv)      | ISO-8859-1 | Simplified Chinese      | GBK         |
   |                   |            | (zh_CN)                 |             |
   |-------------------+------------+-------------------------+-------------|
   | Belarusian (be)   | CP1251     | Simplified Chinese,     | GBK         |
   |                   |            | Singapore (zh_SG)       |             |
   |-------------------+------------+-------------------------+-------------|
   | Bulgarian (bg)    | CP1251     | Traditional Chinese,    | BIG5HKSCS   |
   |                   |            | Hong Kong (zh_HK)       |             |
   |-------------------+------------+-------------------------+-------------|
   | Czech (cs)        | ISO-8859-2 | Traditional Chinese     | BIG5        |
   |                   |            | (zh_TW)                 |             |
   +------------------------------------------------------------------------+

  Note

   Manual pages in languages not in the list are not supported.

  8.71.3. Contents of Man-DB

   Installed programs: accessdb, apropos (link to whatis), catman, lexgrog,
   man, man-recode, mandb, manpath, and whatis
   Installed libraries: libman.so and libmandb.so (both in /usr/lib/man-db)
   Installed directories: /usr/lib/man-db, /usr/libexec/man-db, and
   /usr/share/doc/man-db-2.10.2

    Short Descriptions

   accessdb   Dumps the whatis database contents in human-readable form       
   apropos    Searches the whatis database and displays the short             
              descriptions of system commands that contain a given string     
   catman     Creates or updates the pre-formatted manual pages               
   lexgrog    Displays one-line summary information about a given manual page 
   man        Formats and displays the requested manual page                  
   man-recode Converts manual pages to another encoding                       
   mandb      Creates or updates the whatis database                          
   manpath    Displays the contents of $MANPATH or (if $MANPATH is not set) a 
              suitable search path based on the settings in man.conf and the  
              user's environment                                              
   whatis     Searches the whatis database and displays the short             
              descriptions of system commands that contain the given keyword  
              as a separate word                                              
   libman     Contains run-time support for man                               
   libmandb   Contains run-time support for man                               

8.72. Procps-ng-4.0.0

   The Procps-ng package contains programs for monitoring processes.

   Approximate build time: 0.1 SBU
   Required disk space: 19 MB

  8.72.1. Installation of Procps-ng

   Prepare procps-ng for compilation:

 ./configure --prefix=/usr                            \
             --docdir=/usr/share/doc/procps-ng-4.0.0 \
             --disable-static                         \
             --disable-kill

   The meaning of the configure option:

   --disable-kill

           This switch disables building the kill command that will be
           installed by the Util-linux package.

   Compile the package:

 make

   To run the test suite, run:

 make check

   One test named free with commit may fail if some applications with a
   custom memory allocator (for example, JVM and Web browsers) are running on
   the host distro.

   Install the package:

 make install

  8.72.2. Contents of Procps-ng

   Installed programs: free, pgrep, pidof, pkill, pmap, ps, pwdx, slabtop,
   sysctl, tload, top, uptime, vmstat, w, and watch
   Installed library: libproc-2.so
   Installed directories: /usr/include/procps and
   /usr/share/doc/procps-ng-4.0.0

    Short Descriptions

   free      Reports the amount of free and used memory (both physical and    
             swap memory) in the system                                       
   pgrep     Looks up processes based on their name and other attributes      
   pidof     Reports the PIDs of the given programs                           
   pkill     Signals processes based on their name and other attributes       
   pmap      Reports the memory map of the given process                      
   ps        Lists the current running processes                              
   pwait     Waits for a process to finish before executing.                  
   pwdx      Reports the current working directory of a process               
   slabtop   Displays detailed kernel slab cache information in real time     
   sysctl    Modifies kernel parameters at run time                           
   tload     Prints a graph of the current system load average                
   top       Displays a list of the most CPU intensive processes; it provides 
             an ongoing look at processor activity in real time               
   uptime    Reports how long the system has been running, how many users are 
             logged on, and the system load averages                          
   vmstat    Reports virtual memory statistics, giving information about      
             processes, memory, paging, block Input/Output (IO), traps, and   
             CPU activity                                                     
   w         Shows which users are currently logged on, where, and since when 
   watch     Runs a given command repeatedly, displaying the first            
             screen-full of its output; this allows a user to watch the       
             output change over time                                          
   libproc-2 Contains the functions used by most programs in this package     

8.73. Util-linux-2.38.1

   The Util-linux package contains miscellaneous utility programs. Among them
   are utilities for handling file systems, consoles, partitions, and
   messages.

   Approximate build time: 1.0 SBU
   Required disk space: 283 MB

  8.73.1. Installation of Util-linux

   Prepare Util-linux for compilation:

 ./configure ADJTIME_PATH=/var/lib/hwclock/adjtime   \
             --bindir=/usr/bin    \
             --libdir=/usr/lib    \
             --sbindir=/usr/sbin  \
             --docdir=/usr/share/doc/util-linux-2.38.1 \
             --disable-chfn-chsh  \
             --disable-login      \
             --disable-nologin    \
             --disable-su         \
             --disable-setpriv    \
             --disable-runuser    \
             --disable-pylibmount \
             --disable-static     \
             --without-python     \
             --without-systemd    \
             --without-systemdsystemunitdir

   The --disable and --without options prevent warnings about building
   components that require packages not in LFS or are inconsistent with
   programs installed by other packages.

   Compile the package:

 make

   If desired, run the test suite as a non-root user:

  Warning

   Running the test suite as the root user can be harmful to your system. To
   run it, the CONFIG_SCSI_DEBUG option for the kernel must be available in
   the currently running system and must be built as a module. Building it
   into the kernel will prevent booting. For complete coverage, other BLFS
   packages must be installed. If desired, this test can be run after
   rebooting into the completed LFS system and running:

 bash tests/run.sh --srcdir=$PWD --builddir=$PWD

 chown -Rv tester .
 su tester -c "make -k check"

   The hardlink tests will fail if the host's kernel does not have the option
   CONFIG_CRYPTO_USER_API_HASH set.

   Install the package:

 make install

  8.73.2. Contents of Util-linux

   Installed programs: addpart, agetty, blkdiscard, blkid, blkzone, blockdev,
   cal, cfdisk, chcpu, chmem, choom, chrt, col, colcrt, colrm, column,
   ctrlaltdel, delpart, dmesg, eject, fallocate, fdisk, fincore, findfs,
   findmnt, flock, fsck, fsck.cramfs, fsck.minix, fsfreeze, fstrim, getopt,
   hexdump, hwclock, i386, ionice, ipcmk, ipcrm, ipcs, irqtop, isosize, kill,
   last, lastb (link to last), ldattach, linux32, linux64, logger, look,
   losetup, lsblk, lscpu, lsipc, lsirq, lslocks, lslogins, lsmem, lsns,
   mcookie, mesg, mkfs, mkfs.bfs, mkfs.cramfs, mkfs.minix, mkswap, more,
   mount, mountpoint, namei, nsenter, partx, pivot_root, prlimit,
   readprofile, rename, renice, resizepart, rev, rfkill, rtcwake, script,
   scriptlive, scriptreplay, setarch, setsid, setterm, sfdisk, sulogin,
   swaplabel, swapoff (link to swapon), swapon, switch_root, taskset,
   uclampset, ul, umount, uname26, unshare, utmpdump, uuidd, uuidgen,
   uuidparse, wall, wdctl, whereis, wipefs, x86_64, and zramctl
   Installed libraries: libblkid.so, libfdisk.so, libmount.so,
   libsmartcols.so, and libuuid.so
   Installed directories: /usr/include/blkid, /usr/include/libfdisk,
   /usr/include/libmount, /usr/include/libsmartcols, /usr/include/uuid,
   /usr/share/doc/util-linux-2.38.1, and /var/lib/hwclock

    Short Descriptions

   addpart      Informs the Linux kernel of new partitions                    
   agetty       Opens a tty port, prompts for a login name, and then invokes  
                the login program                                             
   blkdiscard   Discards sectors on a device                                  
   blkid        A command line utility to locate and print block device       
                attributes                                                    
   blkzone      Runs zone command on the given block device                   
   blockdev     Allows users to call block device ioctls from the command     
                line                                                          
   cal          Displays a simple calendar                                    
   cfdisk       Manipulates the partition table of the given device           
   chcpu        Modifies the state of CPUs                                    
   chmem        Configures memory                                             
   choom        Displays and adjusts OOM-killer score                         
   chrt         Manipulates real-time attributes of a process                 
   col          Filters out reverse line feeds                                
   colcrt       Filters nroff output for terminals that lack some             
                capabilities, such as overstriking and half-lines             
   colrm        Filters out the given columns                                 
   column       Formats a given file into multiple columns                    
   ctrlaltdel   Sets the function of the Ctrl+Alt+Del key combination to a    
                hard or a soft reset                                          
   delpart      Asks the Linux kernel to remove a partition                   
   dmesg        Dumps the kernel boot messages                                
   eject        Ejects removable media                                        
   fallocate    Preallocates space to a file                                  
   fdisk        Manipulates the partition table of the given device           
   fincore      Counts pages of file contents in core                         
   findfs       Finds a file system by label or Universally Unique Identifier 
                (UUID)                                                        
   findmnt      Is a command line interface to the libmount library for work  
                with mountinfo, fstab and mtab files                          
   flock        Acquires a file lock and then executes a command with the     
                lock held                                                     
   fsck         Is used to check, and optionally repair, file systems         
   fsck.cramfs  Performs a consistency check on the Cramfs file system on the 
                given device                                                  
   fsck.minix   Performs a consistency check on the Minix file system on the  
                given device                                                  
   fsfreeze     Is a very simple wrapper around FIFREEZE/FITHAW ioctl kernel  
                driver operations                                             
   fstrim       Discards unused blocks on a mounted filesystem                
   getopt       Parses options in the given command line                      
   hexdump      Dumps the given file in hexadecimal or in another given       
                format                                                        
   hwclock      Reads or sets the system's hardware clock, also called the    
                Real-Time Clock (RTC) or Basic Input-Output System (BIOS)     
                clock                                                         
   i386         A symbolic link to setarch                                    
   ionice       Gets or sets the io scheduling class and priority for a       
                program                                                       
   ipcmk        Creates various IPC resources                                 
   ipcrm        Removes the given Inter-Process Communication (IPC) resource  
   ipcs         Provides IPC status information                               
   irqtop       Displays kernel interrupt counter information in top(1) style 
                view                                                          
   isosize      Reports the size of an iso9660 file system                    
   kill         Sends signals to processes                                    
   last         Shows which users last logged in (and out), searching back    
                through the /var/log/wtmp file; it also shows system boots,   
                shutdowns, and run-level changes                              
   lastb        Shows the failed login attempts, as logged in /var/log/btmp   
   ldattach     Attaches a line discipline to a serial line                   
   linux32      A symbolic link to setarch                                    
   linux64      A symbolic link to setarch                                    
   logger       Enters the given message into the system log                  
   look         Displays lines that begin with the given string               
   losetup      Sets up and controls loop devices                             
   lsblk        Lists information about all or selected block devices in a    
                tree-like format                                              
   lscpu        Prints CPU architecture information                           
   lsipc        Prints information on IPC facilities currently employed in    
                the system                                                    
   lsirq        Displays kernel interrupt counter information                 
   lslocks      Lists local system locks                                      
   lslogins     Lists information about users, groups and system accounts     
   lsmem        Lists the ranges of available memory with their online status 
   lsns         Lists namespaces                                              
   mcookie      Generates magic cookies (128-bit random hexadecimal numbers)  
                for xauth                                                     
   mesg         Controls whether other users can send messages to the current 
                user's terminal                                               
   mkfs         Builds a file system on a device (usually a hard disk         
                partition)                                                    
   mkfs.bfs     Creates a Santa Cruz Operations (SCO) bfs file system         
   mkfs.cramfs  Creates a cramfs file system                                  
   mkfs.minix   Creates a Minix file system                                   
   mkswap       Initializes the given device or file to be used as a swap     
                area                                                          
   more         A filter for paging through text one screen at a time         
   mount        Attaches the file system on the given device to a specified   
                directory in the file-system tree                             
   mountpoint   Checks if the directory is a mountpoint                       
   namei        Shows the symbolic links in the given pathnames               
   nsenter      Runs a program with namespaces of other processes             
   partx        Tells the kernel about the presence and numbering of on-disk  
                partitions                                                    
   pivot_root   Makes the given file system the new root file system of the   
                current process                                               
   prlimit      Get and set a process' resource limits                        
   readprofile  Reads kernel profiling information                            
   rename       Renames the given files, replacing a given string with        
                another                                                       
   renice       Alters the priority of running processes                      
   resizepart   Asks the Linux kernel to resize a partition                   
   rev          Reverses the lines of a given file                            
   rkfill       Tool for enabling and disabling wireless devices              
   rtcwake      Used to enter a system sleep state until specified wakeup     
                time                                                          
   script       Makes a typescript of a terminal session                      
   scriptlive   Re-run session typescripts using timing information           
   scriptreplay Plays back typescripts using timing information               
   setarch      Changes reported architecture in a new program environment    
                and sets personality flags                                    
   setsid       Runs the given program in a new session                       
   setterm      Sets terminal attributes                                      
   sfdisk       A disk partition table manipulator                            
   sulogin      Allows root to log in; it is normally invoked by init when    
                the system goes into single user mode                         
   swaplabel    Allows to change swaparea UUID and label                      
   swapoff      Disables devices and files for paging and swapping            
   swapon       Enables devices and files for paging and swapping and lists   
                the devices and files currently in use                        
   switch_root  Switches to another filesystem as the root of the mount tree  
   taskset      Retrieves or sets a process' CPU affinity                     
   uclampset    Manipulate the utilization clamping attributes of the system  
                or a process                                                  
   ul           A filter for translating underscores into escape sequences    
                indicating underlining for the terminal in use                
   umount       Disconnects a file system from the system's file tree         
   uname26      A symbolic link to setarch                                    
   unshare      Runs a program with some namespaces unshared from parent      
   utmpdump     Displays the content of the given login file in a more        
                user-friendly format                                          
   uuidd        A daemon used by the UUID library to generate time-based      
                UUIDs in a secure and guaranteed-unique fashion               
   uuidgen      Creates new UUIDs. Each new UUID can reasonably be considered 
                unique among all UUIDs created, on the local system and on    
                other systems, in the past and in the future                  
   uuidparse    An utility to parse unique identifiers                        
   wall         Displays the contents of a file or, by default, its standard  
                input, on the terminals of all currently logged in users      
   wdctl        Shows hardware watchdog status                                
   whereis      Reports the location of the binary, source, and man page for  
                the given command                                             
   wipefs       Wipes a filesystem signature from a device                    
   x86_64       A symbolic link to setarch                                    
   zramctl      A program to set up and control zram (compressed ram disk)    
                devices                                                       
   libblkid     Contains routines for device identification and token         
                extraction                                                    
   libfdisk     Contains routines for manipulating partition tables           
   libmount     Contains routines for block device mounting and unmounting    
   libsmartcols Contains routines for aiding screen output in tabular form    
   libuuid      Contains routines for generating unique identifiers for       
                objects that may be accessible beyond the local system        

8.74. E2fsprogs-1.46.5

   The e2fsprogs package contains the utilities for handling the ext2 file
   system. It also supports the ext3 and ext4 journaling file systems.

   Approximate build time: 4.4 SBU on a spinning disk, 1.2 SBU on an SSD
   Required disk space: 94 MB

  8.74.1. Installation of E2fsprogs

   The e2fsprogs documentation recommends that the package be built in a
   subdirectory of the source tree:

 mkdir -v build
 cd       build

   Prepare e2fsprogs for compilation:

 ../configure --prefix=/usr           \
              --sysconfdir=/etc       \
              --enable-elf-shlibs     \
              --disable-libblkid      \
              --disable-libuuid       \
              --disable-uuidd         \
              --disable-fsck

   The meaning of the configure options:

   --enable-elf-shlibs

           This creates the shared libraries which some programs in this
           package use.

   --disable-*

           This prevents e2fsprogs from building and installing the libuuid
           and libblkid libraries, the uuidd daemon, and the fsck wrapper, as
           util-linux installs more recent versions.

   Compile the package:

 make

   To run the tests, issue:

 make check

   One test, u_direct_io, is known to fail on some systems.

   Install the package:

 make install

   Remove useless static libraries:

 rm -fv /usr/lib/{libcom_err,libe2p,libext2fs,libss}.a

   This package installs a gzipped .info file but doesn't update the
   system-wide dir file. Unzip this file and then update the system dir file
   using the following commands:

 gunzip -v /usr/share/info/libext2fs.info.gz
 install-info --dir-file=/usr/share/info/dir /usr/share/info/libext2fs.info

   If desired, create and install some additional documentation by issuing
   the following commands:

 makeinfo -o      doc/com_err.info ../lib/et/com_err.texinfo
 install -v -m644 doc/com_err.info /usr/share/info
 install-info --dir-file=/usr/share/info/dir /usr/share/info/com_err.info

  8.74.2. Contents of E2fsprogs

   Installed programs: badblocks, chattr, compile_et, debugfs, dumpe2fs,
   e2freefrag, e2fsck, e2image, e2label, e2mmpstatus, e2scrub, e2scrub_all,
   e2undo, e4crypt, e4defrag, filefrag, fsck.ext2, fsck.ext3, fsck.ext4,
   logsave, lsattr, mk_cmds, mke2fs, mkfs.ext2, mkfs.ext3, mkfs.ext4,
   mklost+found, resize2fs, and tune2fs
   Installed libraries: libcom_err.so, libe2p.so, libext2fs.so, and libss.so
   Installed directories: /usr/include/e2p, /usr/include/et,
   /usr/include/ext2fs, /usr/include/ss, /usr/lib/e2fsprogs, /usr/share/et,
   and /usr/share/ss

    Short Descriptions

   badblocks    Searches a device (usually a disk partition) for bad blocks   
   chattr       Changes the attributes of files on an ext2 file system; it    
                also changes ext3 file systems, the journaling version of     
                ext2 file systems                                             
   compile_et   An error table compiler; it converts a table of error-code    
                names and messages into a C source file suitable for use with 
                the com_err library                                           
   debugfs      A file system debugger; it can be used to examine and change  
                the state of an ext2 file system                              
   dumpe2fs     Prints the super block and blocks group information for the   
                file system present on a given device                         
   e2freefrag   Reports free space fragmentation information                  
   e2fsck       Is used to check, and optionally repair ext2 file systems and 
                ext3 file systems                                             
   e2image      Is used to save critical ext2 file system data to a file      
   e2label      Displays or changes the file system label on the ext2 file    
                system present on a given device                              
   e2mmpstatus  Checks MMP status of an ext4 filesystem                       
   e2scrub      Checks the contents of a mounted ext[234] filesystem          
   e2scrub_all  Checks all mounted ext[234] filesystems for errors            
   e2undo       Replays the undo log undo_log for an ext2/ext3/ext4           
                filesystem found on a device [This can be used to undo a      
                failed operation by an e2fsprogs program.]                    
   e4crypt      Ext4 filesystem encryption utility                            
   e4defrag     Online defragmenter for ext4 filesystems                      
   filefrag     Reports on how badly fragmented a particular file might be    
   fsck.ext2    By default checks ext2 file systems and is a hard link to     
                e2fsck                                                        
   fsck.ext3    By default checks ext3 file systems and is a hard link to     
                e2fsck                                                        
   fsck.ext4    By default checks ext4 file systems and is a hard link to     
                e2fsck                                                        
   logsave      Saves the output of a command in a log file                   
   lsattr       Lists the attributes of files on a second extended file       
                system                                                        
   mk_cmds      Converts a table of command names and help messages into a C  
                source file suitable for use with the libss subsystem library 
   mke2fs       Creates an ext2 or ext3 file system on the given device       
   mkfs.ext2    By default creates ext2 file systems and is a hard link to    
                mke2fs                                                        
   mkfs.ext3    By default creates ext3 file systems and is a hard link to    
                mke2fs                                                        
   mkfs.ext4    By default creates ext4 file systems and is a hard link to    
                mke2fs                                                        
   mklost+found Used to create a lost+found directory on an ext2 file system; 
                it pre-allocates disk blocks to this directory to lighten the 
                task of e2fsck                                                
   resize2fs    Can be used to enlarge or shrink an ext2 file system          
   tune2fs      Adjusts tunable file system parameters on an ext2 file system 
   libcom_err   The common error display routine                              
   libe2p       Used by dumpe2fs, chattr, and lsattr                          
   libext2fs    Contains routines to enable user-level programs to manipulate 
                an ext2 file system                                           
   libss        Used by debugfs                                               

8.75. Sysklogd-1.5.1

   The sysklogd package contains programs for logging system messages, such
   as those given by the kernel when unusual things happen.

   Approximate build time: less than 0.1 SBU
   Required disk space: 0.6 MB

  8.75.1. Installation of Sysklogd

   First, fix problems that causes a segmentation fault under some conditions
   in klogd and fix an obsolete program construct:

 sed -i '/Error loading kernel symbols/{n;n;d}' ksym_mod.c
 sed -i 's/union wait/int/' syslogd.c

   Compile the package:

 make

   This package does not come with a test suite.

   Install the package:

 make BINDIR=/sbin install

  8.75.2. Configuring Sysklogd

   Create a new /etc/syslog.conf file by running the following:

 cat > /etc/syslog.conf << "EOF"
 # Begin /etc/syslog.conf

 auth,authpriv.* -/var/log/auth.log
 *.*;auth,authpriv.none -/var/log/sys.log
 daemon.* -/var/log/daemon.log
 kern.* -/var/log/kern.log
 mail.* -/var/log/mail.log
 user.* -/var/log/user.log
 *.emerg *

 # End /etc/syslog.conf
 EOF

  8.75.3. Contents of Sysklogd

   Installed programs: klogd and syslogd

    Short Descriptions

   klogd   A system daemon for intercepting and logging kernel messages       
   syslogd Logs the messages that system programs offer for logging [Every    
           logged message contains at least a date stamp and a hostname, and  
           normally the program's name too, but that depends on how trusting  
           the logging daemon is told to be.]                                 

8.76. Sysvinit-3.04

   The Sysvinit package contains programs for controlling the startup,
   running, and shutdown of the system.

   Approximate build time: less than 0.1 SBU
   Required disk space: 2.7 MB

  8.76.1. Installation of Sysvinit

   First, apply a patch that removes several programs installed by other
   packages, clarifies a message, and fixes a compiler warning:

 patch -Np1 -i ../sysvinit-3.04-consolidated-1.patch

   Compile the package:

 make

   This package does not come with a test suite.

   Install the package:

 make install

  8.76.2. Contents of Sysvinit

   Installed programs: bootlogd, fstab-decode, halt, init, killall5, poweroff
   (link to halt), reboot (link to halt), runlevel, shutdown, and telinit
   (link to init)

    Short Descriptions

   bootlogd     Logs boot messages to a log file                              
   fstab-decode Run a command with fstab-encoded arguments                    
   halt         Normally invokes shutdown with the -h option, except when     
                already in run-level 0, then it tells the kernel to halt the  
                system; it notes in the file /var/log/wtmp that the system is 
                being brought down                                            
   init         The first process to be started when the kernel has           
                initialized the hardware which takes over the boot process    
                and starts all the proceses specified in its configuration    
                file                                                          
   killall5     Sends a signal to all processes, except the processes in its  
                own session so it will not kill its parent shell              
   poweroff     Tells the kernel to halt the system and switch off the        
                computer (see halt)                                           
   reboot       Tells the kernel to reboot the system (see halt)              
   runlevel     Reports the previous and the current run-level, as noted in   
                the last run-level record in /run/utmp                        
   shutdown     Brings the system down in a secure way, signaling all         
                processes and notifying all logged-in users                   
   telinit      Tells init which run-level to change to                       

8.77. About Debugging Symbols

   Most programs and libraries are, by default, compiled with debugging
   symbols included (with gcc's -g option). This means that when debugging a
   program or library that was compiled with debugging information, the
   debugger can provide not only memory addresses, but also the names of the
   routines and variables.

   However, the inclusion of these debugging symbols enlarges a program or
   library significantly. The following is an example of the amount of space
   these symbols occupy:

     * A bash binary with debugging symbols: 1200 KB

     * A bash binary without debugging symbols: 480 KB

     * Glibc and GCC files (/lib and /usr/lib) with debugging symbols: 87 MB

     * Glibc and GCC files without debugging symbols: 16 MB

   Sizes may vary depending on which compiler and C library were used, but
   when comparing programs with and without debugging symbols, the difference
   will usually be a factor between two and five.

   Because most users will never use a debugger on their system software, a
   lot of disk space can be regained by removing these symbols. The next
   section shows how to strip all debugging symbols from the programs and
   libraries.

8.78. Stripping

   This section is optional. If the intended user is not a programmer and
   does not plan to do any debugging on the system software, the system size
   can be decreased by about 2 GB by removing the debugging symbols and
   unneeded symbol table entries from binaries and libraries. This causes no
   inconvenience other than not being able to debug the software fully
   anymore.

   Most people who use the commands mentioned below do not experience any
   difficulties. However, it is easy to make a typo and render the new system
   unusable, so before running the strip commands, it is a good idea to make
   a backup of the LFS system in its current state.

   A strip command with --strip-unneeded option removes all debug symbols
   from a binary or library. And, it removes all symbol table entries not
   needed by the linker (for static libraries) or dynamic linker (for
   dynamic-linked binaries and shared libraries).

   The debugging symbols for selected libraries are placed in separate files.
   This debugging information is needed if running regression tests that use
   valgrind or gdb later in BLFS.

   Note that strip will overwrite the binary or library file it is
   processing. This can crash the processes using code or data from the file.
   If the process running strip itself is affected, the binary or library
   being stripped can be destroyed and can make the system completely
   unusable. To avoid it, we'll copy some libraries and binaries into /tmp,
   strip them there, and install them back with the install command. Read the
   related entry in Section 8.2.1, “Upgrade Issues” for the rationale to use
   the install command here.

  Note

   The ELF loader's name is ld-linux-x86-64.so.2 on 64-bit systems and
   ld-linux.so.2 on 32-bit systems. The construct below selects the correct
   name for the current architecture, excluding anything ending with “g”, in
   case the commands below have already been run.

 save_usrlib="$(cd /usr/lib; ls ld-linux*[^g])
              libc.so.6
              libthread_db.so.1
              libquadmath.so.0.0.0
              libstdc++.so.6.0.30
              libitm.so.1.0.0
              libatomic.so.1.2.0"

 cd /usr/lib

 for LIB in $save_usrlib; do
     objcopy --only-keep-debug $LIB $LIB.dbg
     cp $LIB /tmp/$LIB
     strip --strip-unneeded /tmp/$LIB
     objcopy --add-gnu-debuglink=$LIB.dbg /tmp/$LIB
     install -vm755 /tmp/$LIB /usr/lib
     rm /tmp/$LIB
 done

 online_usrbin="bash find strip"
 online_usrlib="libbfd-2.39.so
                libhistory.so.8.1
                libncursesw.so.6.3
                libm.so.6
                libreadline.so.8.1
                libz.so.1.2.12
                $(cd /usr/lib; find libnss*.so* -type f)"

 for BIN in $online_usrbin; do
     cp /usr/bin/$BIN /tmp/$BIN
     strip --strip-unneeded /tmp/$BIN
     install -vm755 /tmp/$BIN /usr/bin
     rm /tmp/$BIN
 done

 for LIB in $online_usrlib; do
     cp /usr/lib/$LIB /tmp/$LIB
     strip --strip-unneeded /tmp/$LIB
     install -vm755 /tmp/$LIB /usr/lib
     rm /tmp/$LIB
 done

 for i in $(find /usr/lib -type f -name \*.so* ! -name \*dbg) \
          $(find /usr/lib -type f -name \*.a)                 \
          $(find /usr/{bin,sbin,libexec} -type f); do
     case "$online_usrbin $online_usrlib $save_usrlib" in
         *$(basename $i)* )
             ;;
         * ) strip --strip-unneeded $i
             ;;
     esac
 done

 unset BIN LIB save_usrlib online_usrbin online_usrlib

   A large number of files will be reported as having their file format not
   recognized. These warnings can be safely ignored. They indicate that those
   files are scripts instead of binaries.

8.79. Cleaning Up

   Finally, clean up some extra files left around from running tests:

 rm -rf /tmp/*

   There are also several files installed in the /usr/lib and /usr/libexec
   directories with a file name extension of .la. These are "libtool archive"
   files. As already said, they are only useful when linking with static
   libraries. They are unneeded, and potentially harmful, when using dynamic
   shared libraries, specially when using also non-autotools build systems.
   To remove them, run:

 find /usr/lib /usr/libexec -name \*.la -delete

   For more information about libtool archive files, see the BLFS section
   "About Libtool Archive (.la) files".

   The compiler built in Chapter 6 and Chapter 7 is still partially installed
   and not needed anymore. Remove it with:

 find /usr -depth -name $(uname -m)-lfs-linux-gnu\* | xargs rm -rf

   Finally, remove the temporary 'tester' user account created at the
   beginning of the previous chapter.

 userdel -r tester

