
7.1. Introduction

   This chapter shows how to build the last missing bits of the temporary
   system: the tools needed by the build machinery of various packages. Now
   that all circular dependencies have been resolved, a “chroot” environment,
   completely isolated from the host operating system (except for the running
   kernel), can be used for the build.

   For proper operation of the isolated environment, some communication with
   the running kernel must be established. This is done through the so-called
   Virtual Kernel File Systems, which must be mounted when entering the
   chroot environment. You may want to check that they are mounted by issuing
   findmnt.

   Until Section 7.4, “Entering the Chroot Environment”, the commands must be
   run as root, with the LFS variable set. After entering chroot, all
   commands are run as root, fortunately without access to the OS of the
   computer you built LFS on. Be careful anyway, as it is easy to destroy the
   whole LFS system with badly formed commands.

7.2. Changing Ownership

  Note

   The commands in the remainder of this book must be performed while logged
   in as user root and no longer as user lfs. Also, double check that $LFS is
   set in root's environment.

   Currently, the whole directory hierarchy in $LFS is owned by the user lfs,
   a user that exists only on the host system. If the directories and files
   under $LFS are kept as they are, they will be owned by a user ID without a
   corresponding account. This is dangerous because a user account created
   later could get this same user ID and would own all the files under $LFS,
   thus exposing these files to possible malicious manipulation.

   To address this issue, change the ownership of the $LFS/* directories to
   user root by running the following command:

 chown -R root:root $LFS/{usr,lib,var,etc,bin,sbin,tools}
 case $(uname -m) in
   x86_64) chown -R root:root $LFS/lib64 ;;
 esac

7.3. Preparing Virtual Kernel File Systems

   Various file systems exported by the kernel are used to communicate to and
   from the kernel itself. These file systems are virtual in that no disk
   space is used for them. The content of the file systems resides in memory.

   Begin by creating directories onto which the file systems will be mounted:

 mkdir -pv $LFS/{dev,proc,sys,run}

  7.3.1. Mounting and Populating /dev

   During a normal boot, the kernel automatically mounts the devtmpfs
   filesystem on the /dev directory, and allow the devices to be created
   dynamically on that virtual filesystem as they are detected or accessed.
   Device creation is generally done during the boot process by the kernel
   and Udev. Since this new system does not yet have Udev and has not yet
   been booted, it is necessary to mount and populate /dev manually. This is
   accomplished by bind mounting the host system's /dev directory. A bind
   mount is a special type of mount that allows you to create a mirror of a
   directory or mount point to some other location. Use the following command
   to achieve this:

 mount -v --bind /dev $LFS/dev

  7.3.2. Mounting Virtual Kernel File Systems

   Now mount the remaining virtual kernel filesystems:

 mount -v --bind /dev/pts $LFS/dev/pts
 mount -vt proc proc $LFS/proc
 mount -vt sysfs sysfs $LFS/sys
 mount -vt tmpfs tmpfs $LFS/run

   In some host systems, /dev/shm is a symbolic link to /run/shm. The /run
   tmpfs was mounted above so in this case only a directory needs to be
   created.

 if [ -h $LFS/dev/shm ]; then
   mkdir -pv $LFS/$(readlink $LFS/dev/shm)
 fi

7.4. Entering the Chroot Environment

   Now that all the packages which are required to build the rest of the
   needed tools are on the system, it is time to enter the chroot environment
   to finish installing the remaining temporary tools. This environment will
   be in use also for installing the final system. As user root, run the
   following command to enter the environment that is, at the moment,
   populated with only the temporary tools:

 chroot "$LFS" /usr/bin/env -i   \
     HOME=/root                  \
     TERM="$TERM"                \
     PS1='(lfs chroot) \u:\w\$ ' \
     PATH=/usr/bin:/usr/sbin     \
     /bin/bash --login

   The -i option given to the env command will clear all variables of the
   chroot environment. After that, only the HOME, TERM, PS1, and PATH
   variables are set again. The TERM=$TERM construct will set the TERM
   variable inside chroot to the same value as outside chroot. This variable
   is needed for programs like vim and less to operate properly. If other
   variables are desired, such as CFLAGS or CXXFLAGS, this is a good place to
   set them again.

   From this point on, there is no need to use the LFS variable anymore
   because all work will be restricted to the LFS file system. This is
   because the Bash shell is told that $LFS is now the root (/) directory.

   Notice that /tools/bin is not in the PATH. This means that the cross
   toolchain will no longer be used in the chroot environment.

   Note that the bash prompt will say I have no name! This is normal because
   the /etc/passwd file has not been created yet.

  Note

   It is important that all the commands throughout the remainder of this
   chapter and the following chapters are run from within the chroot
   environment. If you leave this environment for any reason (rebooting for
   example), ensure that the virtual kernel filesystems are mounted as
   explained in Section 7.3.1, “Mounting and Populating /dev” and
   Section 7.3.2, “Mounting Virtual Kernel File Systems” and enter chroot
   again before continuing with the installation.

7.5. Creating Directories

   It is time to create the full structure in the LFS file system.

  Note

   Some of the directories mentioned in this section may be already created
   earlier with explicit instructions or when installing some packages. They
   are repeated below for completeness.

   Create some root-level directories that are not in the limited set
   required in the previous chapters by issuing the following command:

 mkdir -pv /{boot,home,mnt,opt,srv}

   Create the required set of subdirectories below the root-level by issuing
   the following commands:

 mkdir -pv /etc/{opt,sysconfig}
 mkdir -pv /lib/firmware
 mkdir -pv /media/{floppy,cdrom}
 mkdir -pv /usr/{,local/}{include,src}
 mkdir -pv /usr/local/{bin,lib,sbin}
 mkdir -pv /usr/{,local/}share/{color,dict,doc,info,locale,man}
 mkdir -pv /usr/{,local/}share/{misc,terminfo,zoneinfo}
 mkdir -pv /usr/{,local/}share/man/man{1..8}
 mkdir -pv /var/{cache,local,log,mail,opt,spool}
 mkdir -pv /var/lib/{color,misc,locate}

 ln -sfv /run /var/run
 ln -sfv /run/lock /var/lock

 install -dv -m 0750 /root
 install -dv -m 1777 /tmp /var/tmp

   Directories are, by default, created with permission mode 755, but this is
   not desirable for all directories. In the commands above, two changes are
   made—one to the home directory of user root, and another to the
   directories for temporary files.

   The first mode change ensures that not just anybody can enter the /root
   directory—the same as a normal user would do with his or her home
   directory. The second mode change makes sure that any user can write to
   the /tmp and /var/tmp directories, but cannot remove another user's files
   from them. The latter is prohibited by the so-called “sticky bit,” the
   highest bit (1) in the 1777 bit mask.

  7.5.1. FHS Compliance Note

   The directory tree is based on the Filesystem Hierarchy Standard (FHS)
   (available at https://refspecs.linuxfoundation.org/fhs.shtml). The FHS
   also specifies the optional existence of some directories such as
   /usr/local/games and /usr/share/games. We create only the directories that
   are needed. However, feel free to create these directories.

7.6. Creating Essential Files and Symlinks

   Historically, Linux maintains a list of the mounted file systems in the
   file /etc/mtab. Modern kernels maintain this list internally and expose it
   to the user via the /proc filesystem. To satisfy utilities that expect the
   presence of /etc/mtab, create the following symbolic link:

 ln -sv /proc/self/mounts /etc/mtab

   Create a basic /etc/hosts file to be referenced in some test suites, and
   in one of Perl's configuration files as well:

 cat > /etc/hosts << EOF
 127.0.0.1  localhost $(hostname)
 ::1        localhost
 EOF

   In order for user root to be able to login and for the name “root” to be
   recognized, there must be relevant entries in the /etc/passwd and
   /etc/group files.

   Create the /etc/passwd file by running the following command:

 cat > /etc/passwd << "EOF"
 root:x:0:0:root:/root:/bin/bash
 bin:x:1:1:bin:/dev/null:/usr/bin/false
 daemon:x:6:6:Daemon User:/dev/null:/usr/bin/false
 messagebus:x:18:18:D-Bus Message Daemon User:/run/dbus:/usr/bin/false
 uuidd:x:80:80:UUID Generation Daemon User:/dev/null:/usr/bin/false
 nobody:x:65534:65534:Unprivileged User:/dev/null:/usr/bin/false
 EOF

   The actual password for root will be set later.

   Create the /etc/group file by running the following command:

 cat > /etc/group << "EOF"
 root:x:0:
 bin:x:1:daemon
 sys:x:2:
 kmem:x:3:
 tape:x:4:
 tty:x:5:
 daemon:x:6:
 floppy:x:7:
 disk:x:8:
 lp:x:9:
 dialout:x:10:
 audio:x:11:
 video:x:12:
 utmp:x:13:
 usb:x:14:
 cdrom:x:15:
 adm:x:16:
 messagebus:x:18:
 input:x:24:
 mail:x:34:
 kvm:x:61:
 uuidd:x:80:
 wheel:x:97:
 users:x:999:
 nogroup:x:65534:
 EOF

   The created groups are not part of any standard—they are groups decided on
   in part by the requirements of the Udev configuration in Chapter 9, and in
   part by common convention employed by a number of existing Linux
   distributions. In addition, some test suites rely on specific users or
   groups. The Linux Standard Base (LSB, available at
   http://refspecs.linuxfoundation.org/lsb.shtml) only recommends that,
   besides the group root with a Group ID (GID) of 0, a group bin with a GID
   of 1 be present. The GID of 5 is widely used for tty group, and the number
   5 is also used in /etc/fstab for the devpts filesystem. All other group
   names and GIDs can be chosen freely by the system administrator since
   well-written programs do not depend on GID numbers, but rather use the
   group's name.

   The ID 65534 is used by the kernel for NFS and separate user namespaces
   for unmapped users and groups (those exist on the NFS server or the parent
   user namespace, but “do not exist” on the local machine or in the separate
   namespace). We assign nobody and nogroup for it to avoid an unnamed ID.
   But other distros may treat this ID differently, so any portable program
   should not depend on this assignment.

   Some tests in Chapter 8 need a regular user. We add this user here and
   delete this account at the end of that chapter.

 echo "tester:x:101:101::/home/tester:/bin/bash" >> /etc/passwd
 echo "tester:x:101:" >> /etc/group
 install -o tester -d /home/tester

   To remove the “I have no name!” prompt, start a new shell. Since the
   /etc/passwd and /etc/group files have been created, user name and group
   name resolution will now work:

 exec /usr/bin/bash --login

   The login, agetty, and init programs (and others) use a number of log
   files to record information such as who was logged into the system and
   when. However, these programs will not write to the log files if they do
   not already exist. Initialize the log files and give them proper
   permissions:

 touch /var/log/{btmp,lastlog,faillog,wtmp}
 chgrp -v utmp /var/log/lastlog
 chmod -v 664  /var/log/lastlog
 chmod -v 600  /var/log/btmp

   The /var/log/wtmp file records all logins and logouts. The
   /var/log/lastlog file records when each user last logged in. The
   /var/log/faillog file records failed login attempts. The /var/log/btmp
   file records the bad login attempts.

  Note

   The /run/utmp file records the users that are currently logged in. This
   file is created dynamically in the boot scripts.

7.7. Gettext-0.21

   The Gettext package contains utilities for internationalization and
   localization. These allow programs to be compiled with NLS (Native
   Language Support), enabling them to output messages in the user's native
   language.

   Approximate build time: 1.6 SBU
   Required disk space: 282 MB

  7.7.1. Installation of Gettext

   For our temporary set of tools, we only need to install three programs
   from Gettext.

   Prepare Gettext for compilation:

 ./configure --disable-shared

   The meaning of the configure option:

   --disable-shared

           We do not need to install any of the shared Gettext libraries at
           this time, therefore there is no need to build them.

   Compile the package:

 make

   Install the msgfmt, msgmerge, and xgettext programs:

 cp -v gettext-tools/src/{msgfmt,msgmerge,xgettext} /usr/bin

   Details on this package are located in Section 8.31.2, “Contents of
   Gettext.”

7.8. Bison-3.8.2

   The Bison package contains a parser generator.

   Approximate build time: 0.3 SBU
   Required disk space: 57 MB

  7.8.1. Installation of Bison

   Prepare Bison for compilation:

 ./configure --prefix=/usr \
             --docdir=/usr/share/doc/bison-3.8.2

   The meaning of the new configure option:

   --docdir=/usr/share/doc/bison-3.8.2

           This tells the build system to install bison documentation into a
           versioned directory.

   Compile the package:

 make

   Install the package:

 make install

   Details on this package are located in Section 8.32.2, “Contents of
   Bison.”

7.9. Perl-5.36.0

   The Perl package contains the Practical Extraction and Report Language.

   Approximate build time: 1.6 SBU
   Required disk space: 282 MB

  7.9.1. Installation of Perl

   Prepare Perl for compilation:

 sh Configure -des                                        \
              -Dprefix=/usr                               \
              -Dvendorprefix=/usr                         \
              -Dprivlib=/usr/lib/perl5/5.36/core_perl     \
              -Darchlib=/usr/lib/perl5/5.36/core_perl     \
              -Dsitelib=/usr/lib/perl5/5.36/site_perl     \
              -Dsitearch=/usr/lib/perl5/5.36/site_perl    \
              -Dvendorlib=/usr/lib/perl5/5.36/vendor_perl \
              -Dvendorarch=/usr/lib/perl5/5.36/vendor_perl

   The meaning of the new Configure options:

   -des

           This is a combination of three options: -d uses defaults for all
           items; -e ensures completion of all tasks; -s silences
           non-essential output.

   Compile the package:

 make

   Install the package:

 make install

   Details on this package are located in Section 8.41.2, “Contents of Perl.”

7.10. Python-3.10.6

   The Python 3 package contains the Python development environment. It is
   useful for object-oriented programming, writing scripts, prototyping large
   programs, or developing entire applications.

   Approximate build time: 0.9 SBU
   Required disk space: 364 MB

  7.10.1. Installation of Python

  Note

   There are two package files whose name starts with “python”. The one to
   extract from is Python-3.10.6.tar.xz (notice the uppercase first letter).

   Prepare Python for compilation:

 ./configure --prefix=/usr   \
             --enable-shared \
             --without-ensurepip

   The meaning of the configure option:

   --enable-shared

           This switch prevents installation of static libraries.

   --without-ensurepip

           This switch disables the Python package installer, which is not
           needed at this stage.

   Compile the package:

 make

  Note

   Some Python 3 modules can't be built now because the dependencies are not
   installed yet. The building system still attempts to build them however,
   so the compilation of some files will fail and the compiler message may
   seem to indicate “fatal error”. The message should be ignored. Just make
   sure the toplevel make command has not failed. The optional modules are
   not needed now and they will be built in Chapter 8.

   Install the package:

 make install

   Details on this package are located in Section 8.50.2, “Contents of Python
   3.”

7.11. Texinfo-6.8

   The Texinfo package contains programs for reading, writing, and converting
   info pages.

   Approximate build time: 0.2 SBU
   Required disk space: 113 MB

  7.11.1. Installation of Texinfo

   Prepare Texinfo for compilation:

 ./configure --prefix=/usr

   Compile the package:

 make

   Install the package:

 make install

   Details on this package are located in Section 8.68.2, “Contents of
   Texinfo.”

7.12. Util-linux-2.38.1

   The Util-linux package contains miscellaneous utility programs.

   Approximate build time: 0.6 SBU
   Required disk space: 149 MB

  7.12.1. Installation of Util-linux

   The FHS recommends using the /var/lib/hwclock directory instead of the
   usual /etc directory as the location for the adjtime file. Create this
   directory with:

 mkdir -pv /var/lib/hwclock

   Prepare Util-linux for compilation:

 ./configure ADJTIME_PATH=/var/lib/hwclock/adjtime    \
             --libdir=/usr/lib    \
             --docdir=/usr/share/doc/util-linux-2.38.1 \
             --disable-chfn-chsh  \
             --disable-login      \
             --disable-nologin    \
             --disable-su         \
             --disable-setpriv    \
             --disable-runuser    \
             --disable-pylibmount \
             --disable-static     \
             --without-python     \
             runstatedir=/run

   The meaning of the configure options:

   ADJTIME_PATH=/var/lib/hwclock/adjtime

           This sets the location of the file recording information about the
           hardware clock in accordance to the FHS. This is not strictly
           needed for this temporary tool, but it prevents creating a file at
           another location, which would not be overwritten or removed when
           building the final util-linux package.

   --libdir=/usr/lib

           This switch ensures the .so symlinks targeting the shared library
           file in the same directory (/usr/lib) directly.

   --disable-*

           These switches prevent warnings about building components that
           require packages not in LFS or not installed yet.

   --without-python

           This switch disables using Python. It avoids trying to build
           unneeded bindings.

   runstatedir=/run

           This switch sets the location of the socket used by uuidd and
           libuuid correctly.

   Compile the package:

 make

   Install the package:

 make install

   Details on this package are located in Section 8.73.2, “Contents of
   Util-linux.”

7.13. Cleaning up and Saving the Temporary System

  7.13.1. Cleaning

   First, remove the currently installed documentation to prevent them from
   ending up in the final system, and to save about 35 MB:

 rm -rf /usr/share/{info,man,doc}/*

   Second, the libtool .la files are only useful when linking with static
   libraries. They are unneeded and potentially harmful when using dynamic
   shared libraries, especially when using non-autotools build systems. While
   still in chroot, remove those files now:

 find /usr/{lib,libexec} -name \*.la -delete

   The current system size is now about 3 GB, however the /tools directory is
   no longer needed. It uses about 1 GB of disk space. Delete it now:

 rm -rf /tools

  7.13.2. Backup

   At this point the essential programs and libraries have been created and
   your current LFS system is in a good state. Your system can now be backed
   up for later reuse. In case of fatal failures in the subsequent chapters,
   it often turns out that removing everything and starting over (more
   carefully) is the best option to recover. Unfortunately, all the temporary
   files will be removed, too. To avoid spending extra time to redo something
   which has been built successfully, creating a backup of the current LFS
   system may prove useful.

  Note

   All the remaining steps in this section are optional. Nevertheless, as
   soon as you begin installing packages in Chapter 8, the temporary files
   will be overwritten. So it may be a good idea to do a backup of the
   current system as described below.

   The following steps are performed from outside the chroot environment.
   That means, you have to leave the chroot environment first before
   continuing. The reason for that is to get access to file system locations
   outside of the chroot environment to store/read the backup archive which
   should not be placed within the $LFS hierarchy for safety reasons.

   If you have decided to make a backup, leave the chroot environment:

 exit

  Important

   All of the following instructions are executed by root on your host
   system. Take extra care about the commands you're going to run as mistakes
   here can modify your host system. Be aware that the environment variable
   LFS is set for user lfs by default but may not be set for root.

   Whenever commands are to be executed by root, make sure you have set LFS.

   This has been discussed in Section 2.6, “Setting The $LFS Variable”.

   Before making a backup, unmount the virtual file systems:

 umount $LFS/dev/pts
 umount $LFS/{sys,proc,run,dev}

   Make sure you have at least 1 GB free disk space (the source tarballs will
   be included in the backup archive) on the filesystem containing directory
   where you create the backup archive.

   Note that the instructions below specify the home directory of the host
   system's root user, which is typically found on the root filesystem.

   Replace $HOME by a directory of your choice if you do not want to have the
   backup stored in root's home directory.

   Create the backup archive by running the following command:

  Note

   Because the backup archive is compressed, it takes a relatively long time
   (over 10 minutes) even on a reasonably fast system.

 cd $LFS
 tar -cJpf $HOME/lfs-temp-tools-11.2.tar.xz .

  Note

   If continuing to chapter 8, don't forget to reenter the chroot environment
   as explained in the “Important” box below.

  7.13.3. Restore

   In case some mistakes have been made and you need to start over, you can
   use this backup to restore the system and save some recovery time. Since
   the sources are located under $LFS, they are included in the backup
   archive as well, so they do not need to be downloaded again. After
   checking that $LFS is set properly, restore the backup by executing the
   following commands:

  Warning

   The following commands are extremely dangerous. If you run rm -rf ./* as
   the root user and you do not change to the $LFS directory or the LFS
   environment variable is not set for the root user, it will destroy your
   entire host system. YOU ARE WARNED.

 cd $LFS
 rm -rf ./*
 tar -xpf $HOME/lfs-temp-tools-11.2.tar.xz

   Again, double check that the environment has been setup properly and
   continue building the rest of the system.

  Important

   If you left the chroot environment to create a backup or restart building
   using a restore, remember to check that the virtual filesystems are still
   mounted (findmnt | grep $LFS). If they are not mounted, remount them now
   as described in Section 7.3, “Preparing Virtual Kernel File Systems” and
   re-enter the chroot environment (see Section 7.4, “Entering the Chroot
   Environment”) before continuing.

                        Part IV. Building the LFS System

