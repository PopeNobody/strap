
5.1. Introduction

   This chapter shows how to build a cross-compiler and its associated tools.
   Although here cross-compilation is faked, the principles are the same as
   for a real cross-toolchain.

   The programs compiled in this chapter will be installed under the
   $LFS_TOOLS directory to keep them separate from the files installed in the
   following chapters. The libraries, on the other hand, are installed into
   their final place, since they pertain to the system we want to build.

5.2. Binutils-2.39 - Pass 1

   The Binutils package contains a linker, an assembler, and other tools for
   handling object files.

   Approximate build time: 1 SBU
   Required disk space: 629 MB

  5.2.1. Installation of Cross Binutils

  Note

   Go back and re-read the notes in the section titled General Compilation
   Instructions. Understanding the notes labeled important can save you a lot
   of problems later.

   It is important that Binutils be the first package compiled because both
   Glibc and GCC perform various tests on the available linker and assembler
   to determine which of their own features to enable.

   The Binutils documentation recommends building Binutils in a dedicated
   build directory:

 mkdir -v build
 cd       build

  Note

   In order for the SBU values listed in the rest of the book to be of any
   use, measure the time it takes to build this package from the
   configuration, up to and including the first install. To achieve this
   easily, wrap the commands in a time command like this: time { ../configure
   ... && make && make install; }.

   Now prepare Binutils for compilation:

 ../configure --prefix=$LFS_TOOLS \
              --with-sysroot=$LFS \
              --target=$LFS_TGT   \
              --disable-nls       \
              --enable-gprofng=no \
              --disable-werror

   The meaning of the configure options:

   --prefix=$LFS_TOOLS

           This tells the configure script to prepare to install the binutils
           programs in the $LFS_TOOLS directory.

   --with-sysroot=$LFS

           For cross compilation, this tells the build system to look in $LFS
           for the target system libraries as needed.

   --target=$LFS_TGT

           Because the machine description in the LFS_TGT variable is
           slightly different than the value returned by the config.guess
           script, this switch will tell the configure script to adjust
           binutil's build system for building a cross linker.

   --disable-nls

           This disables internationalization as i18n is not needed for the
           temporary tools.

   --enable-gprofng=no

           This disables building gprofng which is not needed for the
           temporary tools.

   --disable-werror

           This prevents the build from stopping in the event that there are
           warnings from the host's compiler.

   Continue with compiling the package:

 make

   Install the package:

 make install

   Details on this package are located in Section 8.18.2, “Contents of
   Binutils.”

5.3. GCC-12.2.0 - Pass 1

   The GCC package contains the GNU compiler collection, which includes the C
   and C++ compilers.

   Approximate build time: 12 SBU
   Required disk space: 3.8 GB

  5.3.1. Installation of Cross GCC

   GCC requires the GMP, MPFR and MPC packages. As these packages may not be
   included in your host distribution, they will be built with GCC. Unpack
   each package into the GCC source directory and rename the resulting
   directories so the GCC build procedures will automatically use them:

  Note

   There are frequent misunderstandings about this chapter. The procedures
   are the same as every other chapter as explained earlier (Package build
   instructions). First extract the gcc tarball from the sources directory
   and then change to the directory created. Only then should you proceed
   with the instructions below.

 tar -xf ../mpfr-4.1.0.tar.xz
 mv -v mpfr-4.1.0 mpfr
 tar -xf ../gmp-6.2.1.tar.xz
 mv -v gmp-6.2.1 gmp
 tar -xf ../mpc-1.2.1.tar.gz
 mv -v mpc-1.2.1 mpc

   On x86_64 hosts, set the default directory name for 64-bit libraries to
   “lib”:

 case $(uname -m) in
   x86_64)
     sed -e '/m64=/s/lib64/lib/' \
         -i.orig gcc/config/i386/t-linux64
  ;;
 esac

   The GCC documentation recommends building GCC in a dedicated build
   directory:

 mkdir -v build
 cd       build

   Prepare GCC for compilation:

 ../configure                  \
     --target=$LFS_TGT         \
     --prefix=$LFS_TOOLS       \
     --with-glibc-version=2.36 \
     --with-sysroot=$LFS       \
     --with-newlib             \
     --without-headers         \
     --disable-nls             \
     --disable-shared          \
     --disable-multilib        \
     --disable-decimal-float   \
     --disable-threads         \
     --disable-libatomic       \
     --disable-libgomp         \
     --disable-libquadmath     \
     --disable-libssp          \
     --disable-libvtv          \
     --disable-libstdcxx       \
     --enable-languages=c,c++

   The meaning of the configure options:

   --with-glibc-version=2.36

           This option specifies the version of glibc which will be used on
           the target. It is not relevant to the libc of the host distro
           because everything compiled by pass1 gcc will run in the chroot
           environment, which is isolated from libc of the host distro.

   --with-newlib

           Since a working C library is not yet available, this ensures that
           the inhibit_libc constant is defined when building libgcc. This
           prevents the compiling of any code that requires libc support.

   --without-headers

           When creating a complete cross-compiler, GCC requires standard
           headers compatible with the target system. For our purposes these
           headers will not be needed. This switch prevents GCC from looking
           for them.

   --disable-shared

           This switch forces GCC to link its internal libraries statically.
           We need this because the shared libraries require glibc, which is
           not yet installed on the target system.

   --disable-multilib

           On x86_64, LFS does not support a multilib configuration. This
           switch is harmless for x86.

   --disable-decimal-float, --disable-threads, --disable-libatomic,
   --disable-libgomp, --disable-libquadmath, --disable-libssp,
   --disable-libvtv, --disable-libstdcxx

           These switches disable support for the decimal floating point
           extension, threading, libatomic, libgomp, libquadmath, libssp,
           libvtv, and the C++ standard library respectively. These features
           will fail to compile when building a cross-compiler and are not
           necessary for the task of cross-compiling the temporary libc.

   --enable-languages=c,c++

           This option ensures that only the C and C++ compilers are built.
           These are the only languages needed now.

   Compile GCC by running:

 make

   Install the package:

 make install

   This build of GCC has installed a couple of internal system headers.
   Normally one of them, limits.h, would in turn include the corresponding
   system limits.h header, in this case, $LFS/usr/include/limits.h. However,
   at the time of this build of GCC $LFS/usr/include/limits.h does not exist,
   so the internal header that has just been installed is a partial,
   self-contained file and does not include the extended features of the
   system header. This is adequate for building glibc, but the full internal
   header will be needed later. Create a full version of the internal header
   using a command that is identical to what the GCC build system does in
   normal circumstances:

 cd ..
 cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
   `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/install-tools/include/limits.h

   Details on this package are located in Section 8.26.2, “Contents of GCC.”

5.4. Linux-5.19.2 API Headers

   The Linux API Headers (in linux-5.19.2.tar.xz) expose the kernel's API for
   use by Glibc.

   Approximate build time: 0.1 SBU
   Required disk space: 1.4 GB

  5.4.1. Installation of Linux API Headers

   The Linux kernel needs to expose an Application Programming Interface
   (API) for the system's C library (Glibc in LFS) to use. This is done by
   way of sanitizing various C header files that are shipped in the Linux
   kernel source tarball.

   Make sure there are no stale files embedded in the package:

 make mrproper

   Now extract the user-visible kernel headers from the source. The
   recommended make target “headers_install” cannot be used, because it
   requires rsync, which may not be available. The headers are first placed
   in ./usr, then copied to the needed location.

 make headers
 find usr/include -type f ! -name '*.h' -delete
 cp -rv usr/include $LFS/usr

  5.4.2. Contents of Linux API Headers

   Installed headers: /usr/include/asm/*.h, /usr/include/asm-generic/*.h,
   /usr/include/drm/*.h, /usr/include/linux/*.h, /usr/include/misc/*.h,
   /usr/include/mtd/*.h, /usr/include/rdma/*.h, /usr/include/scsi/*.h,
   /usr/include/sound/*.h, /usr/include/video/*.h, and /usr/include/xen/*.h
   Installed directories: /usr/include/asm, /usr/include/asm-generic,
   /usr/include/drm, /usr/include/linux, /usr/include/misc, /usr/include/mtd,
   /usr/include/rdma, /usr/include/scsi, /usr/include/sound,
   /usr/include/video, and /usr/include/xen

    Short Descriptions

   /usr/include/asm/*.h         The Linux API ASM Headers           
   /usr/include/asm-generic/*.h The Linux API ASM Generic Headers   
   /usr/include/drm/*.h         The Linux API DRM Headers           
   /usr/include/linux/*.h       The Linux API Linux Headers         
   /usr/include/misc/*.h        The Linux API Miscellaneous Headers 
   /usr/include/mtd/*.h         The Linux API MTD Headers           
   /usr/include/rdma/*.h        The Linux API RDMA Headers          
   /usr/include/scsi/*.h        The Linux API SCSI Headers          
   /usr/include/sound/*.h       The Linux API Sound Headers         
   /usr/include/video/*.h       The Linux API Video Headers         
   /usr/include/xen/*.h         The Linux API Xen Headers           

5.5. Glibc-2.36

   The Glibc package contains the main C library. This library provides the
   basic routines for allocating memory, searching directories, opening and
   closing files, reading and writing files, string handling, pattern
   matching, arithmetic, and so on.

   Approximate build time: 4.4 SBU
   Required disk space: 821 MB

  5.5.1. Installation of Glibc

   First, create a symbolic link for LSB compliance. Additionally, for
   x86_64, create a compatibility symbolic link required for proper operation
   of the dynamic library loader:

 case $(uname -m) in
     i?86)   ln -sfv ld-linux.so.2 $LFS/lib/ld-lsb.so.3
     ;;
     x86_64) ln -sfv ../lib/ld-linux-x86-64.so.2 $LFS/lib64
             ln -sfv ../lib/ld-linux-x86-64.so.2 $LFS/lib64/ld-lsb-x86-64.so.3
     ;;
 esac

  Note

   The above command is correct. The ln command has a few syntactic versions,
   so be sure to check info coreutils ln and ln(1) before reporting what you
   may think is an error.

   Some of the Glibc programs use the non-FHS compliant /var/db directory to
   store their runtime data. Apply the following patch to make such programs
   store their runtime data in the FHS-compliant locations:

 patch -Np1 -i ../glibc-2.36-fhs-1.patch

   The Glibc documentation recommends building Glibc in a dedicated build
   directory:

 mkdir -v build
 cd       build

   Ensure that the ldconfig and sln utilities are installed into /usr/sbin:

 echo "rootsbindir=/usr/sbin" > configparms

   Next, prepare Glibc for compilation:

 ../configure                             \
       --prefix=/usr                      \
       --host=$LFS_TGT                    \
       --build=$(../scripts/config.guess) \
       --enable-kernel=3.2                \
       --with-headers=$LFS/usr/include    \
       libc_cv_slibdir=/usr/lib

   The meaning of the configure options:

   --host=$LFS_TGT, --build=$(../scripts/config.guess)

           The combined effect of these switches is that Glibc's build system
           configures itself to be cross-compiled, using the cross-linker and
           cross-compiler in $LFS_TOOLS.

   --enable-kernel=3.2

           This tells Glibc to compile the library with support for 3.2 and
           later Linux kernels. Workarounds for older kernels are not
           enabled.

   --with-headers=$LFS/usr/include

           This tells Glibc to compile itself against the headers recently
           installed to the $LFS/usr/include directory, so that it knows
           exactly what features the kernel has and can optimize itself
           accordingly.

   libc_cv_slibdir=/usr/lib

           This ensures that the library is installed in /usr/lib instead of
           the default /lib64 on 64 bit machines.

   During this stage the following warning might appear:

 configure: WARNING:
 *** These auxiliary programs are missing or
 *** incompatible versions: msgfmt
 *** some features will be disabled.
 *** Check the INSTALL file for required versions.

   The missing or incompatible msgfmt program is generally harmless. This
   msgfmt program is part of the Gettext package which the host distribution
   should provide.

  Note

   There have been reports that this package may fail when building as a
   "parallel make". If this occurs, rerun the make command with a "-j1"
   option.

   Compile the package:

 make

   Install the package:

  Warning

   If LFS is not properly set, and despite the recommendations, you are
   building as root, the next command will install the newly built glibc to
   your host system, which most likely will render it unusable. So double
   check that the environment is correctly set, before running the following
   command.

 make DESTDIR=$LFS install

   The meaning of the make install option:

   DESTDIR=$LFS

           The DESTDIR make variable is used by almost all packages to define
           the location where the package should be installed. If it is not
           set, it defaults to the root (/) directory. Here we specify that
           the package be installed in $LFS , which will become the root
           after Section 7.4, “Entering the Chroot Environment”.

   Fix hardcoded path to the executable loader in ldd script:

 sed '/RTLDLIST=/s@/usr@@g' -i $LFS/usr/bin/ldd

  Caution

   At this point, it is imperative to stop and ensure that the basic
   functions (compiling and linking) of the new toolchain are working as
   expected. To perform a sanity check, run the following commands:

 echo 'int main(){}' | gcc -xc -
 readelf -l a.out | grep ld-linux

   If everything is working correctly, there should be no errors, and the
   output of the last command will be of the form:

 [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]

   Note that for 32-bit machines, the interpreter name will be
   /lib/ld-linux.so.2.

   If the output is not shown as above or there was no output at all, then
   something is wrong. Investigate and retrace the steps to find out where
   the problem is and correct it. This issue must be resolved before
   continuing on.

   Once all is well, clean up the test file:

 rm -v a.out

  Note

   Building packages in the next chapter will serve as an additional check
   that the toolchain has been built properly. If some package, especially
   binutils-pass2 or gcc-pass2, fails to build, it is an indication that
   something has gone wrong with the previous Binutils, GCC, or Glibc
   installations.

   Now that our cross-toolchain is complete, finalize the installation of the
   limits.h header. For doing so, run a utility provided by the GCC
   developers:

 $LFS_TOOLS/libexec/gcc/$LFS_TGT/12.2.0/install-tools/mkheaders

   Details on this package are located in Section 8.5.3, “Contents of Glibc.”

5.6. Libstdc++ from GCC-12.2.0

   Libstdc++ is the standard C++ library. It is needed to compile C++ code
   (part of GCC is written in C++), but we had to defer its installation when
   we built gcc-pass1 because it depends on glibc, which was not yet
   available in the target directory.

   Approximate build time: 0.4 SBU
   Required disk space: 1.1 GB

  5.6.1. Installation of Target Libstdc++

  Note

   Libstdc++ is part of the GCC sources. You should first unpack the GCC
   tarball and change to the gcc-12.2.0 directory.

   Create a separate build directory for libstdc++ and enter it:

 mkdir -v build
 cd       build

   Prepare libstdc++ for compilation:

 ../libstdc++-v3/configure           \
     --host=$LFS_TGT                 \
     --build=$(../config.guess)      \
     --prefix=/usr                   \
     --disable-multilib              \
     --disable-nls                   \
     --disable-libstdcxx-pch         \
     --with-gxx-include-dir=/tools/$LFS_TGT/include/c++/12.2.0

   The meaning of the configure options:

   --host=...

           Specifies that the cross compiler we have just built should be
           used instead of the one in /usr/bin.

   --disable-libstdcxx-pch

           This switch prevents the installation of precompiled include
           files, which are not needed at this stage.

   --with-gxx-include-dir=/tools/$LFS_TGT/include/c++/12.2.0

           This specifies the installation directory for include files.
           Because libstdc++ is the standard C++ library for LFS, this
           directory should match the location where the C++ compiler
           ($LFS_TGT-g++) would search for the standard C++ include files. In
           a normal build, this information is automatically passed to the
           libstdc++ configure options from the top level directory. In our
           case, this information must be explicitly given. The C++ compiler
           will prepend the sysroot path $LFS (specified building GCC pass 1)
           to the include file search path, so it will actually search in
           $LFS_TOOLS/$LFS_TGT/include/c++/12.2.0. The combination of the
           DESTDIR variable (in the make install command below) and this
           switch ensures to install the headers there.

   Compile libstdc++ by running:

 make

   Install the library:

 make DESTDIR=$LFS install

   Remove the libtool archive files because they are harmful for cross
   compilation:

 rm -v $LFS/usr/lib/lib{stdc++,stdc++fs,supc++}.la

   Details on this package are located in Section 8.26.2, “Contents of GCC.”

