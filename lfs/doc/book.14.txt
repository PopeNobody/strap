
6.1. Introduction

   This chapter shows how to cross-compile basic utilities using the just
   built cross-toolchain. Those utilities are installed into their final
   location, but cannot be used yet. Basic tasks still rely on the host's
   tools. Nevertheless, the installed libraries are used when linking.

   Using the utilities will be possible in next chapter after entering the
   “chroot” environment. But all the packages built in the present chapter
   need to be built before we do that. Therefore we cannot be independent of
   the host system yet.

   Once again, let us recall that improper setting of LFS together with
   building as root, may render your computer unusable. This whole chapter
   must be done as user lfs, with the environment as described in
   Section 4.4, “Setting Up the Environment”.

6.2. M4-1.4.19

   The M4 package contains a macro processor.

   Approximate build time: 0.2 SBU
   Required disk space: 32 MB

  6.2.1. Installation of M4

   Prepare M4 for compilation:

 ./configure --prefix=/usr   \
             --host=$LFS_TGT \
             --build=$(build-aux/config.guess)

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Details on this package are located in Section 8.12.2, “Contents of M4.”

6.3. Ncurses-6.3

   The Ncurses package contains libraries for terminal-independent handling
   of character screens.

   Approximate build time: 0.7 SBU
   Required disk space: 50 MB

  6.3.1. Installation of Ncurses

   First, ensure that gawk is found first during configuration:

 sed -i s/mawk// configure

   Then, run the following commands to build the “tic” program on the build
   host:

 mkdir build
 pushd build
   ../configure
   make -C include
   make -C progs tic
 popd

   Prepare Ncurses for compilation:

 ./configure --prefix=/usr                \
             --host=$LFS_TGT              \
             --build=$(./config.guess)    \
             --mandir=/usr/share/man      \
             --with-manpage-format=normal \
             --with-shared                \
             --without-normal             \
             --with-cxx-shared            \
             --without-debug              \
             --without-ada                \
             --disable-stripping          \
             --enable-widec

   The meaning of the new configure options:

   --with-manpage-format=normal

           This prevents Ncurses installing compressed manual pages, which
           may happen if the host distribution itself has compressed manual
           pages.

   --with-shared

           This makes Ncurses build and install shared C libraries.

   --without-normal

           This prevents Ncurses building and installing static C libraries.

   --without-debug

           This prevents Ncurses building and installing debug libraries.

   --with-cxx-shared

           This makes Ncurses build and install shared C++ bindings. It also
           prevents it building and installing static C++ bindings.

   --without-ada

           This ensures that Ncurses does not build support for the Ada
           compiler which may be present on the host but will not be
           available once we enter the chroot environment.

   --disable-stripping

           This switch prevents the building system from stripping the
           programs using strip program from the host. Using host tools on
           cross-compiled program can cause failure.

   --enable-widec

           This switch causes wide-character libraries (e.g.,
           libncursesw.so.6.3) to be built instead of normal ones (e.g.,
           libncurses.so.6.3). These wide-character libraries are usable in
           both multibyte and traditional 8-bit locales, while normal
           libraries work properly only in 8-bit locales. Wide-character and
           normal libraries are source-compatible, but not binary-compatible.

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS TIC_PATH=$(pwd)/build/progs/tic install
 echo "INPUT(-lncursesw)" > $LFS/usr/lib/libncurses.so

   The meaning of the install options:

   TIC_PATH=$(pwd)/build/progs/tic

           We need to pass the path of the just built tic able to run on the
           building machine, so that the terminal database can be created
           without errors.

   echo "INPUT(-lncursesw)" > $LFS/usr/lib/libncurses.so

           The libncurses.so library is needed by a few packages we will
           build soon. We create this small linker script, as this is what is
           done in Chapter 8.

   Details on this package are located in Section 8.28.2, “Contents of
   Ncurses.”

6.4. Bash-5.1.16

   The Bash package contains the Bourne-Again SHell.

   Approximate build time: 0.5 SBU
   Required disk space: 64 MB

  6.4.1. Installation of Bash

   Prepare Bash for compilation:

 ./configure --prefix=/usr                   \
             --build=$(support/config.guess) \
             --host=$LFS_TGT                 \
             --without-bash-malloc

   The meaning of the configure options:

   --without-bash-malloc

           This option turns off the use of Bash's memory allocation (malloc)
           function which is known to cause segmentation faults. By turning
           this option off, Bash will use the malloc functions from Glibc
           which are more stable.

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Make a link for the programs that use sh for a shell:

 ln -sv bash $LFS/bin/sh

   Details on this package are located in Section 8.34.2, “Contents of Bash.”

6.5. Coreutils-9.1

   The Coreutils package contains utilities for showing and setting the basic
   system characteristics.

   Approximate build time: 0.6 SBU
   Required disk space: 163 MB

  6.5.1. Installation of Coreutils

   Prepare Coreutils for compilation:

 ./configure --prefix=/usr                     \
             --host=$LFS_TGT                   \
             --build=$(build-aux/config.guess) \
             --enable-install-program=hostname \
             --enable-no-install-program=kill,uptime

   The meaning of the configure options:

   --enable-install-program=hostname

           This enables the hostname binary to be built and installed – it is
           disabled by default but is required by the Perl test suite.

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Move programs to their final expected locations. Although this is not
   necessary in this temporary environment, we must do so because some
   programs hardcode executable locations:

 mv -v $LFS/usr/bin/chroot              $LFS/usr/sbin
 mkdir -pv $LFS/usr/share/man/man8
 mv -v $LFS/usr/share/man/man1/chroot.1 $LFS/usr/share/man/man8/chroot.8
 sed -i 's/"1"/"8"/'                    $LFS/usr/share/man/man8/chroot.8

   Details on this package are located in Section 8.54.2, “Contents of
   Coreutils.”

6.6. Diffutils-3.8

   The Diffutils package contains programs that show the differences between
   files or directories.

   Approximate build time: 0.2 SBU
   Required disk space: 26 MB

  6.6.1. Installation of Diffutils

   Prepare Diffutils for compilation:

 ./configure --prefix=/usr --host=$LFS_TGT

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Details on this package are located in Section 8.56.2, “Contents of
   Diffutils.”

6.7. File-5.42

   The File package contains a utility for determining the type of a given
   file or files.

   Approximate build time: 0.2 SBU
   Required disk space: 34 MB

  6.7.1. Installation of File

   The file command on the build host needs to be same version as the one we
   are building in order to create the signature file. Run the following
   commands to build it:

 mkdir build
 pushd build
   ../configure --disable-bzlib      \
                --disable-libseccomp \
                --disable-xzlib      \
                --disable-zlib
   make
 popd

   The meaning of the new configure option:

   --disable-*

           The configuration script attempts to use some packages from the
           host distribution if the corresponding library files exist. It may
           cause compilation failure if a library file exists, but the
           corresponding header files do not. These options prevent using
           these unneeded capabilities from the host.

   Prepare File for compilation:

 ./configure --prefix=/usr --host=$LFS_TGT --build=$(./config.guess)

   Compile the package:

 make FILE_COMPILE=$(pwd)/build/src/file

   Install the package:

 make DESTDIR=$LFS install

   Remove the libtool archive file because it is harmful for cross
   compilation:

 rm -v $LFS/usr/lib/libmagic.la

   Details on this package are located in Section 8.10.2, “Contents of File.”

6.8. Findutils-4.9.0

   The Findutils package contains programs to find files. These programs are
   provided to recursively search through a directory tree and to create,
   maintain, and search a database (often faster than the recursive find, but
   is unreliable if the database has not been recently updated).

   Approximate build time: 0.2 SBU
   Required disk space: 42 MB

  6.8.1. Installation of Findutils

   Prepare Findutils for compilation:

 ./configure --prefix=/usr                   \
             --localstatedir=/var/lib/locate \
             --host=$LFS_TGT                 \
             --build=$(build-aux/config.guess)

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Details on this package are located in Section 8.58.2, “Contents of
   Findutils.”

6.9. Gawk-5.1.1

   The Gawk package contains programs for manipulating text files.

   Approximate build time: 0.2 SBU
   Required disk space: 45 MB

  6.9.1. Installation of Gawk

   First, ensure some unneeded files are not installed:

 sed -i 's/extras//' Makefile.in

   Prepare Gawk for compilation:

 ./configure --prefix=/usr   \
             --host=$LFS_TGT \
             --build=$(build-aux/config.guess)

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Details on this package are located in Section 8.57.2, “Contents of Gawk.”

6.10. Grep-3.7

   The Grep package contains programs for searching through the contents of
   files.

   Approximate build time: 0.2 SBU
   Required disk space: 25 MB

  6.10.1. Installation of Grep

   Prepare Grep for compilation:

 ./configure --prefix=/usr   \
             --host=$LFS_TGT

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Details on this package are located in Section 8.33.2, “Contents of Grep.”

6.11. Gzip-1.12

   The Gzip package contains programs for compressing and decompressing
   files.

   Approximate build time: 0.1 SBU
   Required disk space: 11 MB

  6.11.1. Installation of Gzip

   Prepare Gzip for compilation:

 ./configure --prefix=/usr --host=$LFS_TGT

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Details on this package are located in Section 8.61.2, “Contents of Gzip.”

6.12. Make-4.3

   The Make package contains a program for controlling the generation of
   executables and other non-source files of a package from source files.

   Approximate build time: 0.1 SBU
   Required disk space: 15 MB

  6.12.1. Installation of Make

   Prepare Make for compilation:

 ./configure --prefix=/usr   \
             --without-guile \
             --host=$LFS_TGT \
             --build=$(build-aux/config.guess)

   The meaning of the new configure option:

   --without-guile

           Although we are cross-compiling, configure tries to use guile from
           the build host if it finds it. This makes compilation fail, so
           this switch prevents using it.

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Details on this package are located in Section 8.65.2, “Contents of Make.”

6.13. Patch-2.7.6

   The Patch package contains a program for modifying or creating files by
   applying a “patch” file typically created by the diff program.

   Approximate build time: 0.1 SBU
   Required disk space: 12 MB

  6.13.1. Installation of Patch

   Prepare Patch for compilation:

 ./configure --prefix=/usr   \
             --host=$LFS_TGT \
             --build=$(build-aux/config.guess)

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Details on this package are located in Section 8.66.2, “Contents of
   Patch.”

6.14. Sed-4.8

   The Sed package contains a stream editor.

   Approximate build time: 0.1 SBU
   Required disk space: 20 MB

  6.14.1. Installation of Sed

   Prepare Sed for compilation:

 ./configure --prefix=/usr   \
             --host=$LFS_TGT

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Details on this package are located in Section 8.29.2, “Contents of Sed.”

6.15. Tar-1.34

   The Tar package provides the ability to create tar archives as well as
   perform various other kinds of archive manipulation. Tar can be used on
   previously created archives to extract files, to store additional files,
   or to update or list files which were already stored.

   Approximate build time: 0.2 SBU
   Required disk space: 38 MB

  6.15.1. Installation of Tar

   Prepare Tar for compilation:

 ./configure --prefix=/usr                     \
             --host=$LFS_TGT                   \
             --build=$(build-aux/config.guess)

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Details on this package are located in Section 8.67.2, “Contents of Tar.”

6.16. Xz-5.2.6

   The Xz package contains programs for compressing and decompressing files.
   It provides capabilities for the lzma and the newer xz compression
   formats. Compressing text files with xz yields a better compression
   percentage than with the traditional gzip or bzip2 commands.

   Approximate build time: 0.1 SBU
   Required disk space: 16 MB

  6.16.1. Installation of Xz

   Prepare Xz for compilation:

 ./configure --prefix=/usr                     \
             --host=$LFS_TGT                   \
             --build=$(build-aux/config.guess) \
             --disable-static                  \
             --docdir=/usr/share/doc/xz-5.2.6

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Remove the libtool archive file because it is harmful for cross
   compilation:

 rm -v $LFS/usr/lib/liblzma.la

   Details on this package are located in Section 8.8.2, “Contents of Xz.”

6.17. Binutils-2.39 - Pass 2

   The Binutils package contains a linker, an assembler, and other tools for
   handling object files.

   Approximate build time: 1.4 SBU
   Required disk space: 514 MB

  6.17.1. Installation of Binutils

   Binutils ships an outdated libtool copy in the tarball. It lacks sysroot
   support so the produced binaries will be mistakenly linked to libraries
   from the host distro. Workaround this issue:

 sed '6009s/$add_dir//' -i ltmain.sh

   Create a separate build directory again:

 mkdir -v build
 cd       build

   Prepare Binutils for compilation:

 ../configure                   \
     --prefix=/usr              \
     --build=$(../config.guess) \
     --host=$LFS_TGT            \
     --disable-nls              \
     --enable-shared            \
     --enable-gprofng=no        \
     --disable-werror           \
     --enable-64-bit-bfd

   The meaning of the new configure options:

   --enable-shared

           Builds libbfd as a shared library.

   --enable-64-bit-bfd

           Enables 64-bit support (on hosts with narrower word sizes). May
           not be needed on 64-bit systems, but does no harm.

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   Remove the libtool archive files because they are harmful for cross
   compilation, and remove unnecessary static libraries:

 rm -v $LFS/usr/lib/lib{bfd,ctf,ctf-nobfd,opcodes}.{a,la}

   Details on this package are located in Section 8.18.2, “Contents of
   Binutils.”

6.18. GCC-12.2.0 - Pass 2

   The GCC package contains the GNU compiler collection, which includes the C
   and C++ compilers.

   Approximate build time: 15 SBU
   Required disk space: 4.5 GB

  6.18.1. Installation of GCC

   As in the first build of GCC, the GMP, MPFR, and MPC packages are
   required. Unpack the tarballs and move them into the required directory
   names:

 tar -xf ../mpfr-4.1.0.tar.xz
 mv -v mpfr-4.1.0 mpfr
 tar -xf ../gmp-6.2.1.tar.xz
 mv -v gmp-6.2.1 gmp
 tar -xf ../mpc-1.2.1.tar.gz
 mv -v mpc-1.2.1 mpc

   If building on x86_64, change the default directory name for 64-bit
   libraries to “lib”:

 case $(uname -m) in
   x86_64)
     sed -e '/m64=/s/lib64/lib/' -i.orig gcc/config/i386/t-linux64
   ;;
 esac

   Override the building rule of libgcc and libstdc++ headers, to allow
   building these libraries with POSIX threads support:

 sed '/thread_header =/s/@.*@/gthr-posix.h/' \
     -i libgcc/Makefile.in libstdc++-v3/include/Makefile.in

   Create a separate build directory again:

 mkdir -v build
 cd       build

   Before starting to build GCC, remember to unset any environment variables
   that override the default optimization flags.

   Now prepare GCC for compilation:

 ../configure                                       \
     --build=$(../config.guess)                     \
     --host=$LFS_TGT                                \
     --target=$LFS_TGT                              \
     LDFLAGS_FOR_TARGET=-L$PWD/$LFS_TGT/libgcc      \
     --prefix=/usr                                  \
     --with-build-sysroot=$LFS                      \
     --enable-initfini-array                        \
     --disable-nls                                  \
     --disable-multilib                             \
     --disable-decimal-float                        \
     --disable-libatomic                            \
     --disable-libgomp                              \
     --disable-libquadmath                          \
     --disable-libssp                               \
     --disable-libvtv                               \
     --enable-languages=c,c++

   The meaning of the new configure options:

   --with-build-sysroot=$LFS

           Normally, using --host ensures that a cross-compiler is used for
           building GCC, and that compiler knows that it has to look for
           headers and libraries in $LFS. But the build system of GCC uses
           other tools, which are not aware of this location. This switch is
           needed to have them find the needed files in $LFS, and not on the
           host.

   --target=$LFS_TGT

           As we are cross-compiling GCC, it's impossible to build target
           libraries (libgcc and libstdc++) with the compiled GCC binaries
           because these binaries won't run on the host distro. GCC building
           system will attempt to use the C and C++ compilers on the host
           distro as a workaround by default. It's not supported to build GCC
           target libraries with a different version of GCC, so using host
           compilers may cause building failure. This parameter ensures to
           build the libraries with GCC pass 1 and prevent the issue.

   LDFLAGS_FOR_TARGET=...

           Allow libstdc++ to use shared libgcc being built in this pass,
           instead of the static version built in GCC pass 1. This is needed
           for supporting C++ exception handling.

   --enable-initfini-array

           This option is automatically enabled when building a native
           compiler with a native compiler on x86. But here, we build with a
           cross compiler, so we need to explicitly set this option.

   Compile the package:

 make

   Install the package:

 make DESTDIR=$LFS install

   As a finishing touch, create a utility symlink. Many programs and scripts
   run cc instead of gcc, which is used to keep programs generic and
   therefore usable on all kinds of UNIX systems where the GNU C compiler is
   not always installed. Running cc leaves the system administrator free to
   decide which C compiler to install:

 ln -sv gcc $LFS/usr/bin/cc

   Details on this package are located in Section 8.26.2, “Contents of GCC.”

